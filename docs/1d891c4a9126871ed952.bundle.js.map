{"version":3,"file":"1d891c4a9126871ed952.bundle.js","mappings":"ufAMO,ICCHA,EAcAC,EDfOC,EAAiB,CAE1BC,IAAK,mCACLC,IAAK,iTACLC,IAAK,0EACLC,IAAK,sCACLC,IAAK,oGACLC,IAAK,oFACLC,IAAK,kFAELC,IAAK,mCAELC,IAAK,gGAGLC,GAAI,mDAIJC,IAAK,4CAGLC,IAAK,gEACLC,IAAK,yEACLC,IAAK,kDAGLC,IAAK,qDACLC,KAAM,wCACNC,KAAM,uCACNC,KAAM,+BACNC,KAAM,+DACNC,KAAM,2LACNC,KAAM,2DACNC,KAAM,mLAENC,IAAK,kCACLC,IAAK,mBACLC,IAAK,8DACLC,IAAK,+DACLC,IAAK,qEACLC,IAAK,4HACLC,IAAK,qBACLC,IAAK,sDAELC,IAAK,kFACLC,IAAK,+EACLC,IAAK,oGACLC,IAAK,iDACLC,IAAK,2DACLC,IAAK,uLAELC,IAAK,0LAGLC,KAAM,kFACNC,KAAM,iEACNC,KAAM,wFAENC,KAAM,6DACNC,KAAM,sEACNC,KAAM,sDACNC,KAAM,iEACNC,KAAM,sEACNC,KAAM,uDACNC,KAAM,0BACNC,KAAM,uBACNC,KAAM,6CACNC,MAAO,iDACPC,MAAO,wCACPC,MAAO,6CACPC,MAAO,uCACPC,MAAO,2CACPC,MAAO,qDACPC,MAAO,wCACPC,MAAO,6CACPC,MAAO,mEAEPC,MAAO,sBACPC,SAAU,4FAEVC,KAAM,2FACNC,KAAM,8BACNC,KAAM,kCACNC,KAAM,qDACNC,KAAM,4DACNC,KAAM,gEACNC,KAAM,uDACNC,KAAM,mDACNC,KAAM,kCACNC,MAAO,oEACPC,MAAO,iDAEPC,MAAO,mDACPC,MAAO,sCACPC,MAAO,2BACPC,MAAO,mFACPC,MAAO,sFACPC,MAAO,wDACPC,MAAO,4CACPC,MAAO,qBACPC,MAAO,0FACPC,MAAO,0CACPC,MAAO,iDACPC,MAAO,+OAEPC,IAAK,sCACLC,IAAK,0EACLC,IAAK,4BACLC,IAAK,oBACLC,IAAK,sJAELC,IAAK,wDAELC,IAAK,wBACLC,IAAK,wDACLC,IAAK,gEACLC,IAAK,qBAELC,IAAK,mEACLC,IAAK,4EACLC,IAAK,sEAILC,IAAK,sEACLC,IAAK,6CACLC,IAAK,2FACLC,IAAK,8BACLC,IAAK,yCACLC,IAAK,2DACLC,IAAK,gCACLC,IAAK,+IAELC,IAAK,6BACLC,IAAK,8DAELC,IAAK,uGACLC,IAAK,8JACLC,IAAK,0GACLC,QAAS,2EACTC,UAAW,2EACXC,QAAS,2EACTC,cAAe,wEACfC,eAAgB,sCAChBC,aAAc,sFACdC,aAAc,yDAEdC,IAAK,oCACLC,IAAK,qDACLC,IAAK,sEACLC,IAAK,0FACLC,IAAK,wDACLC,IAAK,+DACLC,IAAK,iEACLC,KAAM,qEACNC,KAAM,oDAENC,KAAM,mEACNC,KAAM,oEACNC,KAAM,2CACNC,KAAM,8CACNC,KAAM,kDACNC,KAAM,wCACNC,KAAM,iEACNC,KAAM,kDACNC,KAAM,oDACNC,KAAM,iDACNC,KAAM,wCACNC,KAAM,oJACNC,KAAM,0EACNC,KAAM,wEACNC,KAAM,gFACNC,KAAM,6DACNC,KAAM,+CACNC,KAAM,sCACNC,KAAM,sEACNC,KAAM,gEACNC,KAAM,uGACNC,KAAM,gHACNC,KAAM,+CACNC,KAAM,iHACNC,KAAM,mFACNC,KAAM,wDACNC,KAAM,sOAKNC,IAAK,mEACLC,IAAK,+BAMLC,GAAI,kEAEJC,KAAM,qDAENC,KAAM,kEAINC,MAAO,qFACPC,MAAO,0EACPC,MAAO,yGAEPC,KAAM,qHAMNC,IAAK,4B,yFCxLP,IAEIC,EADAC,EAAmB,KADC,QAA4B,OAG7C,SAASC,IACd,IAAKF,EAAuB,CAC1B,IACIG,EAAgBC,OAAOC,oBAAoBJ,GAC3CK,EAAsBF,OAAOC,oBAAoB,MACrDL,EAAwB,IAAIG,KAAkBG,EAH9B,UAAW,SAI7B,CACA,OAAON,CACT,CChCO,SAASO,EAAoBC,GAClC,GAAkB,aAAdA,EAAJ,CAGA,GAAI,CAAC,cAAcC,SAASD,GAC1B,MAAM,QAAW,OAAQ,CACvBA,cAGJ,IAAIE,EAAW,6CACXC,EAAQ,IAAIC,OAAOF,GACvB,GAMc,QAAdF,IAAwBA,EAAUK,MAAMF,GACtC,MAAM,QAAW,MAAO,CACtBA,MAAOD,EACPF,aAjBJ,CAoBF,CAKO,SAASM,EAAmBC,GACjC,IAAIC,GAAc,QAA4BD,EAAaE,YA4G3D,OAfA,SAASC,EAASC,EAAYC,GACvBD,GAAoC,iBAAfA,GAG1Bf,OAAOiB,KAAKF,GAAYG,SAAQC,IAC9B,IAAIC,EAAYL,EAAWI,GACtBJ,EAAWM,aAAcD,GAAkC,iBAAdA,GAA2BE,MAAMC,QAAQR,IAlG/F,SAAoBX,EAAWgB,EAAWI,GAIxC,GAHyB,iBAAdpB,GAA+C,iBAAdgB,GAA2BE,MAAMC,QAAQH,IAAwC,sBAA1BI,EAAKC,MAAM,KAAKC,OAA+BvB,EAAoBC,GAGlKgB,EAAUO,eAAe,SAA8B,UAAnBP,EAAUQ,KAChD,MAAM,QAAW,MAAO,CACtBxB,cAQJ,GAAIgB,EAAUO,eAAe,aAA6C,kBAAvBP,EAAUS,SAC3D,MAAM,QAAW,OAAQ,CACvBzB,cAKJ,GAAIgB,EAAUO,eAAe,QAC3B,MAAM,QAAW,OAAQ,CACvBvB,cAKJ,GAAIgB,EAAUO,eAAe,OAC3B,GAAIL,MAAMC,QAAQH,EAAUQ,OAC1B,GAAIR,EAAUQ,KAAKE,OAAS,IAAMV,EAAUQ,KAAKvB,SAAS,YAAce,EAAUQ,KAAKvB,SAAS,QAC9F,MAAM,QAAW,MAAO,CACtBD,mBAIJ,OAAQgB,EAAUQ,MAChB,IAAK,SACH,MACF,IAAK,QACH,IAAKR,EAAUW,QAAUX,EAAUW,MAAMH,MAAiC,WAAzBR,EAAUW,MAAMH,KAC/D,MAAM,QAAW,MAAO,CACtBxB,cAGJ,MACF,QACE,MAAM,QAAW,MAAO,CACtBA,cAKV,IAAI4B,EAAWR,EAAKC,MAAM,KAAKK,QAAU,EAGzC,GAAIE,EAAU,CACZ,GAAIZ,EAAUa,QACZ,MAAM,QAAW,MAAO,CACtBT,OACAS,QAASb,EAAUa,UAGvB,GAAIb,EAAUc,QACZ,MAAM,QAAW,MAAO,CACtBV,QAGN,CAGA,IAAKQ,EAAU,CAEb,GAAkB,QAAd5B,GAAuC,QAAhBQ,EACzB,MAAM,QAAW,OAAQ,CACvBR,cAKJ,GAA4B,MAAxBA,EAAU+B,OAAO,GAAY,CAC/B,GAEc,QAAd/B,GAAqC,aAAdA,EACrB,OAEF,MAAM,QAAW,MAAO,CACtBA,aAEJ,CACF,CACF,CAQMgC,CAAWjB,EAAeC,EAAWJ,GAEvC,IAAIqB,EAAWrB,EACO,eAAlBG,IAAgCkB,EAAWA,EAAW,IAAMlB,GAChEL,EAASM,EAAWiB,EAAS,GAEjC,CACAvB,CAASH,EAAc,KAChB,CACT,CACO,SAAS2B,EAAgBC,GAC9B,IAAKA,EAAW1B,WACd,MAAM,QAAW,OAAQ,CACvB2B,OAAQD,IAGZ,SAASE,EAA0BC,GACjC,IAAKA,EACH,MAAM,QAAW,OAAQ,CACvBF,OAAQD,IAGZ,IAAIX,EAAOc,EAAWd,KACtB,IAAKA,IAAS,CAAC,SAAU,SAAU,WAAWvB,SAASuB,GACrD,MAAM,QAAW,OAAQ,CACvBY,OAAQD,EACRI,KAAM,CACJD,eAIR,CACA,GAAqC,iBAA1BH,EAAW1B,WAAyB,CAC7C,IAAI+B,EAAML,EAAW1B,WAErB4B,EADiBF,EAAWlB,WAAWuB,GAEzC,KAAO,CACL,IAAIC,EAAsBN,EAAW1B,WAErC4B,GADoB,QAAsBF,EAAYM,EAAoBD,MAE1EC,EAAoBC,OAAO5B,SAAQ6B,IAEjCN,GADiB,QAAsBF,EAAYQ,GACd,GAEzC,CAOA,IAAInC,GAAc,QAA4B2B,EAAW1B,YACrDmC,EAAwBT,EAAWlB,WAAWT,GAClD,IAAKoC,EAAsBC,UACzB,MAAM,QAAW,OAAQ,CACvBT,OAAQD,EACRI,KAAM,CACJK,0BAIR,CAKA,SAASE,EAA0BC,GAGjC,IAFA,IAAIC,EAAYD,EAAU1B,MAAM,KAC5B4B,EAAW,GACNC,EAAI,EAAGA,EAAIF,EAAUtB,OAAQwB,GAAK,EAEvCD,EADmB,OAAjBD,EAAUE,GACDD,EAASE,OAAO,eAAeA,OAAOH,EAAUE,KAEhDD,EAASE,OAAO,UAG/B,OAAO,QAASF,EAClB,CAMO,SAASG,EAAYjB,GAC1B,IAAKA,EAAW1B,WACd,MAAM,QAAW,OAAQ,CACvB2B,OAAQD,IAGZ,IAAKA,EAAWZ,eAAe,cAC7B,MAAM,QAAW,OAAQ,CACvBa,OAAQD,IAKZ,GAAIA,EAAWlB,WAAWoC,KACxB,MAAM,QAAW,OAAQ,CACvBjB,OAAQD,IAKZ,IAAKA,EAAWZ,eAAe,YAA4C,iBAAvBY,EAAWmB,SAAwBnB,EAAWmB,QAAU,EAC1G,MAAM,QAAW,OAAQ,CACvBA,QAASnB,EAAWmB,UA6CxB,GA1CAhD,EAAmB6B,GACnBD,EAAgBC,GAChBvC,OAAOiB,KAAKsB,EAAWlB,YAAYH,SAAQ0B,IACzC,IAAIe,EAAQpB,EAAWlB,WAAWuB,GAElC,GAAIA,IAAQL,EAAW1B,WAAY,CACjC,GAAI0B,EAAWqB,SAAWrB,EAAWqB,QAAQvD,SAASuC,GACpD,MAAM,QAAW,OAAQ,CACvBe,QACAnB,OAAQD,IAGZ,GAAIoB,EAAME,OACR,MAAM,QAAW,OAAQ,CACvBF,QACAnB,OAAQD,IAGZ,GAAIA,EAAWuB,WAAavB,EAAWuB,UAAUzD,SAASuC,GACxD,MAAM,QAAW,OAAQ,CACvBe,QACAnB,OAAQD,IAGZ,GAAmB,WAAfoB,EAAM/B,KACR,MAAM,QAAW,OAAQ,CACvB+B,QACAnB,OAAQD,GAGd,CAGA,GAAIzC,IAAuBO,SAASuC,GAClC,MAAM,QAAW,OAAQ,CACvBA,MACAJ,OAAQD,GAEZ,IAIEA,EAAWqB,QAAS,CAEtB,KAAK,QAAqBrB,EAAWqB,SACnC,MAAM,QAAW,OAAQ,CACvBA,QAASrB,EAAWqB,QACpBpB,OAAQD,IAGZA,EAAWqB,QAAQ1C,SAAQ6C,IAEzB,GAAuB,iBAAVA,IAAsBzC,MAAMC,QAAQwC,GAC/C,MAAM,QAAW,OAAQ,CACvBA,QACAvB,OAAQD,IAIZ,GAAIjB,MAAMC,QAAQwC,GAChB,IAAK,IAAIT,EAAI,EAAGA,EAAIS,EAAMjC,OAAQwB,GAAK,EACrC,GAAwB,iBAAbS,EAAMT,GACf,MAAM,QAAW,OAAQ,CACvBS,QACAvB,OAAQD,MAYG,QAAqBwB,GAASA,EAAQ,CAACA,IAC7C7C,SAAQd,IACnB,IAAIsC,GAAa,QAAsBH,EAAYnC,GAEnD,OADWsC,EAAWd,MAEpB,IAAK,SAEH,IADgBc,EAAWO,UAEzB,MAAM,QAAW,OAAQ,CACvBc,QACAhB,MAAO3C,EACPoC,OAAQD,IAGZ,MACF,IAAK,SACL,IAAK,UAEH,IADiBG,EAAWsB,WAE1B,MAAM,QAAW,OAAQ,CACvBD,QACAhB,MAAO3C,EACPoC,OAAQD,IAGZ,IAAI0B,EAAUvB,EAAWuB,QACrBC,EAAUxB,EAAWwB,QACzB,QAAuB,IAAZD,QAA8C,IAAZC,EAC3C,MAAM,QAAW,OAAQ,CACvBH,QACAhB,MAAO3C,EACPoC,OAAQD,IAGZ,MACF,IAAK,UAKH,IAAI4B,EAAa,GACbC,EAAehE,EACnB,GAAIA,EAAUC,SAAS,KAAM,CAC3B,IAAIgE,EAAYjE,EAAUqB,MAAM,KAChC2C,EAAeC,EAAU3C,MACzByC,EAAaE,EAAUC,KAAK,IAC9B,CACA,IAAIC,EAAkC,KAAfJ,EAAoB5B,GAAa,QAAsBA,EAAY4B,GAC1F,IAAKI,EAAiB1C,WAAa0C,EAAiB1C,SAASxB,SAAS+D,GACpE,MAAM,QAAW,OAAQ,CACvBL,QACAhB,MAAO3C,EACPoC,OAAQD,IAGZ,MACF,QACE,MAAM,QAAW,OAAQ,CACvBnC,YACAwB,KAAMc,EAAWd,KACjBY,OAAQD,IAEd,GACA,GAEN,CAGAvC,OAAOiB,MAAK,QAAcsB,IAAaiC,KAAI5B,IAEzC,IAAInB,EAAQmB,EAAInB,MAAM,KAEtB,OADAA,EAAMC,MACCD,EAAM6C,KAAK,IAAI,IACrBG,QAAO7B,GAAe,KAARA,IAAY6B,QAAO,CAACC,EAAMC,EAAKC,IAAQA,EAAIC,QAAQH,KAAUC,IAC7EF,QAAO7B,IAEN,IAAIe,GAAQ,QAAYpB,EAAYK,GACpC,OAAOe,KAAWA,EAAMI,KAAK,IAC5B7C,SAAQ0B,IAIT,MADAA,GADAA,EAAMA,EAAIkC,QAAQ,cAAe,KACvBA,QAAQ,kBAAmB,MAC/B,QAAW,OAAQ,CACvBf,OAAO,QAASnB,GAChBJ,OAAQD,GACR,KAIHA,EAAWqB,SAAW,IAAImB,QAAO,CAACC,EAAYC,MACzC,QAAqBA,IACvB,QAAcD,EAAYC,GAE1BD,EAAWE,KAAKD,GAEXD,IACN,IAAIP,QAAO,CAACC,EAAMC,EAAKC,IAAQA,EAAIC,QAAQH,KAAUC,IACvDH,KAAIW,IACH,IAAI9B,EAAWH,EAA0BiC,GACrC/D,GAAY,QAAYmB,EAAYc,GACxC,IAAKjC,GAAkC,iBAAdA,EACvB,MAAM,QAAW,OAAQ,CACvB2C,MAAOoB,EACP3C,OAAQD,IAGZ,MAAO,CACL4C,YACA/D,YACD,IACAqD,QAAOV,GAAkC,WAAzBA,EAAM3C,UAAUQ,MAA8C,YAAzBmC,EAAM3C,UAAUQ,MAA+C,WAAzBmC,EAAM3C,UAAUQ,MAA8C,YAAzBmC,EAAM3C,UAAUQ,OAAoBV,SAAQ6C,IAC7K,MAAM,QAAW,OAAQ,CACvBnB,IAAKmB,EAAMoB,UACXvD,KAAMmC,EAAM3C,UAAUQ,KACtBY,OAAQD,GACR,IASJvC,OAAOiB,MAAK,QAAcsB,IAAaiC,KAAI5B,IAEzC,IAAInB,EAAQmB,EAAInB,MAAM,KAEtB,OADAA,EAAMC,MACCD,EAAM6C,KAAK,IAAI,IACrBG,QAAO7B,GAAe,KAARA,GAAsB,gBAARA,IAAuB6B,QAAO,CAACC,EAAMC,EAAKC,IAAQA,EAAIC,QAAQH,KAAUC,IACtGF,QAAO7B,IAEN,IAAIe,GAAQ,QAAYpB,EAAYK,GACpC,OAAOe,KAAWA,EAAMG,SAAS,IAChC5C,SAAQ0B,IAIT,MADAA,GADAA,EAAMA,EAAIkC,QAAQ,cAAe,KACvBA,QAAQ,kBAAmB,MAC/B,QAAW,OAAQ,CACvBf,OAAO,QAASnB,GAChBJ,OAAQD,GACR,IAIAA,EAAWuB,WACbvB,EAAWuB,UAAU5C,SAAQkE,IAE3B,IAAI/B,EAAWH,EAA0BkC,GAErChE,GAAY,QAAYmB,EAAYc,GACxC,IAAKjC,GAAkC,iBAAdA,EACvB,MAAM,QAAW,OAAQ,CACvB2B,MAAOqC,EACP5C,OAAQD,GAEZ,GAGN,CCheO,SAAS8C,EAAgBC,GACzBA,GAGLtF,OAAOuF,QAAQD,GAASpE,SAAQ,EAAEsE,EAAGC,MACnC,GAAiB,iBAAND,EACT,MAAM,QAAe,QAAS,CAC5BE,KAAMF,IAGV,GAAIA,EAAEG,WAAW,KACf,MAAM,QAAe,QAAS,CAC5BD,KAAMF,IAGV,GAAiB,mBAANC,EACT,MAAM,QAAe,QAAS,CAC5BC,KAAMF,EACN5D,YAAa4D,IAGjB,GFpBG,WACL,IAAKjQ,EAAyB,CAC5B,IAAIqQ,EAAiB,IAAI,KACrB7F,EAAgBC,OAAOC,oBAAoB2F,GAC3C1F,EAAsBF,OAAOC,oBAAoBD,OAAO6F,eAAeD,IAC3ErQ,EAA0B,IAAIwK,KAAkBG,EAClD,CACA,OAAO3K,CACT,CEYQuQ,GAAyBzF,SAASmF,IAAM1F,IAAuBO,SAASmF,GAC1E,MAAM,QAAW,QAAS,CACxBE,KAAMF,GAEV,GAEJ,C,cCzBO,SAASO,EAA0BpD,GACxC,GHYK,WACL,IAAKnN,EAAuB,CAC1B,IAAIoQ,EAAiB,IAAI,KAAe,iBAAkB,UACtD7F,EAAgBC,OAAOC,oBAAoB2F,GAC3C1F,EAAsBF,OAAOC,oBAAoBD,OAAO6F,eAAeD,IAC3EpQ,EAAwB,IAAIuK,KAAkBG,GAC9C0F,EAAeI,SACjB,CACA,OAAOxQ,CACT,CGrBMyQ,GAAuB5F,SAASsC,EAAK+C,MACvC,MAAM,QAAW,MAAO,CACtBA,KAAM/C,EAAK+C,OAGfQ,EAAqBvD,EAAK+C,KAC5B,CACO,SAASS,EAA0BxD,GAExC,GADAuD,EAAqBvD,EAAK+C,MACtB/C,EAAK+C,KAAKrF,SAAS,KACrB,MAAM,QAAW,OAAQ,CACvBqF,KAAM/C,EAAK+C,OASf,IAAI,QAAa/C,EAAK+C,QAChB/C,EAAK+C,KAAKU,SAAS,MAAQzD,EAAK+C,KAAKU,SAAS,OAChD,MAAM,QAAW,OAAQ,CACvBV,KAAM/C,EAAK+C,MAInB,CACA,IAAIW,EAA6B,wBAC7BC,EAA0B,IAAI9F,OAAO6F,GAWlC,SAASH,EAAqBR,GACnC,GAAoB,iBAATA,GAAqC,IAAhBA,EAAK5D,OACnC,MAAM,QAAe,MAAO,CAC1B4D,SAKJ,IAAI,QAAaA,GACf,OAAO,EAET,IAAKA,EAAKjF,MAAM6F,IAKP,aAATZ,EACE,MAAM,QAAW,MAAO,CACtBnF,MAAO8F,EACPE,UAAWb,IAGf,OAAO,CACT,C,wBChEO,SAASc,EAAW7D,GAEzB,KADsE,oBAAlD3C,OAAOyG,UAAUC,SAASC,KAAKhE,EAAKiE,WAEtD,MAAM,QAAe,OAAQ,CAC3BC,GAAIlE,EAAKkE,GACTC,WAAYnE,EAAKmE,WAAWpB,KAC5BkB,SAAUjE,EAAKiE,WAGnB,IAAIG,EAAY,CAAC,WAAY,QAAS,OAAQ,OAAQ,SAgBtD,GAfA/G,OAAOiB,KAAK0B,EAAKiE,UAAU1F,SAAQ0B,IACjC,IAAKmE,EAAU1G,SAASuC,GACtB,MAAM,QAAe,OAAQ,CAC3BiE,GAAIlE,EAAKkE,GACTC,WAAYnE,EAAKmE,WAAWpB,KAC5BkB,SAAUjE,EAAKiE,SACfhE,MACAD,KAAM,CACJoE,cAGN,IAIc,UAAZpE,EAAKkE,KAAmBlE,EAAKiE,SAASI,OAASrE,EAAKiE,SAASK,MAC/D,MAAM,QAAW,OAAQ,CACvBH,WAAYnE,EAAKmE,WAAWpB,KAC5BwB,MAAOvE,EAAKiE,WAGhBO,EAAiCxE,EAAKiE,SACxC,CACO,SAASQ,EAAgBzE,GAC9B,IAAIH,EAASG,EAAK0E,QAAQP,WAAWtE,OAAOD,WAMxC+E,EAAmB3E,EAAK4E,WAAWC,SACnCC,EAAuBzH,OAAOiB,KAAKuB,EAAOnB,YAC9CrB,OAAOiB,KAAKqG,GAEX7C,QAAOiD,IAAoBA,EAAgB/B,WAAW,OAEtDlB,QAAO1B,IAAUA,EAAM1C,SAAS,OAAMa,SAAQ6B,IAC7C,IAAK0E,EAAqBpH,SAAS0C,GACjC,MAAM,QAAW,OAAQ,CACvBP,SACAO,QACAmE,MAAOvE,EAAK4E,YAEhB,IAOF,IAAII,EAAgBnF,EAAOoB,QAAUpB,EAAOoB,QAAU,GAClDG,EAAQpB,EAAK4E,WAAWxD,MAC5B,GAAIA,IACe4D,EAAcC,MAAKC,IAAe,OAAUA,EAAa9D,KAExE,MAAM,QAAW,OAAQ,CACvB+C,WAAYnE,EAAK0E,QAAQP,WAAWpB,KACpCwB,MAAOvE,EAAK4E,WACZ/E,WASN,GAAwB,UAApBG,EAAK0E,QAAQR,KACViB,EAA6BnF,EAAK0E,QAAQP,WAAWtE,OAAOD,WAAYI,EAAK4E,cAAgB5E,EAAK0E,QAAQP,WAAWiB,SAASC,eACjI,MAAM,QAAW,OAAQ,CACvBlB,WAAYnE,EAAK0E,QAAQP,WACzBI,MAAOvE,EAAK4E,aASd5E,EAAK4E,WAAWU,MAClBtF,EAAK4E,WAAWU,KAAKzD,KAAI0D,GAAYlI,OAAOiB,KAAKiH,GAAU,KAAIzD,QAAO1B,IAAUA,EAAM1C,SAAS,OAAMa,SAAQ6B,IAC3G,IAAK0E,EAAqBpH,SAAS0C,GACjC,MAAM,QAAW,OAAQ,CACvBP,SACAO,QACAmE,MAAOvE,EAAK4E,YAEhB,IAKJJ,EAAiCxE,EAAK4E,WACxC,CACO,SAASO,EAA6BtF,EAAQ0E,GAEnD,OADoB,KAAsBiB,aAAa3F,EAAQ0E,GAC1CkB,UAAUC,wBACjC,CAMO,SAASlB,EAAiCK,GACvB,iBAAbA,GAAsC,OAAbA,GAGzBxH,OAAOiB,KAAKuG,GAClBtG,SAAQ0B,IACX,IAAIe,EAAQ6D,EAAS5E,GACrB,GAAIe,aAAiBnD,OACnB,MAAM,QAAW,OAAQ,CACvBuC,MAAOH,EACPsE,MAAOM,IAEAlG,MAAMC,QAAQoC,GACvBA,EAAMzC,SAAQoH,GAAQnB,EAAiCmB,KAEvDnB,EAAiCxD,EACnC,GAEJ,CC1HO,SAAS4E,EAAsBC,GAEpC,OAAKA,GAAsB,iBAARA,GAAmC,iBAARA,GAGvC,QAAWA,GAFTA,CAGX,CACO,IAAIC,EAAuB,WACvBC,EAAoB,CAC7BhD,KAAM+C,EACNE,MAAM,EACNC,KAAM,KACJC,QAAQC,KAAK,CAAC,uEAAwE,gGAAiG,+EAAgF,iEAAkE,qFAAsF,GAAI,sEAAuE,6FAG1e,yEAAyExE,KAAK,MAAM,EAEtFyE,aAAc,CACZC,UAAS,KACA,EAETT,wBACA,kBAAAU,CAAmBC,GACjB,IAAKzT,EAAeyT,GAElB,MADAL,QAAQM,MAAM,+BAAiCD,GACzC,IAAIE,MAAM,cAAgBF,EAAO,sCAEzC,OAAOzT,EAAeyT,EACxB,GAEFG,MAAO,CACLC,kBAAmB,CACjBC,MAAO/F,GAETgG,oBAAqB,CACnBD,MAAO,SAAU5G,GACfwD,EAA0BxD,EAC5B,GAEF8G,sBAAuB,CACrBF,MAAO,SAAU5G,GHxBhB,IAAiCH,EAAQkH,EAC1CC,EG0BE,GAFA5D,EAA0BpD,GHzBMH,EG0BRG,EAAKH,OH1BWkH,EG0BH/G,EAAK+G,QHzB5CC,EAAiB3J,OAAOiB,KAAKuB,EAAOnB,YACnCqI,GAGL1J,OAAOiB,KAAKyI,GAASjF,QAAOmF,GAAWD,EAAetJ,SAASuJ,KAAU1I,SAAQ0I,IAC/E,MAAM,QAAW,QAAS,CACxBA,WACA,IGmB8B,MAAxBjH,EAAK+C,KAAKvD,OAAO,GACnB,MAAM,QAAW,MAAO,CACtBuD,KAAM/C,EAAK+C,OAGf,IAAK/C,EAAKH,OACR,MAAM,QAAW,MAAO,CACtBkD,KAAM/C,EAAK+C,KACX/C,QAGN,GAEFkH,iBAAkB,CAChBC,OAAQ,SAAUC,IC3EjB,SAA+BlJ,EAAYmJ,GAChD,IAAKnJ,EACH,MAAM,QAAW,QAAS,CACxBA,aACAoJ,SAAUD,IASd,GAAInJ,IAAeA,EAAWqJ,OAC5B,MAAM,QAAW,QAAS,CACxBrJ,aACAoJ,SAAUD,IAGd,GAAInJ,EAAWR,SAAS,OAASQ,EAAWR,SAAS,MACnD,MAAM,QAAW,QAAS,CACxBQ,aACAoJ,SAAUD,IAGd,GAAInJ,EAAWR,SAAS,KACtB,MAAM,QAAW,QAAS,CACxBQ,aACAoJ,SAAUD,GAGhB,CD6CQG,CAAsBJ,EAAI9H,QAAS8H,EAAIK,QAAO,GAChD,GAEFC,iBAAkB,CAChBd,MAAO,SAAU5G,GACf6D,EAAW7D,EACb,GAEF2H,gBAAiB,CACff,MAAO5G,IACLyE,EAAgBzE,EAAK,GAGzB4H,mBAAoB,CAClBhB,MAAO5G,IAEL0C,EAAgB1C,EAAK6H,QAAQlF,SAC7BD,EAAgB1C,EAAK6H,QAAQd,SAC7BrE,EAAgB1C,EAAK6H,QAAQC,aAGzB9H,EAAK6H,QAAQhI,QAAUG,EAAK6H,QAAQE,qBE3FzC,SAAkClI,EAAQkI,GAE/C,GAAmC,iBAAxBA,GAAoCpJ,MAAMC,QAAQmJ,GAC3D,MAAM,QAAe,QAAS,CAC5BlI,WAGJ,IAAImI,GAAmB,QAAoBnI,GAG3C,GAAImI,EAAiB7I,SAAW9B,OAAOiB,KAAKyJ,GAAqB5I,OAC/D,MAAM,QAAW,QAAS,CACxB8I,KAAM5K,OAAOiB,KAAKyJ,GAClBG,OAAQF,IAKZA,EAAiBnG,KAAIsG,IAAO,CAC1BrF,EAAGqF,EACHC,EAAGL,EAAoBI,EAAM,OAC3BrG,QAAOuG,GAAkC,mBAAfA,EAASD,IAAkB7J,SAAQ8J,IAC/D,MAAM,QAAe,QAAS,CAC5BtH,QAASsH,EAASvF,EAClB7D,YAAaoJ,EACbxI,UACA,GAGN,CF+DUyI,CAAyBtI,EAAK6H,QAAQhI,OAAQG,EAAK6H,QAAQE,oBAC7D,I","sources":["webpack://rxdb-quickstart/./node_modules/rxdb/dist/esm/plugins/dev-mode/error-messages.js","webpack://rxdb-quickstart/./node_modules/rxdb/dist/esm/plugins/dev-mode/entity-properties.js","webpack://rxdb-quickstart/./node_modules/rxdb/dist/esm/plugins/dev-mode/check-schema.js","webpack://rxdb-quickstart/./node_modules/rxdb/dist/esm/plugins/dev-mode/check-orm.js","webpack://rxdb-quickstart/./node_modules/rxdb/dist/esm/plugins/dev-mode/unallowed-properties.js","webpack://rxdb-quickstart/./node_modules/rxdb/dist/esm/plugins/dev-mode/check-query.js","webpack://rxdb-quickstart/./node_modules/rxdb/dist/esm/plugins/dev-mode/index.js","webpack://rxdb-quickstart/./node_modules/rxdb/dist/esm/plugins/dev-mode/check-document.js","webpack://rxdb-quickstart/./node_modules/rxdb/dist/esm/plugins/dev-mode/check-migration-strategies.js"],"sourcesContent":["/**\n * this plugin adds the error-messages\n * without it, only error-codes will be shown\n * This is mainly because error-string are hard to compress and we need a smaller build\n */\n\nexport var ERROR_MESSAGES = {\n  // util.js / config\n  UT1: 'given name is no string or empty',\n  UT2: \"collection- and database-names must match the regex to be compatible with couchdb databases.\\n    See https://neighbourhood.ie/blog/2020/10/13/everything-you-need-to-know-about-couchdb-database-names/\\n    info: if your database-name specifies a folder, the name must contain the slash-char '/' or '\\\\'\",\n  UT3: 'replication-direction must either be push or pull or both. But not none',\n  UT4: 'given leveldown is no valid adapter',\n  UT5: 'keyCompression is set to true in the schema but no key-compression handler is used in the storage',\n  UT6: 'schema contains encrypted fields but no encryption handler is used in the storage',\n  UT7: 'attachments.compression is enabled but no attachment-compression plugin is used',\n  // plugins\n  PL1: 'Given plugin is not RxDB plugin.',\n  // removed in 14.0.0 - PouchDB RxStorage was removed - PL2: 'You tried importing a RxDB plugin to pouchdb. Use addRxPlugin() instead.',\n  PL3: 'A plugin with the same name was already added but it was not the exact same JavaScript object',\n  // pouch-db.js\n  // removed in 12.0.0 - P1: 'PouchDB.getBatch: limit must be > 2',\n  P2: 'bulkWrite() cannot be called with an empty array',\n  // removed in 12.0.0 - P3: 'bulkAddRevisions cannot be called with an empty array',\n\n  // rx-query\n  QU1: 'RxQuery._execOverDatabase(): op not known',\n  // removed in 9.0.0 - QU2: 'limit() must get a number',\n  // removed in 9.0.0 - QU3: 'skip() must get a number',\n  QU4: 'RxQuery.regex(): You cannot use .regex() on the primary field',\n  QU5: 'RxQuery.sort(): does not work because key is not defined in the schema',\n  QU6: 'RxQuery.limit(): cannot be called on .findOne()',\n  // removed in 12.0.0 (should by ensured by the typings) - QU7: 'query must be an object',\n  // removed in 12.0.0 (should by ensured by the typings) - QU8: 'query cannot be an array',\n  QU9: 'throwIfMissing can only be used in findOne queries',\n  QU10: 'result empty and throwIfMissing: true',\n  QU11: 'RxQuery: no valid query params given',\n  QU12: 'Given index is not in schema',\n  QU13: 'A top level field of the query is not included in the schema',\n  QU14: 'Running a count() query in slow mode is now allowed. Either run a count() query with a selector that fully matches an index ' + 'or set allowSlowCount=true when calling the createRxDatabase',\n  QU15: 'For count queries it is not allowed to use skip or limit',\n  QU16: '$regex queries must be defined by a string, not an RegExp instance. ' + 'This is because RegExp objects cannot be JSON stringified and also they are mutable which would be dangerous',\n  // mquery.js\n  MQ1: 'path must be a string or object',\n  MQ2: 'Invalid argument',\n  MQ3: 'Invalid sort() argument. Must be a string, object, or array',\n  MQ4: 'Invalid argument. Expected instanceof mquery or plain object',\n  MQ5: 'method must be used after where() when called with these arguments',\n  MQ6: 'Can\\'t mix sort syntaxes. Use either array or object | .sort([[\\'field\\', 1], [\\'test\\', -1]]) | .sort({ field: 1, test: -1 })',\n  MQ7: 'Invalid sort value',\n  MQ8: 'Can\\'t mix sort syntaxes. Use either array or object',\n  // rx-database\n  DB1: 'RxDocument.prepare(): another instance on this adapter has a different password',\n  DB2: 'RxDatabase.addCollections(): collection-names cannot start with underscore _',\n  DB3: 'RxDatabase.addCollections(): collection already exists. use myDatabase.[collectionName] to get it',\n  DB4: 'RxDatabase.addCollections(): schema is missing',\n  DB5: 'RxDatabase.addCollections(): collection-name not allowed',\n  DB6: 'RxDatabase.addCollections(): another instance created this collection with a different schema. Read this https://pubkey.github.io/rxdb/questions-answers.html#cant-change-the-schema',\n  // removed in 13.0.0 (now part of the encryption plugin) DB7: 'RxDatabase.addCollections(): schema encrypted but no password given',\n  DB8: 'RxDatabase.create(): A RxDatabase with the same name and adapter already exists.\\n' + 'Make sure to use this combination only once or set ignoreDuplicate to true if you do this intentional',\n  // removed in 14.0.0 - PouchDB RxStorage is removed - DB9: 'createRxDatabase(): Adapter not added. Use addPouchPlugin(require(\\'pouchdb-adapter-[adaptername]\\'));',\n  // removed in 14.0.0 - PouchDB RxStorage is removed DB10: 'createRxDatabase(): To use leveldown-adapters, you have to add the leveldb-plugin. Use addPouchPlugin(require(\\'pouchdb-adapter-leveldb\\'));',\n  DB11: 'createRxDatabase(): Invalid db-name, folder-paths must not have an ending slash',\n  DB12: 'RxDatabase.addCollections(): could not write to internal store',\n  DB13: 'createRxDatabase(): Invalid db-name or collection name, name contains the dollar sign',\n  // rx-collection\n  COL1: 'RxDocument.insert() You cannot insert an existing document',\n  COL2: 'RxCollection.insert() fieldName ._id can only be used as primaryKey',\n  COL3: 'RxCollection.upsert() does not work without primary',\n  COL4: 'RxCollection.incrementalUpsert() does not work without primary',\n  COL5: 'RxCollection.find() if you want to search by _id, use .findOne(_id)',\n  COL6: 'RxCollection.findOne() needs a queryObject or string',\n  COL7: 'hook must be a function',\n  COL8: 'hooks-when not known',\n  COL9: 'RxCollection.addHook() hook-name not known',\n  COL10: 'RxCollection .postCreate-hooks cannot be async',\n  COL11: 'migrationStrategies must be an object',\n  COL12: 'A migrationStrategy is missing or too much',\n  COL13: 'migrationStrategy must be a function',\n  COL14: 'given static method-name is not a string',\n  COL15: 'static method-names cannot start with underscore _',\n  COL16: 'given static method is not a function',\n  COL17: 'RxCollection.ORM: statics-name not allowed',\n  COL18: 'collection-method not allowed because fieldname is in the schema',\n  // removed in 14.0.0, use CONFLICT instead - COL19: 'Document update conflict. When changing a document you must work on the previous revision',\n  COL20: 'Storage write error',\n  CONFLICT: 'Document update conflict. When changing a document you must work on the previous revision',\n  // rx-document.js\n  DOC1: 'RxDocument.get$ cannot get observable of in-array fields because order cannot be guessed',\n  DOC2: 'cannot observe primary path',\n  DOC3: 'final fields cannot be observed',\n  DOC4: 'RxDocument.get$ cannot observe a non-existed field',\n  DOC5: 'RxDocument.populate() cannot populate a non-existed field',\n  DOC6: 'RxDocument.populate() cannot populate because path has no ref',\n  DOC7: 'RxDocument.populate() ref-collection not in database',\n  DOC8: 'RxDocument.set(): primary-key cannot be modified',\n  DOC9: 'final fields cannot be modified',\n  DOC10: 'RxDocument.set(): cannot set childpath when rootPath not selected',\n  DOC11: 'RxDocument.save(): can\\'t save deleted document',\n  // removed in 10.0.0 DOC12: 'RxDocument.save(): error',\n  DOC13: 'RxDocument.remove(): Document is already deleted',\n  DOC14: 'RxDocument.destroy() does not exist',\n  DOC15: 'query cannot be an array',\n  DOC16: 'Since version 8.0.0 RxDocument.set() can only be called on temporary RxDocuments',\n  DOC17: 'Since version 8.0.0 RxDocument.save() can only be called on non-temporary documents',\n  DOC18: 'Document property for composed primary key is missing',\n  DOC19: 'Value of primary key(s) cannot be changed',\n  DOC20: 'PrimaryKey missing',\n  DOC21: 'PrimaryKey must be equal to PrimaryKey.trim(). It cannot start or end with a whitespace',\n  DOC22: 'PrimaryKey must not contain a linebreak',\n  DOC23: 'PrimaryKey must not contain a double-quote [\"]',\n  DOC24: 'Given document data could not be structured cloned. This happens if you pass non-plain-json data into it, like a Date() or a Function. ' + 'In vue.js this happens if you use ref() on the document data which transforms it into a Proxy object.',\n  // data-migrator.js\n  DM1: 'migrate() Migration has already run',\n  DM2: 'migration of document failed final document does not match final schema',\n  DM3: 'migration already running',\n  DM4: 'Migration errored',\n  DM5: 'Cannot open database state with newer RxDB version. You have to migrate your database state first. See see https://rxdb.info/migration-storage.html',\n  // plugins/attachments.js\n  AT1: 'to use attachments, please define this in your schema',\n  // plugins/encryption-crypto-js.js\n  EN1: 'password is not valid',\n  EN2: 'validatePassword: min-length of password not complied',\n  EN3: 'Schema contains encrypted properties but no password is given',\n  EN4: 'Password not valid',\n  // plugins/json-dump.js\n  JD1: 'You must create the collections before you can import their data',\n  JD2: 'RxCollection.importJSON(): the imported json relies on a different schema',\n  JD3: 'RxCollection.importJSON(): json.passwordHash does not match the own',\n  // plugins/leader-election.js\n\n  // plugins/local-documents.js\n  LD1: 'RxDocument.allAttachments$ can\\'t use attachments on local documents',\n  LD2: 'RxDocument.get(): objPath must be a string',\n  LD3: 'RxDocument.get$ cannot get observable of in-array fields because order cannot be guessed',\n  LD4: 'cannot observe primary path',\n  LD5: 'RxDocument.set() id cannot be modified',\n  LD6: 'LocalDocument: Function is not usable on local documents',\n  LD7: 'Local document already exists',\n  LD8: 'localDocuments not activated. Set localDocuments=true on creation, when you want to store local documents on the RxDatabase or RxCollection.',\n  // plugins/replication.js\n  RC1: 'Replication: already added',\n  RC2: 'replicateCouchDB() query must be from the same RxCollection',\n  // removed in 14.0.0 - PouchDB RxStorage is removed RC3: 'RxCollection.syncCouchDB() Do not use a collection\\'s pouchdb as remote, use the collection instead',\n  RC4: 'RxCouchDBReplicationState.awaitInitialReplication() cannot await initial replication when live: true',\n  RC5: 'RxCouchDBReplicationState.awaitInitialReplication() cannot await initial replication if multiInstance because the replication might run on another instance',\n  RC6: 'syncFirestore() serverTimestampField MUST NOT be part of the collections schema and MUST NOT be nested.',\n  RC_PULL: 'RxReplication pull handler threw an error - see .errors for more details',\n  RC_STREAM: 'RxReplication pull stream$ threw an error - see .errors for more details',\n  RC_PUSH: 'RxReplication push handler threw an error - see .errors for more details',\n  RC_PUSH_NO_AR: 'RxReplication push handler did not return an array with the conflicts',\n  RC_WEBRTC_PEER: 'RxReplication WebRTC Peer has error',\n  RC_COUCHDB_1: 'replicateCouchDB() url must end with a slash like \\'https://example.com/mydatabase/\\'',\n  RC_COUCHDB_2: 'replicateCouchDB() did not get valid result with rows.',\n  // plugins/dev-mode/check-schema.js\n  SC1: 'fieldnames do not match the regex',\n  SC2: 'SchemaCheck: name \\'item\\' reserved for array-fields',\n  SC3: 'SchemaCheck: fieldname has a ref-array but items-type is not string',\n  SC4: 'SchemaCheck: fieldname has a ref but is not type string, [string,null] or array<string>',\n  SC6: 'SchemaCheck: primary can only be defined at top-level',\n  SC7: 'SchemaCheck: default-values can only be defined at top-level',\n  SC8: 'SchemaCheck: first level-fields cannot start with underscore _',\n  SC10: 'SchemaCheck: schema defines ._rev, this will be done automatically',\n  SC11: 'SchemaCheck: schema needs a number >=0 as version',\n  // removed in 10.0.0 - SC12: 'SchemaCheck: primary can only be defined once',\n  SC13: 'SchemaCheck: primary is always index, do not declare it as index',\n  SC14: 'SchemaCheck: primary is always unique, do not declare it as index',\n  SC15: 'SchemaCheck: primary cannot be encrypted',\n  SC16: 'SchemaCheck: primary must have type: string',\n  SC17: 'SchemaCheck: top-level fieldname is not allowed',\n  SC18: 'SchemaCheck: indexes must be an array',\n  SC19: 'SchemaCheck: indexes must contain strings or arrays of strings',\n  SC20: 'SchemaCheck: indexes.array must contain strings',\n  SC21: 'SchemaCheck: given index is not defined in schema',\n  SC22: 'SchemaCheck: given indexKey is not type:string',\n  SC23: 'SchemaCheck: fieldname is not allowed',\n  SC24: 'SchemaCheck: required fields must be set via array. See https://spacetelescope.github.io/understanding-json-schema/reference/object.html#required',\n  SC25: 'SchemaCheck: compoundIndexes needs to be specified in the indexes field',\n  SC26: 'SchemaCheck: indexes needs to be specified at collection schema level',\n  SC27: 'SchemaCheck: encrypted fields need to be specified at collection schema level',\n  SC28: 'SchemaCheck: encrypted fields is not defined in the schema',\n  SC29: 'SchemaCheck: missing object key \\'properties\\'',\n  SC30: 'SchemaCheck: primaryKey is required',\n  SC32: 'SchemaCheck: primary field must have the type string/number/integer',\n  SC33: 'SchemaCheck: used primary key is not a property in the schema',\n  SC34: 'Fields of type string that are used in an index, must have set the maxLength attribute in the schema',\n  SC35: 'Fields of type number/integer that are used in an index, must have set the multipleOf attribute in the schema',\n  SC36: 'A field of this type cannot be used as index',\n  SC37: 'Fields of type number that are used in an index, must have set the minimum and maximum attribute in the schema',\n  SC38: 'Fields of type boolean that are used in an index, must be required in the schema',\n  SC39: 'The primary key must have the maxLength attribute set',\n  SC40: '$ref fields in the schema are not allowed. RxDB cannot resolve related schemas because it would have a negative performance impact.' + 'It would have to run http requests on runtime. $ref fields should be resolved during build time.',\n  // plugins/dev-mode\n  // removed in 13.9.0, use PL3 instead - DEV1: 'dev-mode added multiple times',\n\n  // plugins/validate.js\n  VD1: 'Sub-schema not found, does the schemaPath exists in your schema?',\n  VD2: 'object does not match schema',\n  // plugins/in-memory.js\n  // removed in 14.0.0 - PouchDB RxStorage is removed IM1: 'InMemory: Memory-Adapter must be added. Use addPouchPlugin(require(\\'pouchdb-adapter-memory\\'));',\n  // removed in 14.0.0 - PouchDB RxStorage is removed IM2: 'inMemoryCollection.sync(): Do not replicate with the in-memory instance. Replicate with the parent instead',\n\n  // plugins/server.js\n  S1: 'You cannot create collections after calling RxDatabase.server()',\n  // plugins/replication-graphql.js\n  GQL1: 'GraphQL replication: cannot find sub schema by key',\n  // removed in 13.0.0, use RC_PULL instead - GQL2: 'GraphQL replication: unknown errors occurred in replication pull - see innerErrors for more details',\n  GQL3: 'GraphQL replication: pull returns more documents then batchSize',\n  // removed in 13.0.0, use RC_PUSH instead - GQL4: 'GraphQL replication: unknown errors occurred in replication push - see innerErrors for more details',\n\n  // plugins/crdt/\n  CRDT1: 'CRDT operations cannot be used because the crdt options are not set in the schema.',\n  CRDT2: 'RxDocument.incrementalModify() cannot be used when CRDTs are activated.',\n  CRDT3: 'To use CRDTs you MUST NOT set a conflictHandler because the default CRDT conflict handler must be used',\n  // plugins/storage-dexie/\n  DXE1: 'The dexie.js RxStorage does not support boolean indexes, see https://rxdb.info/rx-storage-dexie.html#boolean-index',\n  /**\n   * Should never be thrown, use this for\n   * null checks etc. so you do not have to increase the\n   * build size with error message strings.\n   */\n  SNH: 'This should never happen'\n};\n//# sourceMappingURL=error-messages.js.map","import { RxCollectionBase } from \"../../rx-collection.js\";\nimport { RxDatabaseBase } from \"../../rx-database.js\";\nimport { createRxDocumentConstructor, basePrototype } from \"../../rx-document.js\";\n\n/**\n * returns all possible properties of a RxCollection-instance\n */\nvar _rxCollectionProperties;\nexport function rxCollectionProperties() {\n  if (!_rxCollectionProperties) {\n    var pseudoInstance = new RxCollectionBase();\n    var ownProperties = Object.getOwnPropertyNames(pseudoInstance);\n    var prototypeProperties = Object.getOwnPropertyNames(Object.getPrototypeOf(pseudoInstance));\n    _rxCollectionProperties = [...ownProperties, ...prototypeProperties];\n  }\n  return _rxCollectionProperties;\n}\n\n/**\n * returns all possible properties of a RxDatabase-instance\n */\nvar _rxDatabaseProperties;\nexport function rxDatabaseProperties() {\n  if (!_rxDatabaseProperties) {\n    var pseudoInstance = new RxDatabaseBase('pseudoInstance', 'memory');\n    var ownProperties = Object.getOwnPropertyNames(pseudoInstance);\n    var prototypeProperties = Object.getOwnPropertyNames(Object.getPrototypeOf(pseudoInstance));\n    _rxDatabaseProperties = [...ownProperties, ...prototypeProperties];\n    pseudoInstance.destroy();\n  }\n  return _rxDatabaseProperties;\n}\n\n/**\n * returns all possible properties of a RxDocument\n */\nvar pseudoConstructor = createRxDocumentConstructor(basePrototype);\nvar pseudoRxDocument = new pseudoConstructor();\nvar _rxDocumentProperties;\nexport function rxDocumentProperties() {\n  if (!_rxDocumentProperties) {\n    var reserved = ['deleted', 'synced'];\n    var ownProperties = Object.getOwnPropertyNames(pseudoRxDocument);\n    var prototypeProperties = Object.getOwnPropertyNames(basePrototype);\n    _rxDocumentProperties = [...ownProperties, ...prototypeProperties, ...reserved];\n  }\n  return _rxDocumentProperties;\n}\n//# sourceMappingURL=entity-properties.js.map","/**\n * does additional checks over the schema-json\n * to ensure nothing is broken or not supported\n */\nimport { newRxError } from \"../../rx-error.js\";\nimport { getPrimaryFieldOfPrimaryKey, getSchemaByObjectPath } from \"../../rx-schema-helper.js\";\nimport { appendToArray, flattenObject, getProperty, isMaybeReadonlyArray, trimDots } from \"../../plugins/utils/index.js\";\nimport { rxDocumentProperties } from \"./entity-properties.js\";\n\n/**\n * checks if the fieldname is allowed\n * this makes sure that the fieldnames can be transformed into javascript-vars\n * and does not conquer the observe$ and populate_ fields\n * @throws {Error}\n */\nexport function checkFieldNameRegex(fieldName) {\n  if (fieldName === '_deleted') {\n    return;\n  }\n  if (['properties'].includes(fieldName)) {\n    throw newRxError('SC23', {\n      fieldName\n    });\n  }\n  var regexStr = '^[a-zA-Z](?:[[a-zA-Z0-9_]*]?[a-zA-Z0-9])?$';\n  var regex = new RegExp(regexStr);\n  if (\n  /**\n   * It must be allowed to set _id as primaryKey.\n   * This makes it sometimes easier to work with RxDB+CouchDB\n   * @link https://github.com/pubkey/rxdb/issues/681\n   */\n  fieldName !== '_id' && !fieldName.match(regex)) {\n    throw newRxError('SC1', {\n      regex: regexStr,\n      fieldName\n    });\n  }\n}\n\n/**\n * validate that all schema-related things are ok\n */\nexport function validateFieldsDeep(rxJsonSchema) {\n  var primaryPath = getPrimaryFieldOfPrimaryKey(rxJsonSchema.primaryKey);\n  function checkField(fieldName, schemaObj, path) {\n    if (typeof fieldName === 'string' && typeof schemaObj === 'object' && !Array.isArray(schemaObj) && path.split('.').pop() !== 'patternProperties') checkFieldNameRegex(fieldName);\n\n    // 'item' only allowed it type=='array'\n    if (schemaObj.hasOwnProperty('item') && schemaObj.type !== 'array') {\n      throw newRxError('SC2', {\n        fieldName\n      });\n    }\n\n    /**\n     * required fields cannot be set via 'required: true',\n     * but must be set via required: []\n     */\n    if (schemaObj.hasOwnProperty('required') && typeof schemaObj.required === 'boolean') {\n      throw newRxError('SC24', {\n        fieldName\n      });\n    }\n\n    // $ref is not allowed\n    if (schemaObj.hasOwnProperty('$ref')) {\n      throw newRxError('SC40', {\n        fieldName\n      });\n    }\n\n    // if ref given, must be type=='string', type=='array' with string-items or type==['string','null']\n    if (schemaObj.hasOwnProperty('ref')) {\n      if (Array.isArray(schemaObj.type)) {\n        if (schemaObj.type.length > 2 || !schemaObj.type.includes('string') || !schemaObj.type.includes('null')) {\n          throw newRxError('SC4', {\n            fieldName\n          });\n        }\n      } else {\n        switch (schemaObj.type) {\n          case 'string':\n            break;\n          case 'array':\n            if (!schemaObj.items || !schemaObj.items.type || schemaObj.items.type !== 'string') {\n              throw newRxError('SC3', {\n                fieldName\n              });\n            }\n            break;\n          default:\n            throw newRxError('SC4', {\n              fieldName\n            });\n        }\n      }\n    }\n    var isNested = path.split('.').length >= 2;\n\n    // nested only\n    if (isNested) {\n      if (schemaObj.primary) {\n        throw newRxError('SC6', {\n          path,\n          primary: schemaObj.primary\n        });\n      }\n      if (schemaObj.default) {\n        throw newRxError('SC7', {\n          path\n        });\n      }\n    }\n\n    // first level\n    if (!isNested) {\n      // if _id is used, it must be primaryKey\n      if (fieldName === '_id' && primaryPath !== '_id') {\n        throw newRxError('COL2', {\n          fieldName\n        });\n      }\n\n      // check underscore fields\n      if (fieldName.charAt(0) === '_') {\n        if (\n        // exceptional allow underscore on these fields.\n        fieldName === '_id' || fieldName === '_deleted') {\n          return;\n        }\n        throw newRxError('SC8', {\n          fieldName\n        });\n      }\n    }\n  }\n  function traverse(currentObj, currentPath) {\n    if (!currentObj || typeof currentObj !== 'object') {\n      return;\n    }\n    Object.keys(currentObj).forEach(attributeName => {\n      var schemaObj = currentObj[attributeName];\n      if (!currentObj.properties && schemaObj && typeof schemaObj === 'object' && !Array.isArray(currentObj)) {\n        checkField(attributeName, schemaObj, currentPath);\n      }\n      var nextPath = currentPath;\n      if (attributeName !== 'properties') nextPath = nextPath + '.' + attributeName;\n      traverse(schemaObj, nextPath);\n    });\n  }\n  traverse(rxJsonSchema, '');\n  return true;\n}\nexport function checkPrimaryKey(jsonSchema) {\n  if (!jsonSchema.primaryKey) {\n    throw newRxError('SC30', {\n      schema: jsonSchema\n    });\n  }\n  function validatePrimarySchemaPart(schemaPart) {\n    if (!schemaPart) {\n      throw newRxError('SC33', {\n        schema: jsonSchema\n      });\n    }\n    var type = schemaPart.type;\n    if (!type || !['string', 'number', 'integer'].includes(type)) {\n      throw newRxError('SC32', {\n        schema: jsonSchema,\n        args: {\n          schemaPart\n        }\n      });\n    }\n  }\n  if (typeof jsonSchema.primaryKey === 'string') {\n    var key = jsonSchema.primaryKey;\n    var schemaPart = jsonSchema.properties[key];\n    validatePrimarySchemaPart(schemaPart);\n  } else {\n    var compositePrimaryKey = jsonSchema.primaryKey;\n    var keySchemaPart = getSchemaByObjectPath(jsonSchema, compositePrimaryKey.key);\n    validatePrimarySchemaPart(keySchemaPart);\n    compositePrimaryKey.fields.forEach(field => {\n      var schemaPart = getSchemaByObjectPath(jsonSchema, field);\n      validatePrimarySchemaPart(schemaPart);\n    });\n  }\n\n  /**\n   * The primary key must have a maxLength set\n   * which is required by some RxStorage implementations\n   * to ensure we can craft custom index strings.\n   */\n  var primaryPath = getPrimaryFieldOfPrimaryKey(jsonSchema.primaryKey);\n  var primaryPathSchemaPart = jsonSchema.properties[primaryPath];\n  if (!primaryPathSchemaPart.maxLength) {\n    throw newRxError('SC39', {\n      schema: jsonSchema,\n      args: {\n        primaryPathSchemaPart\n      }\n    });\n  }\n}\n\n/**\n * computes real path of the object path in the collection schema\n */\nfunction getSchemaPropertyRealPath(shortPath) {\n  var pathParts = shortPath.split('.');\n  var realPath = '';\n  for (var i = 0; i < pathParts.length; i += 1) {\n    if (pathParts[i] !== '[]') {\n      realPath = realPath.concat('.properties.'.concat(pathParts[i]));\n    } else {\n      realPath = realPath.concat('.items');\n    }\n  }\n  return trimDots(realPath);\n}\n\n/**\n * does the checking\n * @throws {Error} if something is not ok\n */\nexport function checkSchema(jsonSchema) {\n  if (!jsonSchema.primaryKey) {\n    throw newRxError('SC30', {\n      schema: jsonSchema\n    });\n  }\n  if (!jsonSchema.hasOwnProperty('properties')) {\n    throw newRxError('SC29', {\n      schema: jsonSchema\n    });\n  }\n\n  // _rev MUST NOT exist, it is added by RxDB\n  if (jsonSchema.properties._rev) {\n    throw newRxError('SC10', {\n      schema: jsonSchema\n    });\n  }\n\n  // check version\n  if (!jsonSchema.hasOwnProperty('version') || typeof jsonSchema.version !== 'number' || jsonSchema.version < 0) {\n    throw newRxError('SC11', {\n      version: jsonSchema.version\n    });\n  }\n  validateFieldsDeep(jsonSchema);\n  checkPrimaryKey(jsonSchema);\n  Object.keys(jsonSchema.properties).forEach(key => {\n    var value = jsonSchema.properties[key];\n    // check primary\n    if (key === jsonSchema.primaryKey) {\n      if (jsonSchema.indexes && jsonSchema.indexes.includes(key)) {\n        throw newRxError('SC13', {\n          value,\n          schema: jsonSchema\n        });\n      }\n      if (value.unique) {\n        throw newRxError('SC14', {\n          value,\n          schema: jsonSchema\n        });\n      }\n      if (jsonSchema.encrypted && jsonSchema.encrypted.includes(key)) {\n        throw newRxError('SC15', {\n          value,\n          schema: jsonSchema\n        });\n      }\n      if (value.type !== 'string') {\n        throw newRxError('SC16', {\n          value,\n          schema: jsonSchema\n        });\n      }\n    }\n\n    // check if RxDocument-property\n    if (rxDocumentProperties().includes(key)) {\n      throw newRxError('SC17', {\n        key,\n        schema: jsonSchema\n      });\n    }\n  });\n\n  // check format of jsonSchema.indexes\n  if (jsonSchema.indexes) {\n    // should be an array\n    if (!isMaybeReadonlyArray(jsonSchema.indexes)) {\n      throw newRxError('SC18', {\n        indexes: jsonSchema.indexes,\n        schema: jsonSchema\n      });\n    }\n    jsonSchema.indexes.forEach(index => {\n      // should contain strings or array of strings\n      if (!(typeof index === 'string' || Array.isArray(index))) {\n        throw newRxError('SC19', {\n          index,\n          schema: jsonSchema\n        });\n      }\n      // if is a compound index it must contain strings\n      if (Array.isArray(index)) {\n        for (var i = 0; i < index.length; i += 1) {\n          if (typeof index[i] !== 'string') {\n            throw newRxError('SC20', {\n              index,\n              schema: jsonSchema\n            });\n          }\n        }\n      }\n\n      /**\n       * To be able to craft custom indexable string with compound fields,\n       * we need to know the maximum fieldlength of the fields values\n       * when they are transformed to strings.\n       * Therefore we need to enforce some properties inside of the schema.\n       */\n      var indexAsArray = isMaybeReadonlyArray(index) ? index : [index];\n      indexAsArray.forEach(fieldName => {\n        var schemaPart = getSchemaByObjectPath(jsonSchema, fieldName);\n        var type = schemaPart.type;\n        switch (type) {\n          case 'string':\n            var maxLength = schemaPart.maxLength;\n            if (!maxLength) {\n              throw newRxError('SC34', {\n                index,\n                field: fieldName,\n                schema: jsonSchema\n              });\n            }\n            break;\n          case 'number':\n          case 'integer':\n            var multipleOf = schemaPart.multipleOf;\n            if (!multipleOf) {\n              throw newRxError('SC35', {\n                index,\n                field: fieldName,\n                schema: jsonSchema\n              });\n            }\n            var maximum = schemaPart.maximum;\n            var minimum = schemaPart.minimum;\n            if (typeof maximum === 'undefined' || typeof minimum === 'undefined') {\n              throw newRxError('SC37', {\n                index,\n                field: fieldName,\n                schema: jsonSchema\n              });\n            }\n            break;\n          case 'boolean':\n            /**\n             * If a boolean field is used as an index,\n             * it must be required.\n             */\n            var parentPath = '';\n            var lastPathPart = fieldName;\n            if (fieldName.includes('.')) {\n              var partParts = fieldName.split('.');\n              lastPathPart = partParts.pop();\n              parentPath = partParts.join('.');\n            }\n            var parentSchemaPart = parentPath === '' ? jsonSchema : getSchemaByObjectPath(jsonSchema, parentPath);\n            if (!parentSchemaPart.required || !parentSchemaPart.required.includes(lastPathPart)) {\n              throw newRxError('SC38', {\n                index,\n                field: fieldName,\n                schema: jsonSchema\n              });\n            }\n            break;\n          default:\n            throw newRxError('SC36', {\n              fieldName,\n              type: schemaPart.type,\n              schema: jsonSchema\n            });\n        }\n      });\n    });\n  }\n\n  // remove backward-compatibility for index: true\n  Object.keys(flattenObject(jsonSchema)).map(key => {\n    // flattenObject returns only ending paths, we need all paths pointing to an object\n    var split = key.split('.');\n    split.pop(); // all but last\n    return split.join('.');\n  }).filter(key => key !== '').filter((elem, pos, arr) => arr.indexOf(elem) === pos) // unique\n  .filter(key => {\n    // check if this path defines an index\n    var value = getProperty(jsonSchema, key);\n    return value && !!value.index;\n  }).forEach(key => {\n    // replace inner properties\n    key = key.replace('properties.', ''); // first\n    key = key.replace(/\\.properties\\./g, '.'); // middle\n    throw newRxError('SC26', {\n      index: trimDots(key),\n      schema: jsonSchema\n    });\n  });\n\n  /* check types of the indexes */\n  (jsonSchema.indexes || []).reduce((indexPaths, currentIndex) => {\n    if (isMaybeReadonlyArray(currentIndex)) {\n      appendToArray(indexPaths, currentIndex);\n    } else {\n      indexPaths.push(currentIndex);\n    }\n    return indexPaths;\n  }, []).filter((elem, pos, arr) => arr.indexOf(elem) === pos) // from now on working only with unique indexes\n  .map(indexPath => {\n    var realPath = getSchemaPropertyRealPath(indexPath); // real path in the collection schema\n    var schemaObj = getProperty(jsonSchema, realPath); // get the schema of the indexed property\n    if (!schemaObj || typeof schemaObj !== 'object') {\n      throw newRxError('SC21', {\n        index: indexPath,\n        schema: jsonSchema\n      });\n    }\n    return {\n      indexPath,\n      schemaObj\n    };\n  }).filter(index => index.schemaObj.type !== 'string' && index.schemaObj.type !== 'integer' && index.schemaObj.type !== 'number' && index.schemaObj.type !== 'boolean').forEach(index => {\n    throw newRxError('SC22', {\n      key: index.indexPath,\n      type: index.schemaObj.type,\n      schema: jsonSchema\n    });\n  });\n\n  /**\n   * TODO\n   * in 9.0.0 we changed the way encrypted fields are defined\n   * This check ensures people do not oversee the breaking change\n   * Remove this check in the future\n   */\n  Object.keys(flattenObject(jsonSchema)).map(key => {\n    // flattenObject returns only ending paths, we need all paths pointing to an object\n    var split = key.split('.');\n    split.pop(); // all but last\n    return split.join('.');\n  }).filter(key => key !== '' && key !== 'attachments').filter((elem, pos, arr) => arr.indexOf(elem) === pos) // unique\n  .filter(key => {\n    // check if this path defines an encrypted field\n    var value = getProperty(jsonSchema, key);\n    return value && !!value.encrypted;\n  }).forEach(key => {\n    // replace inner properties\n    key = key.replace('properties.', ''); // first\n    key = key.replace(/\\.properties\\./g, '.'); // middle\n    throw newRxError('SC27', {\n      index: trimDots(key),\n      schema: jsonSchema\n    });\n  });\n\n  /* ensure encrypted fields exist in the schema */\n  if (jsonSchema.encrypted) {\n    jsonSchema.encrypted.forEach(propPath => {\n      // real path in the collection schema\n      var realPath = getSchemaPropertyRealPath(propPath);\n      // get the schema of the indexed property\n      var schemaObj = getProperty(jsonSchema, realPath);\n      if (!schemaObj || typeof schemaObj !== 'object') {\n        throw newRxError('SC28', {\n          field: propPath,\n          schema: jsonSchema\n        });\n      }\n    });\n  }\n}\n//# sourceMappingURL=check-schema.js.map","import { newRxError, newRxTypeError } from \"../../rx-error.js\";\nimport { rxCollectionProperties, rxDocumentProperties } from \"./entity-properties.js\";\n\n/**\n * checks if the given static methods are allowed\n * @throws if not allowed\n */\nexport function checkOrmMethods(statics) {\n  if (!statics) {\n    return;\n  }\n  Object.entries(statics).forEach(([k, v]) => {\n    if (typeof k !== 'string') {\n      throw newRxTypeError('COL14', {\n        name: k\n      });\n    }\n    if (k.startsWith('_')) {\n      throw newRxTypeError('COL15', {\n        name: k\n      });\n    }\n    if (typeof v !== 'function') {\n      throw newRxTypeError('COL16', {\n        name: k,\n        type: typeof k\n      });\n    }\n    if (rxCollectionProperties().includes(k) || rxDocumentProperties().includes(k)) {\n      throw newRxError('COL17', {\n        name: k\n      });\n    }\n  });\n}\nexport function checkOrmDocumentMethods(schema, methods) {\n  var topLevelFields = Object.keys(schema.properties);\n  if (!methods) {\n    return;\n  }\n  Object.keys(methods).filter(funName => topLevelFields.includes(funName)).forEach(funName => {\n    throw newRxError('COL18', {\n      funName\n    });\n  });\n}\n//# sourceMappingURL=check-orm.js.map","import { newRxError, newRxTypeError } from \"../../rx-error.js\";\nimport { rxDatabaseProperties } from \"./entity-properties.js\";\nimport { isFolderPath } from \"../../plugins/utils/index.js\";\n\n/**\n * if the name of a collection\n * clashes with a property of RxDatabase,\n * we get problems so this function prohibits this\n */\nexport function ensureCollectionNameValid(args) {\n  if (rxDatabaseProperties().includes(args.name)) {\n    throw newRxError('DB5', {\n      name: args.name\n    });\n  }\n  validateDatabaseName(args.name);\n}\nexport function ensureDatabaseNameIsValid(args) {\n  validateDatabaseName(args.name);\n  if (args.name.includes('$')) {\n    throw newRxError('DB13', {\n      name: args.name\n    });\n  }\n\n  /**\n   * The server-plugin has problems when a path with and ending slash is given\n   * So we do not allow this.\n   * @link https://github.com/pubkey/rxdb/issues/2251\n   */\n  if (isFolderPath(args.name)) {\n    if (args.name.endsWith('/') || args.name.endsWith('\\\\')) {\n      throw newRxError('DB11', {\n        name: args.name\n      });\n    }\n  }\n}\nvar validCouchDBStringRegexStr = '^[a-z][_$a-z0-9\\\\-]*$';\nvar validCouchDBStringRegex = new RegExp(validCouchDBStringRegexStr);\n\n/**\n * Validates that a given string is ok to be used with couchdb-collection-names.\n * We only allow these strings as database- or collection names because it ensures\n * that you later do not get in trouble when you want to use the database together witch couchdb.\n *\n * @link https://docs.couchdb.org/en/stable/api/database/common.html\n * @link https://neighbourhood.ie/blog/2020/10/13/everything-you-need-to-know-about-couchdb-database-names/\n * @throws  {RxError}\n */\nexport function validateDatabaseName(name) {\n  if (typeof name !== 'string' || name.length === 0) {\n    throw newRxTypeError('UT1', {\n      name\n    });\n  }\n\n  // do not check, if foldername is given\n  if (isFolderPath(name)) {\n    return true;\n  }\n  if (!name.match(validCouchDBStringRegex) &&\n  /**\n   * The string ':memory:' is used in the SQLite RxStorage\n   * to persist data into a memory state. Often used in tests.\n   */\n  name !== ':memory:') {\n    throw newRxError('UT2', {\n      regex: validCouchDBStringRegexStr,\n      givenName: name\n    });\n  }\n  return true;\n}\n//# sourceMappingURL=unallowed-properties.js.map","import { newRxError, newRxTypeError } from \"../../rx-error.js\";\nimport { RxStorageDexieStatics } from \"../storage-dexie/index.js\";\nimport { deepEqual } from \"../utils/index.js\";\n\n/**\n * accidentally passing a non-valid object into the query params\n * is very hard to debug especially when queries are observed\n * This is why we do some checks here in dev-mode\n */\nexport function checkQuery(args) {\n  var isPlainObject = Object.prototype.toString.call(args.queryObj) === '[object Object]';\n  if (!isPlainObject) {\n    throw newRxTypeError('QU11', {\n      op: args.op,\n      collection: args.collection.name,\n      queryObj: args.queryObj\n    });\n  }\n  var validKeys = ['selector', 'limit', 'skip', 'sort', 'index'];\n  Object.keys(args.queryObj).forEach(key => {\n    if (!validKeys.includes(key)) {\n      throw newRxTypeError('QU11', {\n        op: args.op,\n        collection: args.collection.name,\n        queryObj: args.queryObj,\n        key,\n        args: {\n          validKeys\n        }\n      });\n    }\n  });\n\n  // do not allow skip or limit for count queries\n  if (args.op === 'count' && (args.queryObj.limit || args.queryObj.skip)) {\n    throw newRxError('QU15', {\n      collection: args.collection.name,\n      query: args.queryObj\n    });\n  }\n  ensureObjectDoesNotContainRegExp(args.queryObj);\n}\nexport function checkMangoQuery(args) {\n  var schema = args.rxQuery.collection.schema.jsonSchema;\n\n  /**\n   * Ensure that all top level fields are included in the schema.\n   * TODO this check can be augmented to also check sub-fields.\n   */\n  var massagedSelector = args.mangoQuery.selector;\n  var schemaTopLevelFields = Object.keys(schema.properties);\n  Object.keys(massagedSelector)\n  // do not check operators\n  .filter(fieldOrOperator => !fieldOrOperator.startsWith('$'))\n  // skip this check on non-top-level fields\n  .filter(field => !field.includes('.')).forEach(field => {\n    if (!schemaTopLevelFields.includes(field)) {\n      throw newRxError('QU13', {\n        schema,\n        field,\n        query: args.mangoQuery\n      });\n    }\n  });\n\n  /**\n   * ensure if custom index is set,\n   * it is also defined in the schema\n   */\n  var schemaIndexes = schema.indexes ? schema.indexes : [];\n  var index = args.mangoQuery.index;\n  if (index) {\n    var isInSchema = schemaIndexes.find(schemaIndex => deepEqual(schemaIndex, index));\n    if (!isInSchema) {\n      throw newRxError('QU12', {\n        collection: args.rxQuery.collection.name,\n        query: args.mangoQuery,\n        schema\n      });\n    }\n  }\n\n  /**\n   * Ensure that a count() query can only be used\n   * with selectors that are fully satisfied by the used index.\n   */\n  if (args.rxQuery.op === 'count') {\n    if (!areSelectorsSatisfiedByIndex(args.rxQuery.collection.schema.jsonSchema, args.mangoQuery) && !args.rxQuery.collection.database.allowSlowCount) {\n      throw newRxError('QU14', {\n        collection: args.rxQuery.collection,\n        query: args.mangoQuery\n      });\n    }\n  }\n\n  /**\n   * Ensure that sort only runs on known fields\n   * TODO also check nested fields\n   */\n  if (args.mangoQuery.sort) {\n    args.mangoQuery.sort.map(sortPart => Object.keys(sortPart)[0]).filter(field => !field.includes('.')).forEach(field => {\n      if (!schemaTopLevelFields.includes(field)) {\n        throw newRxError('QU13', {\n          schema,\n          field,\n          query: args.mangoQuery\n        });\n      }\n    });\n  }\n\n  // Do not allow RexExp instances\n  ensureObjectDoesNotContainRegExp(args.mangoQuery);\n}\nexport function areSelectorsSatisfiedByIndex(schema, query) {\n  var preparedQuery = RxStorageDexieStatics.prepareQuery(schema, query);\n  return preparedQuery.queryPlan.selectorSatisfiedByIndex;\n}\n\n/**\n * Ensures that the selector does not contain any RegExp instance.\n * @recursive\n */\nexport function ensureObjectDoesNotContainRegExp(selector) {\n  if (typeof selector !== 'object' || selector === null) {\n    return;\n  }\n  var keys = Object.keys(selector);\n  keys.forEach(key => {\n    var value = selector[key];\n    if (value instanceof RegExp) {\n      throw newRxError('QU16', {\n        field: key,\n        query: selector\n      });\n    } else if (Array.isArray(value)) {\n      value.forEach(item => ensureObjectDoesNotContainRegExp(item));\n    } else {\n      ensureObjectDoesNotContainRegExp(value);\n    }\n  });\n}\n//# sourceMappingURL=check-query.js.map","import { ERROR_MESSAGES } from \"./error-messages.js\";\nimport { checkSchema } from \"./check-schema.js\";\nimport { checkOrmDocumentMethods, checkOrmMethods } from \"./check-orm.js\";\nimport { checkMigrationStrategies } from \"./check-migration-strategies.js\";\nimport { ensureCollectionNameValid, ensureDatabaseNameIsValid } from \"./unallowed-properties.js\";\nimport { checkMangoQuery, checkQuery } from \"./check-query.js\";\nimport { newRxError } from \"../../rx-error.js\";\nimport { deepFreeze } from \"../../plugins/utils/index.js\";\nimport { ensurePrimaryKeyValid } from \"./check-document.js\";\nexport * from \"./check-schema.js\";\nexport * from \"./unallowed-properties.js\";\nexport * from \"./check-query.js\";\n\n/**\n * Deep freezes and object when in dev-mode.\n * Deep-Freezing has the same performance as deep-cloning, so we only do that in dev-mode.\n * Also we can ensure the readonly state via typescript\n * @link https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\n */\nexport function deepFreezeWhenDevMode(obj) {\n  // direct return if not suitable for deepFreeze()\n  if (!obj || typeof obj === 'string' || typeof obj === 'number') {\n    return obj;\n  }\n  return deepFreeze(obj);\n}\nexport var DEV_MODE_PLUGIN_NAME = 'dev-mode';\nexport var RxDBDevModePlugin = {\n  name: DEV_MODE_PLUGIN_NAME,\n  rxdb: true,\n  init: () => {\n    console.warn(['-------------- RxDB dev-mode warning -------------------------------', 'you are seeing this because you use the RxDB dev-mode plugin https://rxdb.info/dev-mode.html ', 'This is great in development mode, because it will run many checks to ensure', 'that you use RxDB correct. If you see this in production mode,', 'you did something wrong because the dev-mode plugin will decrease the performance.', '', '🤗 Hint: To get the most out of RxDB, check out the Premium Plugins', 'to get access to faster storages and more professional features: https://rxdb.info/premium',\n    // '',\n    // 'Also take part in the RxDB User Survey: https://rxdb.info/survey.html',\n    '---------------------------------------------------------------------'].join('\\n'));\n  },\n  overwritable: {\n    isDevMode() {\n      return true;\n    },\n    deepFreezeWhenDevMode,\n    tunnelErrorMessage(code) {\n      if (!ERROR_MESSAGES[code]) {\n        console.error('RxDB: Error-Code not known: ' + code);\n        throw new Error('Error-Code ' + code + ' not known, contact the maintainer');\n      }\n      return ERROR_MESSAGES[code];\n    }\n  },\n  hooks: {\n    preCreateRxSchema: {\n      after: checkSchema\n    },\n    preCreateRxDatabase: {\n      after: function (args) {\n        ensureDatabaseNameIsValid(args);\n      }\n    },\n    preCreateRxCollection: {\n      after: function (args) {\n        ensureCollectionNameValid(args);\n        checkOrmDocumentMethods(args.schema, args.methods);\n        if (args.name.charAt(0) === '_') {\n          throw newRxError('DB2', {\n            name: args.name\n          });\n        }\n        if (!args.schema) {\n          throw newRxError('DB4', {\n            name: args.name,\n            args\n          });\n        }\n      }\n    },\n    createRxDocument: {\n      before: function (doc) {\n        ensurePrimaryKeyValid(doc.primary, doc.toJSON(true));\n      }\n    },\n    preCreateRxQuery: {\n      after: function (args) {\n        checkQuery(args);\n      }\n    },\n    prePrepareQuery: {\n      after: args => {\n        checkMangoQuery(args);\n      }\n    },\n    createRxCollection: {\n      after: args => {\n        // check ORM-methods\n        checkOrmMethods(args.creator.statics);\n        checkOrmMethods(args.creator.methods);\n        checkOrmMethods(args.creator.attachments);\n\n        // check migration strategies\n        if (args.creator.schema && args.creator.migrationStrategies) {\n          checkMigrationStrategies(args.creator.schema, args.creator.migrationStrategies);\n        }\n      }\n    }\n  }\n};\n//# sourceMappingURL=index.js.map","import { newRxError } from \"../../rx-error.js\";\nexport function ensurePrimaryKeyValid(primaryKey, docData) {\n  if (!primaryKey) {\n    throw newRxError('DOC20', {\n      primaryKey,\n      document: docData\n    });\n  }\n\n  /**\n   * This is required so that we can left-pad\n   * the primaryKey and we are still able to de-left-pad\n   * it to get again the original key.\n   */\n  if (primaryKey !== primaryKey.trim()) {\n    throw newRxError('DOC21', {\n      primaryKey,\n      document: docData\n    });\n  }\n  if (primaryKey.includes('\\r') || primaryKey.includes('\\n')) {\n    throw newRxError('DOC22', {\n      primaryKey,\n      document: docData\n    });\n  }\n  if (primaryKey.includes('\"')) {\n    throw newRxError('DOC23', {\n      primaryKey,\n      document: docData\n    });\n  }\n}\n//# sourceMappingURL=check-document.js.map","import { newRxTypeError, newRxError } from \"../../rx-error.js\";\nimport { getPreviousVersions } from \"../../rx-schema.js\";\n\n/**\n * checks if the migrationStrategies are ok, throws if not\n * @throws {Error|TypeError} if not ok\n */\nexport function checkMigrationStrategies(schema, migrationStrategies) {\n  // migrationStrategies must be object not array\n  if (typeof migrationStrategies !== 'object' || Array.isArray(migrationStrategies)) {\n    throw newRxTypeError('COL11', {\n      schema\n    });\n  }\n  var previousVersions = getPreviousVersions(schema);\n\n  // for every previousVersion there must be strategy\n  if (previousVersions.length !== Object.keys(migrationStrategies).length) {\n    throw newRxError('COL12', {\n      have: Object.keys(migrationStrategies),\n      should: previousVersions\n    });\n  }\n\n  // every strategy must have number as property and be a function\n  previousVersions.map(vNr => ({\n    v: vNr,\n    s: migrationStrategies[vNr + 1]\n  })).filter(strategy => typeof strategy.s !== 'function').forEach(strategy => {\n    throw newRxTypeError('COL13', {\n      version: strategy.v,\n      type: typeof strategy,\n      schema\n    });\n  });\n  return true;\n}\n//# sourceMappingURL=check-migration-strategies.js.map"],"names":["_rxCollectionProperties","_rxDatabaseProperties","ERROR_MESSAGES","UT1","UT2","UT3","UT4","UT5","UT6","UT7","PL1","PL3","P2","QU1","QU4","QU5","QU6","QU9","QU10","QU11","QU12","QU13","QU14","QU15","QU16","MQ1","MQ2","MQ3","MQ4","MQ5","MQ6","MQ7","MQ8","DB1","DB2","DB3","DB4","DB5","DB6","DB8","DB11","DB12","DB13","COL1","COL2","COL3","COL4","COL5","COL6","COL7","COL8","COL9","COL10","COL11","COL12","COL13","COL14","COL15","COL16","COL17","COL18","COL20","CONFLICT","DOC1","DOC2","DOC3","DOC4","DOC5","DOC6","DOC7","DOC8","DOC9","DOC10","DOC11","DOC13","DOC14","DOC15","DOC16","DOC17","DOC18","DOC19","DOC20","DOC21","DOC22","DOC23","DOC24","DM1","DM2","DM3","DM4","DM5","AT1","EN1","EN2","EN3","EN4","JD1","JD2","JD3","LD1","LD2","LD3","LD4","LD5","LD6","LD7","LD8","RC1","RC2","RC4","RC5","RC6","RC_PULL","RC_STREAM","RC_PUSH","RC_PUSH_NO_AR","RC_WEBRTC_PEER","RC_COUCHDB_1","RC_COUCHDB_2","SC1","SC2","SC3","SC4","SC6","SC7","SC8","SC10","SC11","SC13","SC14","SC15","SC16","SC17","SC18","SC19","SC20","SC21","SC22","SC23","SC24","SC25","SC26","SC27","SC28","SC29","SC30","SC32","SC33","SC34","SC35","SC36","SC37","SC38","SC39","SC40","VD1","VD2","S1","GQL1","GQL3","CRDT1","CRDT2","CRDT3","DXE1","SNH","_rxDocumentProperties","pseudoRxDocument","rxDocumentProperties","ownProperties","Object","getOwnPropertyNames","prototypeProperties","checkFieldNameRegex","fieldName","includes","regexStr","regex","RegExp","match","validateFieldsDeep","rxJsonSchema","primaryPath","primaryKey","traverse","currentObj","currentPath","keys","forEach","attributeName","schemaObj","properties","Array","isArray","path","split","pop","hasOwnProperty","type","required","length","items","isNested","primary","default","charAt","checkField","nextPath","checkPrimaryKey","jsonSchema","schema","validatePrimarySchemaPart","schemaPart","args","key","compositePrimaryKey","fields","field","primaryPathSchemaPart","maxLength","getSchemaPropertyRealPath","shortPath","pathParts","realPath","i","concat","checkSchema","_rev","version","value","indexes","unique","encrypted","index","multipleOf","maximum","minimum","parentPath","lastPathPart","partParts","join","parentSchemaPart","map","filter","elem","pos","arr","indexOf","replace","reduce","indexPaths","currentIndex","push","indexPath","propPath","checkOrmMethods","statics","entries","k","v","name","startsWith","pseudoInstance","getPrototypeOf","rxCollectionProperties","ensureCollectionNameValid","destroy","rxDatabaseProperties","validateDatabaseName","ensureDatabaseNameIsValid","endsWith","validCouchDBStringRegexStr","validCouchDBStringRegex","givenName","checkQuery","prototype","toString","call","queryObj","op","collection","validKeys","limit","skip","query","ensureObjectDoesNotContainRegExp","checkMangoQuery","rxQuery","massagedSelector","mangoQuery","selector","schemaTopLevelFields","fieldOrOperator","schemaIndexes","find","schemaIndex","areSelectorsSatisfiedByIndex","database","allowSlowCount","sort","sortPart","prepareQuery","queryPlan","selectorSatisfiedByIndex","item","deepFreezeWhenDevMode","obj","DEV_MODE_PLUGIN_NAME","RxDBDevModePlugin","rxdb","init","console","warn","overwritable","isDevMode","tunnelErrorMessage","code","error","Error","hooks","preCreateRxSchema","after","preCreateRxDatabase","preCreateRxCollection","methods","topLevelFields","funName","createRxDocument","before","doc","docData","document","trim","ensurePrimaryKeyValid","toJSON","preCreateRxQuery","prePrepareQuery","createRxCollection","creator","attachments","migrationStrategies","previousVersions","have","should","vNr","s","strategy","checkMigrationStrategies"],"sourceRoot":""}