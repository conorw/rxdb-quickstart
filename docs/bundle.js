/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={1581:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.MissingRefError=t.ValidationError=t.CodeGen=t.Name=t.nil=t.stringify=t.str=t._=t.KeywordCxt=void 0;const n=r(7159),i=r(3924),o=r(1240),s=r(98),a=["/properties"],c="http://json-schema.org/draft-07/schema";class u extends n.default{_addVocabularies(){super._addVocabularies(),i.default.forEach((e=>this.addVocabulary(e))),this.opts.discriminator&&this.addKeyword(o.default)}_addDefaultMetaSchema(){if(super._addDefaultMetaSchema(),!this.opts.meta)return;const e=this.opts.$data?this.$dataMetaSchema(s,a):s;this.addMetaSchema(e,c,!1),this.refs["http://json-schema.org/schema"]=c}defaultMeta(){return this.opts.defaultMeta=super.defaultMeta()||(this.getSchema(c)?c:void 0)}}e.exports=t=u,Object.defineProperty(t,"__esModule",{value:!0}),t.default=u;var l=r(4815);Object.defineProperty(t,"KeywordCxt",{enumerable:!0,get:function(){return l.KeywordCxt}});var h=r(3487);Object.defineProperty(t,"_",{enumerable:!0,get:function(){return h._}}),Object.defineProperty(t,"str",{enumerable:!0,get:function(){return h.str}}),Object.defineProperty(t,"stringify",{enumerable:!0,get:function(){return h.stringify}}),Object.defineProperty(t,"nil",{enumerable:!0,get:function(){return h.nil}}),Object.defineProperty(t,"Name",{enumerable:!0,get:function(){return h.Name}}),Object.defineProperty(t,"CodeGen",{enumerable:!0,get:function(){return h.CodeGen}});var d=r(7426);Object.defineProperty(t,"ValidationError",{enumerable:!0,get:function(){return d.default}});var f=r(6646);Object.defineProperty(t,"MissingRefError",{enumerable:!0,get:function(){return f.default}})},7023:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.regexpCode=t.getEsmExportName=t.getProperty=t.safeStringify=t.stringify=t.strConcat=t.addCodeArg=t.str=t._=t.nil=t._Code=t.Name=t.IDENTIFIER=t._CodeOrName=void 0;class r{}t._CodeOrName=r,t.IDENTIFIER=/^[a-z$_][a-z$_0-9]*$/i;class n extends r{constructor(e){if(super(),!t.IDENTIFIER.test(e))throw new Error("CodeGen: name must be a valid identifier");this.str=e}toString(){return this.str}emptyStr(){return!1}get names(){return{[this.str]:1}}}t.Name=n;class i extends r{constructor(e){super(),this._items="string"==typeof e?[e]:e}toString(){return this.str}emptyStr(){if(this._items.length>1)return!1;const e=this._items[0];return""===e||'""'===e}get str(){var e;return null!==(e=this._str)&&void 0!==e?e:this._str=this._items.reduce(((e,t)=>`${e}${t}`),"")}get names(){var e;return null!==(e=this._names)&&void 0!==e?e:this._names=this._items.reduce(((e,t)=>(t instanceof n&&(e[t.str]=(e[t.str]||0)+1),e)),{})}}function o(e,...t){const r=[e[0]];let n=0;for(;n<t.length;)c(r,t[n]),r.push(e[++n]);return new i(r)}t._Code=i,t.nil=new i(""),t._=o;const s=new i("+");function a(e,...t){const r=[l(e[0])];let n=0;for(;n<t.length;)r.push(s),c(r,t[n]),r.push(s,l(e[++n]));return function(e){let t=1;for(;t<e.length-1;){if(e[t]===s){const r=u(e[t-1],e[t+1]);if(void 0!==r){e.splice(t-1,3,r);continue}e[t++]="+"}t++}}(r),new i(r)}function c(e,t){var r;t instanceof i?e.push(...t._items):t instanceof n?e.push(t):e.push("number"==typeof(r=t)||"boolean"==typeof r||null===r?r:l(Array.isArray(r)?r.join(","):r))}function u(e,t){if('""'===t)return e;if('""'===e)return t;if("string"==typeof e){if(t instanceof n||'"'!==e[e.length-1])return;return"string"!=typeof t?`${e.slice(0,-1)}${t}"`:'"'===t[0]?e.slice(0,-1)+t.slice(1):void 0}return"string"!=typeof t||'"'!==t[0]||e instanceof n?void 0:`"${e}${t.slice(1)}`}function l(e){return JSON.stringify(e).replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")}t.str=a,t.addCodeArg=c,t.strConcat=function(e,t){return t.emptyStr()?e:e.emptyStr()?t:a`${e}${t}`},t.stringify=function(e){return new i(l(e))},t.safeStringify=l,t.getProperty=function(e){return"string"==typeof e&&t.IDENTIFIER.test(e)?new i(`.${e}`):o`[${e}]`},t.getEsmExportName=function(e){if("string"==typeof e&&t.IDENTIFIER.test(e))return new i(`${e}`);throw new Error(`CodeGen: invalid export name: ${e}, use explicit $id name mapping`)},t.regexpCode=function(e){return new i(e.toString())}},3487:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.or=t.and=t.not=t.CodeGen=t.operators=t.varKinds=t.ValueScopeName=t.ValueScope=t.Scope=t.Name=t.regexpCode=t.stringify=t.getProperty=t.nil=t.strConcat=t.str=t._=void 0;const n=r(7023),i=r(8490);var o=r(7023);Object.defineProperty(t,"_",{enumerable:!0,get:function(){return o._}}),Object.defineProperty(t,"str",{enumerable:!0,get:function(){return o.str}}),Object.defineProperty(t,"strConcat",{enumerable:!0,get:function(){return o.strConcat}}),Object.defineProperty(t,"nil",{enumerable:!0,get:function(){return o.nil}}),Object.defineProperty(t,"getProperty",{enumerable:!0,get:function(){return o.getProperty}}),Object.defineProperty(t,"stringify",{enumerable:!0,get:function(){return o.stringify}}),Object.defineProperty(t,"regexpCode",{enumerable:!0,get:function(){return o.regexpCode}}),Object.defineProperty(t,"Name",{enumerable:!0,get:function(){return o.Name}});var s=r(8490);Object.defineProperty(t,"Scope",{enumerable:!0,get:function(){return s.Scope}}),Object.defineProperty(t,"ValueScope",{enumerable:!0,get:function(){return s.ValueScope}}),Object.defineProperty(t,"ValueScopeName",{enumerable:!0,get:function(){return s.ValueScopeName}}),Object.defineProperty(t,"varKinds",{enumerable:!0,get:function(){return s.varKinds}}),t.operators={GT:new n._Code(">"),GTE:new n._Code(">="),LT:new n._Code("<"),LTE:new n._Code("<="),EQ:new n._Code("==="),NEQ:new n._Code("!=="),NOT:new n._Code("!"),OR:new n._Code("||"),AND:new n._Code("&&"),ADD:new n._Code("+")};class a{optimizeNodes(){return this}optimizeNames(e,t){return this}}class c extends a{constructor(e,t,r){super(),this.varKind=e,this.name=t,this.rhs=r}render({es5:e,_n:t}){const r=e?i.varKinds.var:this.varKind,n=void 0===this.rhs?"":` = ${this.rhs}`;return`${r} ${this.name}${n};`+t}optimizeNames(e,t){if(e[this.name.str])return this.rhs&&(this.rhs=D(this.rhs,e,t)),this}get names(){return this.rhs instanceof n._CodeOrName?this.rhs.names:{}}}class u extends a{constructor(e,t,r){super(),this.lhs=e,this.rhs=t,this.sideEffects=r}render({_n:e}){return`${this.lhs} = ${this.rhs};`+e}optimizeNames(e,t){if(!(this.lhs instanceof n.Name)||e[this.lhs.str]||this.sideEffects)return this.rhs=D(this.rhs,e,t),this}get names(){return $(this.lhs instanceof n.Name?{}:{...this.lhs.names},this.rhs)}}class l extends u{constructor(e,t,r,n){super(e,r,n),this.op=t}render({_n:e}){return`${this.lhs} ${this.op}= ${this.rhs};`+e}}class h extends a{constructor(e){super(),this.label=e,this.names={}}render({_n:e}){return`${this.label}:`+e}}class d extends a{constructor(e){super(),this.label=e,this.names={}}render({_n:e}){return`break${this.label?` ${this.label}`:""};`+e}}class f extends a{constructor(e){super(),this.error=e}render({_n:e}){return`throw ${this.error};`+e}get names(){return this.error.names}}class p extends a{constructor(e){super(),this.code=e}render({_n:e}){return`${this.code};`+e}optimizeNodes(){return`${this.code}`?this:void 0}optimizeNames(e,t){return this.code=D(this.code,e,t),this}get names(){return this.code instanceof n._CodeOrName?this.code.names:{}}}class m extends a{constructor(e=[]){super(),this.nodes=e}render(e){return this.nodes.reduce(((t,r)=>t+r.render(e)),"")}optimizeNodes(){const{nodes:e}=this;let t=e.length;for(;t--;){const r=e[t].optimizeNodes();Array.isArray(r)?e.splice(t,1,...r):r?e[t]=r:e.splice(t,1)}return e.length>0?this:void 0}optimizeNames(e,t){const{nodes:r}=this;let n=r.length;for(;n--;){const i=r[n];i.optimizeNames(e,t)||(I(e,i.names),r.splice(n,1))}return r.length>0?this:void 0}get names(){return this.nodes.reduce(((e,t)=>R(e,t.names)),{})}}class y extends m{render(e){return"{"+e._n+super.render(e)+"}"+e._n}}class v extends m{}class g extends y{}g.kind="else";class b extends y{constructor(e,t){super(t),this.condition=e}render(e){let t=`if(${this.condition})`+super.render(e);return this.else&&(t+="else "+this.else.render(e)),t}optimizeNodes(){super.optimizeNodes();const e=this.condition;if(!0===e)return this.nodes;let t=this.else;if(t){const e=t.optimizeNodes();t=this.else=Array.isArray(e)?new g(e):e}return t?!1===e?t instanceof b?t:t.nodes:this.nodes.length?this:new b(j(e),t instanceof b?[t]:t.nodes):!1!==e&&this.nodes.length?this:void 0}optimizeNames(e,t){var r;if(this.else=null===(r=this.else)||void 0===r?void 0:r.optimizeNames(e,t),super.optimizeNames(e,t)||this.else)return this.condition=D(this.condition,e,t),this}get names(){const e=super.names;return $(e,this.condition),this.else&&R(e,this.else.names),e}}b.kind="if";class w extends y{}w.kind="for";class _ extends w{constructor(e){super(),this.iteration=e}render(e){return`for(${this.iteration})`+super.render(e)}optimizeNames(e,t){if(super.optimizeNames(e,t))return this.iteration=D(this.iteration,e,t),this}get names(){return R(super.names,this.iteration.names)}}class E extends w{constructor(e,t,r,n){super(),this.varKind=e,this.name=t,this.from=r,this.to=n}render(e){const t=e.es5?i.varKinds.var:this.varKind,{name:r,from:n,to:o}=this;return`for(${t} ${r}=${n}; ${r}<${o}; ${r}++)`+super.render(e)}get names(){const e=$(super.names,this.from);return $(e,this.to)}}class S extends w{constructor(e,t,r,n){super(),this.loop=e,this.varKind=t,this.name=r,this.iterable=n}render(e){return`for(${this.varKind} ${this.name} ${this.loop} ${this.iterable})`+super.render(e)}optimizeNames(e,t){if(super.optimizeNames(e,t))return this.iterable=D(this.iterable,e,t),this}get names(){return R(super.names,this.iterable.names)}}class C extends y{constructor(e,t,r){super(),this.name=e,this.args=t,this.async=r}render(e){return`${this.async?"async ":""}function ${this.name}(${this.args})`+super.render(e)}}C.kind="func";class k extends m{render(e){return"return "+super.render(e)}}k.kind="return";class x extends y{render(e){let t="try"+super.render(e);return this.catch&&(t+=this.catch.render(e)),this.finally&&(t+=this.finally.render(e)),t}optimizeNodes(){var e,t;return super.optimizeNodes(),null===(e=this.catch)||void 0===e||e.optimizeNodes(),null===(t=this.finally)||void 0===t||t.optimizeNodes(),this}optimizeNames(e,t){var r,n;return super.optimizeNames(e,t),null===(r=this.catch)||void 0===r||r.optimizeNames(e,t),null===(n=this.finally)||void 0===n||n.optimizeNames(e,t),this}get names(){const e=super.names;return this.catch&&R(e,this.catch.names),this.finally&&R(e,this.finally.names),e}}class O extends y{constructor(e){super(),this.error=e}render(e){return`catch(${this.error})`+super.render(e)}}O.kind="catch";class P extends y{render(e){return"finally"+super.render(e)}}function R(e,t){for(const r in t)e[r]=(e[r]||0)+(t[r]||0);return e}function $(e,t){return t instanceof n._CodeOrName?R(e,t.names):e}function D(e,t,r){return e instanceof n.Name?o(e):(i=e)instanceof n._Code&&i._items.some((e=>e instanceof n.Name&&1===t[e.str]&&void 0!==r[e.str]))?new n._Code(e._items.reduce(((e,t)=>(t instanceof n.Name&&(t=o(t)),t instanceof n._Code?e.push(...t._items):e.push(t),e)),[])):e;var i;function o(e){const n=r[e.str];return void 0===n||1!==t[e.str]?e:(delete t[e.str],n)}}function I(e,t){for(const r in t)e[r]=(e[r]||0)-(t[r]||0)}function j(e){return"boolean"==typeof e||"number"==typeof e||null===e?!e:n._`!${M(e)}`}P.kind="finally",t.CodeGen=class{constructor(e,t={}){this._values={},this._blockStarts=[],this._constants={},this.opts={...t,_n:t.lines?"\n":""},this._extScope=e,this._scope=new i.Scope({parent:e}),this._nodes=[new v]}toString(){return this._root.render(this.opts)}name(e){return this._scope.name(e)}scopeName(e){return this._extScope.name(e)}scopeValue(e,t){const r=this._extScope.value(e,t);return(this._values[r.prefix]||(this._values[r.prefix]=new Set)).add(r),r}getScopeValue(e,t){return this._extScope.getValue(e,t)}scopeRefs(e){return this._extScope.scopeRefs(e,this._values)}scopeCode(){return this._extScope.scopeCode(this._values)}_def(e,t,r,n){const i=this._scope.toName(t);return void 0!==r&&n&&(this._constants[i.str]=r),this._leafNode(new c(e,i,r)),i}const(e,t,r){return this._def(i.varKinds.const,e,t,r)}let(e,t,r){return this._def(i.varKinds.let,e,t,r)}var(e,t,r){return this._def(i.varKinds.var,e,t,r)}assign(e,t,r){return this._leafNode(new u(e,t,r))}add(e,r){return this._leafNode(new l(e,t.operators.ADD,r))}code(e){return"function"==typeof e?e():e!==n.nil&&this._leafNode(new p(e)),this}object(...e){const t=["{"];for(const[r,i]of e)t.length>1&&t.push(","),t.push(r),(r!==i||this.opts.es5)&&(t.push(":"),(0,n.addCodeArg)(t,i));return t.push("}"),new n._Code(t)}if(e,t,r){if(this._blockNode(new b(e)),t&&r)this.code(t).else().code(r).endIf();else if(t)this.code(t).endIf();else if(r)throw new Error('CodeGen: "else" body without "then" body');return this}elseIf(e){return this._elseNode(new b(e))}else(){return this._elseNode(new g)}endIf(){return this._endBlockNode(b,g)}_for(e,t){return this._blockNode(e),t&&this.code(t).endFor(),this}for(e,t){return this._for(new _(e),t)}forRange(e,t,r,n,o=(this.opts.es5?i.varKinds.var:i.varKinds.let)){const s=this._scope.toName(e);return this._for(new E(o,s,t,r),(()=>n(s)))}forOf(e,t,r,o=i.varKinds.const){const s=this._scope.toName(e);if(this.opts.es5){const e=t instanceof n.Name?t:this.var("_arr",t);return this.forRange("_i",0,n._`${e}.length`,(t=>{this.var(s,n._`${e}[${t}]`),r(s)}))}return this._for(new S("of",o,s,t),(()=>r(s)))}forIn(e,t,r,o=(this.opts.es5?i.varKinds.var:i.varKinds.const)){if(this.opts.ownProperties)return this.forOf(e,n._`Object.keys(${t})`,r);const s=this._scope.toName(e);return this._for(new S("in",o,s,t),(()=>r(s)))}endFor(){return this._endBlockNode(w)}label(e){return this._leafNode(new h(e))}break(e){return this._leafNode(new d(e))}return(e){const t=new k;if(this._blockNode(t),this.code(e),1!==t.nodes.length)throw new Error('CodeGen: "return" should have one node');return this._endBlockNode(k)}try(e,t,r){if(!t&&!r)throw new Error('CodeGen: "try" without "catch" and "finally"');const n=new x;if(this._blockNode(n),this.code(e),t){const e=this.name("e");this._currNode=n.catch=new O(e),t(e)}return r&&(this._currNode=n.finally=new P,this.code(r)),this._endBlockNode(O,P)}throw(e){return this._leafNode(new f(e))}block(e,t){return this._blockStarts.push(this._nodes.length),e&&this.code(e).endBlock(t),this}endBlock(e){const t=this._blockStarts.pop();if(void 0===t)throw new Error("CodeGen: not in self-balancing block");const r=this._nodes.length-t;if(r<0||void 0!==e&&r!==e)throw new Error(`CodeGen: wrong number of nodes: ${r} vs ${e} expected`);return this._nodes.length=t,this}func(e,t=n.nil,r,i){return this._blockNode(new C(e,t,r)),i&&this.code(i).endFunc(),this}endFunc(){return this._endBlockNode(C)}optimize(e=1){for(;e-- >0;)this._root.optimizeNodes(),this._root.optimizeNames(this._root.names,this._constants)}_leafNode(e){return this._currNode.nodes.push(e),this}_blockNode(e){this._currNode.nodes.push(e),this._nodes.push(e)}_endBlockNode(e,t){const r=this._currNode;if(r instanceof e||t&&r instanceof t)return this._nodes.pop(),this;throw new Error(`CodeGen: not in block "${t?`${e.kind}/${t.kind}`:e.kind}"`)}_elseNode(e){const t=this._currNode;if(!(t instanceof b))throw new Error('CodeGen: "else" without "if"');return this._currNode=t.else=e,this}get _root(){return this._nodes[0]}get _currNode(){const e=this._nodes;return e[e.length-1]}set _currNode(e){const t=this._nodes;t[t.length-1]=e}},t.not=j;const T=N(t.operators.AND);t.and=function(...e){return e.reduce(T)};const A=N(t.operators.OR);function N(e){return(t,r)=>t===n.nil?r:r===n.nil?t:n._`${M(t)} ${e} ${M(r)}`}function M(e){return e instanceof n.Name?e:n._`(${e})`}t.or=function(...e){return e.reduce(A)}},8490:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ValueScope=t.ValueScopeName=t.Scope=t.varKinds=t.UsedValueState=void 0;const n=r(7023);class i extends Error{constructor(e){super(`CodeGen: "code" for ${e} not defined`),this.value=e.value}}var o;!function(e){e[e.Started=0]="Started",e[e.Completed=1]="Completed"}(o=t.UsedValueState||(t.UsedValueState={})),t.varKinds={const:new n.Name("const"),let:new n.Name("let"),var:new n.Name("var")};class s{constructor({prefixes:e,parent:t}={}){this._names={},this._prefixes=e,this._parent=t}toName(e){return e instanceof n.Name?e:this.name(e)}name(e){return new n.Name(this._newName(e))}_newName(e){return`${e}${(this._names[e]||this._nameGroup(e)).index++}`}_nameGroup(e){var t,r;if((null===(r=null===(t=this._parent)||void 0===t?void 0:t._prefixes)||void 0===r?void 0:r.has(e))||this._prefixes&&!this._prefixes.has(e))throw new Error(`CodeGen: prefix "${e}" is not allowed in this scope`);return this._names[e]={prefix:e,index:0}}}t.Scope=s;class a extends n.Name{constructor(e,t){super(t),this.prefix=e}setValue(e,{property:t,itemIndex:r}){this.value=e,this.scopePath=n._`.${new n.Name(t)}[${r}]`}}t.ValueScopeName=a;const c=n._`\n`;t.ValueScope=class extends s{constructor(e){super(e),this._values={},this._scope=e.scope,this.opts={...e,_n:e.lines?c:n.nil}}get(){return this._scope}name(e){return new a(e,this._newName(e))}value(e,t){var r;if(void 0===t.ref)throw new Error("CodeGen: ref must be passed in value");const n=this.toName(e),{prefix:i}=n,o=null!==(r=t.key)&&void 0!==r?r:t.ref;let s=this._values[i];if(s){const e=s.get(o);if(e)return e}else s=this._values[i]=new Map;s.set(o,n);const a=this._scope[i]||(this._scope[i]=[]),c=a.length;return a[c]=t.ref,n.setValue(t,{property:i,itemIndex:c}),n}getValue(e,t){const r=this._values[e];if(r)return r.get(t)}scopeRefs(e,t=this._values){return this._reduceValues(t,(t=>{if(void 0===t.scopePath)throw new Error(`CodeGen: name "${t}" has no value`);return n._`${e}${t.scopePath}`}))}scopeCode(e=this._values,t,r){return this._reduceValues(e,(e=>{if(void 0===e.value)throw new Error(`CodeGen: name "${e}" has no value`);return e.value.code}),t,r)}_reduceValues(e,r,s={},a){let c=n.nil;for(const u in e){const l=e[u];if(!l)continue;const h=s[u]=s[u]||new Map;l.forEach((e=>{if(h.has(e))return;h.set(e,o.Started);let s=r(e);if(s){const r=this.opts.es5?t.varKinds.var:t.varKinds.const;c=n._`${c}${r} ${e} = ${s};${this.opts._n}`}else{if(!(s=null==a?void 0:a(e)))throw new i(e);c=n._`${c}${s}${this.opts._n}`}h.set(e,o.Completed)}))}return c}}},4181:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.extendErrors=t.resetErrorsCount=t.reportExtraError=t.reportError=t.keyword$DataError=t.keywordError=void 0;const n=r(3487),i=r(6776),o=r(2141);function s(e,t){const r=e.const("err",t);e.if(n._`${o.default.vErrors} === null`,(()=>e.assign(o.default.vErrors,n._`[${r}]`)),n._`${o.default.vErrors}.push(${r})`),e.code(n._`${o.default.errors}++`)}function a(e,t){const{gen:r,validateName:i,schemaEnv:o}=e;o.$async?r.throw(n._`new ${e.ValidationError}(${t})`):(r.assign(n._`${i}.errors`,t),r.return(!1))}t.keywordError={message:({keyword:e})=>n.str`must pass "${e}" keyword validation`},t.keyword$DataError={message:({keyword:e,schemaType:t})=>t?n.str`"${e}" keyword must be ${t} ($data)`:n.str`"${e}" keyword is invalid ($data)`},t.reportError=function(e,r=t.keywordError,i,o){const{it:c}=e,{gen:l,compositeRule:h,allErrors:d}=c,f=u(e,r,i);(null!=o?o:h||d)?s(l,f):a(c,n._`[${f}]`)},t.reportExtraError=function(e,r=t.keywordError,n){const{it:i}=e,{gen:c,compositeRule:l,allErrors:h}=i;s(c,u(e,r,n)),l||h||a(i,o.default.vErrors)},t.resetErrorsCount=function(e,t){e.assign(o.default.errors,t),e.if(n._`${o.default.vErrors} !== null`,(()=>e.if(t,(()=>e.assign(n._`${o.default.vErrors}.length`,t)),(()=>e.assign(o.default.vErrors,null)))))},t.extendErrors=function({gen:e,keyword:t,schemaValue:r,data:i,errsCount:s,it:a}){if(void 0===s)throw new Error("ajv implementation error");const c=e.name("err");e.forRange("i",s,o.default.errors,(s=>{e.const(c,n._`${o.default.vErrors}[${s}]`),e.if(n._`${c}.instancePath === undefined`,(()=>e.assign(n._`${c}.instancePath`,(0,n.strConcat)(o.default.instancePath,a.errorPath)))),e.assign(n._`${c}.schemaPath`,n.str`${a.errSchemaPath}/${t}`),a.opts.verbose&&(e.assign(n._`${c}.schema`,r),e.assign(n._`${c}.data`,i))}))};const c={keyword:new n.Name("keyword"),schemaPath:new n.Name("schemaPath"),params:new n.Name("params"),propertyName:new n.Name("propertyName"),message:new n.Name("message"),schema:new n.Name("schema"),parentSchema:new n.Name("parentSchema")};function u(e,t,r){const{createErrors:i}=e.it;return!1===i?n._`{}`:function(e,t,r={}){const{gen:i,it:s}=e,a=[l(s,r),h(e,r)];return function(e,{params:t,message:r},i){const{keyword:s,data:a,schemaValue:u,it:l}=e,{opts:h,propertyName:d,topSchemaRef:f,schemaPath:p}=l;i.push([c.keyword,s],[c.params,"function"==typeof t?t(e):t||n._`{}`]),h.messages&&i.push([c.message,"function"==typeof r?r(e):r]),h.verbose&&i.push([c.schema,u],[c.parentSchema,n._`${f}${p}`],[o.default.data,a]),d&&i.push([c.propertyName,d])}(e,t,a),i.object(...a)}(e,t,r)}function l({errorPath:e},{instancePath:t}){const r=t?n.str`${e}${(0,i.getErrorPath)(t,i.Type.Str)}`:e;return[o.default.instancePath,(0,n.strConcat)(o.default.instancePath,r)]}function h({keyword:e,it:{errSchemaPath:t}},{schemaPath:r,parentSchema:o}){let s=o?t:n.str`${t}/${e}`;return r&&(s=n.str`${s}${(0,i.getErrorPath)(r,i.Type.Str)}`),[c.schemaPath,s]}},5173:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.resolveSchema=t.getCompilingSchema=t.resolveRef=t.compileSchema=t.SchemaEnv=void 0;const n=r(3487),i=r(7426),o=r(2141),s=r(2531),a=r(6776),c=r(4815);class u{constructor(e){var t;let r;this.refs={},this.dynamicAnchors={},"object"==typeof e.schema&&(r=e.schema),this.schema=e.schema,this.schemaId=e.schemaId,this.root=e.root||this,this.baseId=null!==(t=e.baseId)&&void 0!==t?t:(0,s.normalizeId)(null==r?void 0:r[e.schemaId||"$id"]),this.schemaPath=e.schemaPath,this.localRefs=e.localRefs,this.meta=e.meta,this.$async=null==r?void 0:r.$async,this.refs={}}}function l(e){const t=d.call(this,e);if(t)return t;const r=(0,s.getFullPath)(this.opts.uriResolver,e.root.baseId),{es5:a,lines:u}=this.opts.code,{ownProperties:l}=this.opts,h=new n.CodeGen(this.scope,{es5:a,lines:u,ownProperties:l});let f;e.$async&&(f=h.scopeValue("Error",{ref:i.default,code:n._`require("ajv/dist/runtime/validation_error").default`}));const p=h.scopeName("validate");e.validateName=p;const m={gen:h,allErrors:this.opts.allErrors,data:o.default.data,parentData:o.default.parentData,parentDataProperty:o.default.parentDataProperty,dataNames:[o.default.data],dataPathArr:[n.nil],dataLevel:0,dataTypes:[],definedProperties:new Set,topSchemaRef:h.scopeValue("schema",!0===this.opts.code.source?{ref:e.schema,code:(0,n.stringify)(e.schema)}:{ref:e.schema}),validateName:p,ValidationError:f,schema:e.schema,schemaEnv:e,rootId:r,baseId:e.baseId||r,schemaPath:n.nil,errSchemaPath:e.schemaPath||(this.opts.jtd?"":"#"),errorPath:n._`""`,opts:this.opts,self:this};let y;try{this._compilations.add(e),(0,c.validateFunctionCode)(m),h.optimize(this.opts.code.optimize);const t=h.toString();y=`${h.scopeRefs(o.default.scope)}return ${t}`,this.opts.code.process&&(y=this.opts.code.process(y,e));const r=new Function(`${o.default.self}`,`${o.default.scope}`,y)(this,this.scope.get());if(this.scope.value(p,{ref:r}),r.errors=null,r.schema=e.schema,r.schemaEnv=e,e.$async&&(r.$async=!0),!0===this.opts.code.source&&(r.source={validateName:p,validateCode:t,scopeValues:h._values}),this.opts.unevaluated){const{props:e,items:t}=m;r.evaluated={props:e instanceof n.Name?void 0:e,items:t instanceof n.Name?void 0:t,dynamicProps:e instanceof n.Name,dynamicItems:t instanceof n.Name},r.source&&(r.source.evaluated=(0,n.stringify)(r.evaluated))}return e.validate=r,e}catch(t){throw delete e.validate,delete e.validateName,y&&this.logger.error("Error compiling schema, function code:",y),t}finally{this._compilations.delete(e)}}function h(e){return(0,s.inlineRef)(e.schema,this.opts.inlineRefs)?e.schema:e.validate?e:l.call(this,e)}function d(e){for(const n of this._compilations)if(r=e,(t=n).schema===r.schema&&t.root===r.root&&t.baseId===r.baseId)return n;var t,r}function f(e,t){let r;for(;"string"==typeof(r=this.refs[t]);)t=r;return r||this.schemas[t]||p.call(this,e,t)}function p(e,t){const r=this.opts.uriResolver.parse(t),n=(0,s._getFullPath)(this.opts.uriResolver,r);let i=(0,s.getFullPath)(this.opts.uriResolver,e.baseId,void 0);if(Object.keys(e.schema).length>0&&n===i)return y.call(this,r,e);const o=(0,s.normalizeId)(n),a=this.refs[o]||this.schemas[o];if("string"==typeof a){const t=p.call(this,e,a);if("object"!=typeof(null==t?void 0:t.schema))return;return y.call(this,r,t)}if("object"==typeof(null==a?void 0:a.schema)){if(a.validate||l.call(this,a),o===(0,s.normalizeId)(t)){const{schema:t}=a,{schemaId:r}=this.opts,n=t[r];return n&&(i=(0,s.resolveUrl)(this.opts.uriResolver,i,n)),new u({schema:t,schemaId:r,root:e,baseId:i})}return y.call(this,r,a)}}t.SchemaEnv=u,t.compileSchema=l,t.resolveRef=function(e,t,r){var n;r=(0,s.resolveUrl)(this.opts.uriResolver,t,r);const i=e.refs[r];if(i)return i;let o=f.call(this,e,r);if(void 0===o){const i=null===(n=e.localRefs)||void 0===n?void 0:n[r],{schemaId:s}=this.opts;i&&(o=new u({schema:i,schemaId:s,root:e,baseId:t}))}return void 0!==o?e.refs[r]=h.call(this,o):void 0},t.getCompilingSchema=d,t.resolveSchema=p;const m=new Set(["properties","patternProperties","enum","dependencies","definitions"]);function y(e,{baseId:t,schema:r,root:n}){var i;if("/"!==(null===(i=e.fragment)||void 0===i?void 0:i[0]))return;for(const n of e.fragment.slice(1).split("/")){if("boolean"==typeof r)return;const e=r[(0,a.unescapeFragment)(n)];if(void 0===e)return;const i="object"==typeof(r=e)&&r[this.opts.schemaId];!m.has(n)&&i&&(t=(0,s.resolveUrl)(this.opts.uriResolver,t,i))}let o;if("boolean"!=typeof r&&r.$ref&&!(0,a.schemaHasRulesButRef)(r,this.RULES)){const e=(0,s.resolveUrl)(this.opts.uriResolver,t,r.$ref);o=p.call(this,n,e)}const{schemaId:c}=this.opts;return o=o||new u({schema:r,schemaId:c,root:n,baseId:t}),o.schema!==o.root.schema?o:void 0}},2141:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(3487),i={data:new n.Name("data"),valCxt:new n.Name("valCxt"),instancePath:new n.Name("instancePath"),parentData:new n.Name("parentData"),parentDataProperty:new n.Name("parentDataProperty"),rootData:new n.Name("rootData"),dynamicAnchors:new n.Name("dynamicAnchors"),vErrors:new n.Name("vErrors"),errors:new n.Name("errors"),this:new n.Name("this"),self:new n.Name("self"),scope:new n.Name("scope"),json:new n.Name("json"),jsonPos:new n.Name("jsonPos"),jsonLen:new n.Name("jsonLen"),jsonPart:new n.Name("jsonPart")};t.default=i},6646:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(2531);class i extends Error{constructor(e,t,r,i){super(i||`can't resolve reference ${r} from id ${t}`),this.missingRef=(0,n.resolveUrl)(e,t,r),this.missingSchema=(0,n.normalizeId)((0,n.getFullPath)(e,this.missingRef))}}t.default=i},2531:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getSchemaRefs=t.resolveUrl=t.normalizeId=t._getFullPath=t.getFullPath=t.inlineRef=void 0;const n=r(6776),i=r(4063),o=r(9461),s=new Set(["type","format","pattern","maxLength","minLength","maxProperties","minProperties","maxItems","minItems","maximum","minimum","uniqueItems","multipleOf","required","enum","const"]);t.inlineRef=function(e,t=!0){return"boolean"==typeof e||(!0===t?!c(e):!!t&&u(e)<=t)};const a=new Set(["$ref","$recursiveRef","$recursiveAnchor","$dynamicRef","$dynamicAnchor"]);function c(e){for(const t in e){if(a.has(t))return!0;const r=e[t];if(Array.isArray(r)&&r.some(c))return!0;if("object"==typeof r&&c(r))return!0}return!1}function u(e){let t=0;for(const r in e){if("$ref"===r)return 1/0;if(t++,!s.has(r)&&("object"==typeof e[r]&&(0,n.eachItem)(e[r],(e=>t+=u(e))),t===1/0))return 1/0}return t}function l(e,t="",r){!1!==r&&(t=f(t));const n=e.parse(t);return h(e,n)}function h(e,t){return e.serialize(t).split("#")[0]+"#"}t.getFullPath=l,t._getFullPath=h;const d=/#\/?$/;function f(e){return e?e.replace(d,""):""}t.normalizeId=f,t.resolveUrl=function(e,t,r){return r=f(r),e.resolve(t,r)};const p=/^[a-z_][-a-z0-9._]*$/i;t.getSchemaRefs=function(e,t){if("boolean"==typeof e)return{};const{schemaId:r,uriResolver:n}=this.opts,s=f(e[r]||t),a={"":s},c=l(n,s,!1),u={},h=new Set;return o(e,{allKeys:!0},((e,t,n,i)=>{if(void 0===i)return;const o=c+t;let s=a[i];function l(t){const r=this.opts.uriResolver.resolve;if(t=f(s?r(s,t):t),h.has(t))throw m(t);h.add(t);let n=this.refs[t];return"string"==typeof n&&(n=this.refs[n]),"object"==typeof n?d(e,n.schema,t):t!==f(o)&&("#"===t[0]?(d(e,u[t],t),u[t]=e):this.refs[t]=o),t}function y(e){if("string"==typeof e){if(!p.test(e))throw new Error(`invalid anchor "${e}"`);l.call(this,`#${e}`)}}"string"==typeof e[r]&&(s=l.call(this,e[r])),y.call(this,e.$anchor),y.call(this,e.$dynamicAnchor),a[t]=s})),u;function d(e,t,r){if(void 0!==t&&!i(e,t))throw m(r)}function m(e){return new Error(`reference "${e}" resolves to more than one schema`)}}},3141:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getRules=t.isJSONType=void 0;const r=new Set(["string","number","integer","boolean","null","object","array"]);t.isJSONType=function(e){return"string"==typeof e&&r.has(e)},t.getRules=function(){const e={number:{type:"number",rules:[]},string:{type:"string",rules:[]},array:{type:"array",rules:[]},object:{type:"object",rules:[]}};return{types:{...e,integer:!0,boolean:!0,null:!0},rules:[{rules:[]},e.number,e.string,e.array,e.object],post:{rules:[]},all:{},keywords:{}}}},6776:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.checkStrictMode=t.getErrorPath=t.Type=t.useFunc=t.setEvaluated=t.evaluatedPropsToName=t.mergeEvaluated=t.eachItem=t.unescapeJsonPointer=t.escapeJsonPointer=t.escapeFragment=t.unescapeFragment=t.schemaRefOrVal=t.schemaHasRulesButRef=t.schemaHasRules=t.checkUnknownRules=t.alwaysValidSchema=t.toHash=void 0;const n=r(3487),i=r(7023);function o(e,t=e.schema){const{opts:r,self:n}=e;if(!r.strictSchema)return;if("boolean"==typeof t)return;const i=n.RULES.keywords;for(const r in t)i[r]||p(e,`unknown keyword: "${r}"`)}function s(e,t){if("boolean"==typeof e)return!e;for(const r in e)if(t[r])return!0;return!1}function a(e){return"number"==typeof e?`${e}`:e.replace(/~/g,"~0").replace(/\//g,"~1")}function c(e){return e.replace(/~1/g,"/").replace(/~0/g,"~")}function u({mergeNames:e,mergeToName:t,mergeValues:r,resultToName:i}){return(o,s,a,c)=>{const u=void 0===a?s:a instanceof n.Name?(s instanceof n.Name?e(o,s,a):t(o,s,a),a):s instanceof n.Name?(t(o,a,s),s):r(s,a);return c!==n.Name||u instanceof n.Name?u:i(o,u)}}function l(e,t){if(!0===t)return e.var("props",!0);const r=e.var("props",n._`{}`);return void 0!==t&&h(e,r,t),r}function h(e,t,r){Object.keys(r).forEach((r=>e.assign(n._`${t}${(0,n.getProperty)(r)}`,!0)))}t.toHash=function(e){const t={};for(const r of e)t[r]=!0;return t},t.alwaysValidSchema=function(e,t){return"boolean"==typeof t?t:0===Object.keys(t).length||(o(e,t),!s(t,e.self.RULES.all))},t.checkUnknownRules=o,t.schemaHasRules=s,t.schemaHasRulesButRef=function(e,t){if("boolean"==typeof e)return!e;for(const r in e)if("$ref"!==r&&t.all[r])return!0;return!1},t.schemaRefOrVal=function({topSchemaRef:e,schemaPath:t},r,i,o){if(!o){if("number"==typeof r||"boolean"==typeof r)return r;if("string"==typeof r)return n._`${r}`}return n._`${e}${t}${(0,n.getProperty)(i)}`},t.unescapeFragment=function(e){return c(decodeURIComponent(e))},t.escapeFragment=function(e){return encodeURIComponent(a(e))},t.escapeJsonPointer=a,t.unescapeJsonPointer=c,t.eachItem=function(e,t){if(Array.isArray(e))for(const r of e)t(r);else t(e)},t.mergeEvaluated={props:u({mergeNames:(e,t,r)=>e.if(n._`${r} !== true && ${t} !== undefined`,(()=>{e.if(n._`${t} === true`,(()=>e.assign(r,!0)),(()=>e.assign(r,n._`${r} || {}`).code(n._`Object.assign(${r}, ${t})`)))})),mergeToName:(e,t,r)=>e.if(n._`${r} !== true`,(()=>{!0===t?e.assign(r,!0):(e.assign(r,n._`${r} || {}`),h(e,r,t))})),mergeValues:(e,t)=>!0===e||{...e,...t},resultToName:l}),items:u({mergeNames:(e,t,r)=>e.if(n._`${r} !== true && ${t} !== undefined`,(()=>e.assign(r,n._`${t} === true ? true : ${r} > ${t} ? ${r} : ${t}`))),mergeToName:(e,t,r)=>e.if(n._`${r} !== true`,(()=>e.assign(r,!0===t||n._`${r} > ${t} ? ${r} : ${t}`))),mergeValues:(e,t)=>!0===e||Math.max(e,t),resultToName:(e,t)=>e.var("items",t)})},t.evaluatedPropsToName=l,t.setEvaluated=h;const d={};var f;function p(e,t,r=e.opts.strictSchema){if(r){if(t=`strict mode: ${t}`,!0===r)throw new Error(t);e.self.logger.warn(t)}}t.useFunc=function(e,t){return e.scopeValue("func",{ref:t,code:d[t.code]||(d[t.code]=new i._Code(t.code))})},function(e){e[e.Num=0]="Num",e[e.Str=1]="Str"}(f=t.Type||(t.Type={})),t.getErrorPath=function(e,t,r){if(e instanceof n.Name){const i=t===f.Num;return r?i?n._`"[" + ${e} + "]"`:n._`"['" + ${e} + "']"`:i?n._`"/" + ${e}`:n._`"/" + ${e}.replace(/~/g, "~0").replace(/\\//g, "~1")`}return r?(0,n.getProperty)(e).toString():"/"+a(e)},t.checkStrictMode=p},8876:(e,t)=>{"use strict";function r(e,t){return t.rules.some((t=>n(e,t)))}function n(e,t){var r;return void 0!==e[t.keyword]||(null===(r=t.definition.implements)||void 0===r?void 0:r.some((t=>void 0!==e[t])))}Object.defineProperty(t,"__esModule",{value:!0}),t.shouldUseRule=t.shouldUseGroup=t.schemaHasRulesForType=void 0,t.schemaHasRulesForType=function({schema:e,self:t},n){const i=t.RULES.types[n];return i&&!0!==i&&r(e,i)},t.shouldUseGroup=r,t.shouldUseRule=n},5667:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.boolOrEmptySchema=t.topBoolOrEmptySchema=void 0;const n=r(4181),i=r(3487),o=r(2141),s={message:"boolean schema is false"};function a(e,t){const{gen:r,data:i}=e,o={gen:r,keyword:"false schema",data:i,schema:!1,schemaCode:!1,schemaValue:!1,params:{},it:e};(0,n.reportError)(o,s,void 0,t)}t.topBoolOrEmptySchema=function(e){const{gen:t,schema:r,validateName:n}=e;!1===r?a(e,!1):"object"==typeof r&&!0===r.$async?t.return(o.default.data):(t.assign(i._`${n}.errors`,null),t.return(!0))},t.boolOrEmptySchema=function(e,t){const{gen:r,schema:n}=e;!1===n?(r.var(t,!1),a(e)):r.var(t,!0)}},453:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.reportTypeError=t.checkDataTypes=t.checkDataType=t.coerceAndCheckDataType=t.getJSONTypes=t.getSchemaTypes=t.DataType=void 0;const n=r(3141),i=r(8876),o=r(4181),s=r(3487),a=r(6776);var c;function u(e){const t=Array.isArray(e)?e:e?[e]:[];if(t.every(n.isJSONType))return t;throw new Error("type must be JSONType or JSONType[]: "+t.join(","))}!function(e){e[e.Correct=0]="Correct",e[e.Wrong=1]="Wrong"}(c=t.DataType||(t.DataType={})),t.getSchemaTypes=function(e){const t=u(e.type);if(t.includes("null")){if(!1===e.nullable)throw new Error("type: null contradicts nullable: false")}else{if(!t.length&&void 0!==e.nullable)throw new Error('"nullable" cannot be used without "type"');!0===e.nullable&&t.push("null")}return t},t.getJSONTypes=u,t.coerceAndCheckDataType=function(e,t){const{gen:r,data:n,opts:o}=e,a=function(e,t){return t?e.filter((e=>l.has(e)||"array"===t&&"array"===e)):[]}(t,o.coerceTypes),u=t.length>0&&!(0===a.length&&1===t.length&&(0,i.schemaHasRulesForType)(e,t[0]));if(u){const i=d(t,n,o.strictNumbers,c.Wrong);r.if(i,(()=>{a.length?function(e,t,r){const{gen:n,data:i,opts:o}=e,a=n.let("dataType",s._`typeof ${i}`),c=n.let("coerced",s._`undefined`);"array"===o.coerceTypes&&n.if(s._`${a} == 'object' && Array.isArray(${i}) && ${i}.length == 1`,(()=>n.assign(i,s._`${i}[0]`).assign(a,s._`typeof ${i}`).if(d(t,i,o.strictNumbers),(()=>n.assign(c,i))))),n.if(s._`${c} !== undefined`);for(const e of r)(l.has(e)||"array"===e&&"array"===o.coerceTypes)&&u(e);function u(e){switch(e){case"string":return void n.elseIf(s._`${a} == "number" || ${a} == "boolean"`).assign(c,s._`"" + ${i}`).elseIf(s._`${i} === null`).assign(c,s._`""`);case"number":return void n.elseIf(s._`${a} == "boolean" || ${i} === null
              || (${a} == "string" && ${i} && ${i} == +${i})`).assign(c,s._`+${i}`);case"integer":return void n.elseIf(s._`${a} === "boolean" || ${i} === null
              || (${a} === "string" && ${i} && ${i} == +${i} && !(${i} % 1))`).assign(c,s._`+${i}`);case"boolean":return void n.elseIf(s._`${i} === "false" || ${i} === 0 || ${i} === null`).assign(c,!1).elseIf(s._`${i} === "true" || ${i} === 1`).assign(c,!0);case"null":return n.elseIf(s._`${i} === "" || ${i} === 0 || ${i} === false`),void n.assign(c,null);case"array":n.elseIf(s._`${a} === "string" || ${a} === "number"
              || ${a} === "boolean" || ${i} === null`).assign(c,s._`[${i}]`)}}n.else(),p(e),n.endIf(),n.if(s._`${c} !== undefined`,(()=>{n.assign(i,c),function({gen:e,parentData:t,parentDataProperty:r},n){e.if(s._`${t} !== undefined`,(()=>e.assign(s._`${t}[${r}]`,n)))}(e,c)}))}(e,t,a):p(e)}))}return u};const l=new Set(["string","number","integer","boolean","null"]);function h(e,t,r,n=c.Correct){const i=n===c.Correct?s.operators.EQ:s.operators.NEQ;let o;switch(e){case"null":return s._`${t} ${i} null`;case"array":o=s._`Array.isArray(${t})`;break;case"object":o=s._`${t} && typeof ${t} == "object" && !Array.isArray(${t})`;break;case"integer":o=a(s._`!(${t} % 1) && !isNaN(${t})`);break;case"number":o=a();break;default:return s._`typeof ${t} ${i} ${e}`}return n===c.Correct?o:(0,s.not)(o);function a(e=s.nil){return(0,s.and)(s._`typeof ${t} == "number"`,e,r?s._`isFinite(${t})`:s.nil)}}function d(e,t,r,n){if(1===e.length)return h(e[0],t,r,n);let i;const o=(0,a.toHash)(e);if(o.array&&o.object){const e=s._`typeof ${t} != "object"`;i=o.null?e:s._`!${t} || ${e}`,delete o.null,delete o.array,delete o.object}else i=s.nil;o.number&&delete o.integer;for(const e in o)i=(0,s.and)(i,h(e,t,r,n));return i}t.checkDataType=h,t.checkDataTypes=d;const f={message:({schema:e})=>`must be ${e}`,params:({schema:e,schemaValue:t})=>"string"==typeof e?s._`{type: ${e}}`:s._`{type: ${t}}`};function p(e){const t=function(e){const{gen:t,data:r,schema:n}=e,i=(0,a.schemaRefOrVal)(e,n,"type");return{gen:t,keyword:"type",data:r,schema:n.type,schemaCode:i,schemaValue:i,parentSchema:n,params:{},it:e}}(e);(0,o.reportError)(t,f)}t.reportTypeError=p},313:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.assignDefaults=void 0;const n=r(3487),i=r(6776);function o(e,t,r){const{gen:o,compositeRule:s,data:a,opts:c}=e;if(void 0===r)return;const u=n._`${a}${(0,n.getProperty)(t)}`;if(s)return void(0,i.checkStrictMode)(e,`default is ignored for: ${u}`);let l=n._`${u} === undefined`;"empty"===c.useDefaults&&(l=n._`${l} || ${u} === null || ${u} === ""`),o.if(l,n._`${u} = ${(0,n.stringify)(r)}`)}t.assignDefaults=function(e,t){const{properties:r,items:n}=e.schema;if("object"===t&&r)for(const t in r)o(e,t,r[t].default);else"array"===t&&Array.isArray(n)&&n.forEach(((t,r)=>o(e,r,t.default)))}},4815:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getData=t.KeywordCxt=t.validateFunctionCode=void 0;const n=r(5667),i=r(453),o=r(8876),s=r(453),a=r(313),c=r(5005),u=r(3099),l=r(3487),h=r(2141),d=r(2531),f=r(6776),p=r(4181);function m({gen:e,validateName:t,schema:r,schemaEnv:n,opts:i},o){i.code.es5?e.func(t,l._`${h.default.data}, ${h.default.valCxt}`,n.$async,(()=>{e.code(l._`"use strict"; ${y(r,i)}`),function(e,t){e.if(h.default.valCxt,(()=>{e.var(h.default.instancePath,l._`${h.default.valCxt}.${h.default.instancePath}`),e.var(h.default.parentData,l._`${h.default.valCxt}.${h.default.parentData}`),e.var(h.default.parentDataProperty,l._`${h.default.valCxt}.${h.default.parentDataProperty}`),e.var(h.default.rootData,l._`${h.default.valCxt}.${h.default.rootData}`),t.dynamicRef&&e.var(h.default.dynamicAnchors,l._`${h.default.valCxt}.${h.default.dynamicAnchors}`)}),(()=>{e.var(h.default.instancePath,l._`""`),e.var(h.default.parentData,l._`undefined`),e.var(h.default.parentDataProperty,l._`undefined`),e.var(h.default.rootData,h.default.data),t.dynamicRef&&e.var(h.default.dynamicAnchors,l._`{}`)}))}(e,i),e.code(o)})):e.func(t,l._`${h.default.data}, ${function(e){return l._`{${h.default.instancePath}="", ${h.default.parentData}, ${h.default.parentDataProperty}, ${h.default.rootData}=${h.default.data}${e.dynamicRef?l._`, ${h.default.dynamicAnchors}={}`:l.nil}}={}`}(i)}`,n.$async,(()=>e.code(y(r,i)).code(o)))}function y(e,t){const r="object"==typeof e&&e[t.schemaId];return r&&(t.code.source||t.code.process)?l._`/*# sourceURL=${r} */`:l.nil}function v({schema:e,self:t}){if("boolean"==typeof e)return!e;for(const r in e)if(t.RULES.all[r])return!0;return!1}function g(e){return"boolean"!=typeof e.schema}function b(e){(0,f.checkUnknownRules)(e),function(e){const{schema:t,errSchemaPath:r,opts:n,self:i}=e;t.$ref&&n.ignoreKeywordsWithRef&&(0,f.schemaHasRulesButRef)(t,i.RULES)&&i.logger.warn(`$ref: keywords ignored in schema at path "${r}"`)}(e)}function w(e,t){if(e.opts.jtd)return E(e,[],!1,t);const r=(0,i.getSchemaTypes)(e.schema);E(e,r,!(0,i.coerceAndCheckDataType)(e,r),t)}function _({gen:e,schemaEnv:t,schema:r,errSchemaPath:n,opts:i}){const o=r.$comment;if(!0===i.$comment)e.code(l._`${h.default.self}.logger.log(${o})`);else if("function"==typeof i.$comment){const r=l.str`${n}/$comment`,i=e.scopeValue("root",{ref:t.root});e.code(l._`${h.default.self}.opts.$comment(${o}, ${r}, ${i}.schema)`)}}function E(e,t,r,n){const{gen:i,schema:a,data:c,allErrors:u,opts:d,self:p}=e,{RULES:m}=p;function y(f){(0,o.shouldUseGroup)(a,f)&&(f.type?(i.if((0,s.checkDataType)(f.type,c,d.strictNumbers)),S(e,f),1===t.length&&t[0]===f.type&&r&&(i.else(),(0,s.reportTypeError)(e)),i.endIf()):S(e,f),u||i.if(l._`${h.default.errors} === ${n||0}`))}!a.$ref||!d.ignoreKeywordsWithRef&&(0,f.schemaHasRulesButRef)(a,m)?(d.jtd||function(e,t){!e.schemaEnv.meta&&e.opts.strictTypes&&(function(e,t){t.length&&(e.dataTypes.length?(t.forEach((t=>{C(e.dataTypes,t)||k(e,`type "${t}" not allowed by context "${e.dataTypes.join(",")}"`)})),function(e,t){const r=[];for(const n of e.dataTypes)C(t,n)?r.push(n):t.includes("integer")&&"number"===n&&r.push("integer");e.dataTypes=r}(e,t)):e.dataTypes=t)}(e,t),e.opts.allowUnionTypes||function(e,t){t.length>1&&(2!==t.length||!t.includes("null"))&&k(e,"use allowUnionTypes to allow union type keyword")}(e,t),function(e,t){const r=e.self.RULES.all;for(const n in r){const i=r[n];if("object"==typeof i&&(0,o.shouldUseRule)(e.schema,i)){const{type:r}=i.definition;r.length&&!r.some((e=>{return n=e,(r=t).includes(n)||"number"===n&&r.includes("integer");var r,n}))&&k(e,`missing type "${r.join(",")}" for keyword "${n}"`)}}}(e,e.dataTypes))}(e,t),i.block((()=>{for(const e of m.rules)y(e);y(m.post)}))):i.block((()=>O(e,"$ref",m.all.$ref.definition)))}function S(e,t){const{gen:r,schema:n,opts:{useDefaults:i}}=e;i&&(0,a.assignDefaults)(e,t.type),r.block((()=>{for(const r of t.rules)(0,o.shouldUseRule)(n,r)&&O(e,r.keyword,r.definition,t.type)}))}function C(e,t){return e.includes(t)||"integer"===t&&e.includes("number")}function k(e,t){t+=` at "${e.schemaEnv.baseId+e.errSchemaPath}" (strictTypes)`,(0,f.checkStrictMode)(e,t,e.opts.strictTypes)}t.validateFunctionCode=function(e){g(e)&&(b(e),v(e))?function(e){const{schema:t,opts:r,gen:n}=e;m(e,(()=>{r.$comment&&t.$comment&&_(e),function(e){const{schema:t,opts:r}=e;void 0!==t.default&&r.useDefaults&&r.strictSchema&&(0,f.checkStrictMode)(e,"default is ignored in the schema root")}(e),n.let(h.default.vErrors,null),n.let(h.default.errors,0),r.unevaluated&&function(e){const{gen:t,validateName:r}=e;e.evaluated=t.const("evaluated",l._`${r}.evaluated`),t.if(l._`${e.evaluated}.dynamicProps`,(()=>t.assign(l._`${e.evaluated}.props`,l._`undefined`))),t.if(l._`${e.evaluated}.dynamicItems`,(()=>t.assign(l._`${e.evaluated}.items`,l._`undefined`)))}(e),w(e),function(e){const{gen:t,schemaEnv:r,validateName:n,ValidationError:i,opts:o}=e;r.$async?t.if(l._`${h.default.errors} === 0`,(()=>t.return(h.default.data)),(()=>t.throw(l._`new ${i}(${h.default.vErrors})`))):(t.assign(l._`${n}.errors`,h.default.vErrors),o.unevaluated&&function({gen:e,evaluated:t,props:r,items:n}){r instanceof l.Name&&e.assign(l._`${t}.props`,r),n instanceof l.Name&&e.assign(l._`${t}.items`,n)}(e),t.return(l._`${h.default.errors} === 0`))}(e)}))}(e):m(e,(()=>(0,n.topBoolOrEmptySchema)(e)))};class x{constructor(e,t,r){if((0,c.validateKeywordUsage)(e,t,r),this.gen=e.gen,this.allErrors=e.allErrors,this.keyword=r,this.data=e.data,this.schema=e.schema[r],this.$data=t.$data&&e.opts.$data&&this.schema&&this.schema.$data,this.schemaValue=(0,f.schemaRefOrVal)(e,this.schema,r,this.$data),this.schemaType=t.schemaType,this.parentSchema=e.schema,this.params={},this.it=e,this.def=t,this.$data)this.schemaCode=e.gen.const("vSchema",$(this.$data,e));else if(this.schemaCode=this.schemaValue,!(0,c.validSchemaType)(this.schema,t.schemaType,t.allowUndefined))throw new Error(`${r} value must be ${JSON.stringify(t.schemaType)}`);("code"in t?t.trackErrors:!1!==t.errors)&&(this.errsCount=e.gen.const("_errs",h.default.errors))}result(e,t,r){this.failResult((0,l.not)(e),t,r)}failResult(e,t,r){this.gen.if(e),r?r():this.error(),t?(this.gen.else(),t(),this.allErrors&&this.gen.endIf()):this.allErrors?this.gen.endIf():this.gen.else()}pass(e,t){this.failResult((0,l.not)(e),void 0,t)}fail(e){if(void 0===e)return this.error(),void(this.allErrors||this.gen.if(!1));this.gen.if(e),this.error(),this.allErrors?this.gen.endIf():this.gen.else()}fail$data(e){if(!this.$data)return this.fail(e);const{schemaCode:t}=this;this.fail(l._`${t} !== undefined && (${(0,l.or)(this.invalid$data(),e)})`)}error(e,t,r){if(t)return this.setParams(t),this._error(e,r),void this.setParams({});this._error(e,r)}_error(e,t){(e?p.reportExtraError:p.reportError)(this,this.def.error,t)}$dataError(){(0,p.reportError)(this,this.def.$dataError||p.keyword$DataError)}reset(){if(void 0===this.errsCount)throw new Error('add "trackErrors" to keyword definition');(0,p.resetErrorsCount)(this.gen,this.errsCount)}ok(e){this.allErrors||this.gen.if(e)}setParams(e,t){t?Object.assign(this.params,e):this.params=e}block$data(e,t,r=l.nil){this.gen.block((()=>{this.check$data(e,r),t()}))}check$data(e=l.nil,t=l.nil){if(!this.$data)return;const{gen:r,schemaCode:n,schemaType:i,def:o}=this;r.if((0,l.or)(l._`${n} === undefined`,t)),e!==l.nil&&r.assign(e,!0),(i.length||o.validateSchema)&&(r.elseIf(this.invalid$data()),this.$dataError(),e!==l.nil&&r.assign(e,!1)),r.else()}invalid$data(){const{gen:e,schemaCode:t,schemaType:r,def:n,it:i}=this;return(0,l.or)(function(){if(r.length){if(!(t instanceof l.Name))throw new Error("ajv implementation error");const e=Array.isArray(r)?r:[r];return l._`${(0,s.checkDataTypes)(e,t,i.opts.strictNumbers,s.DataType.Wrong)}`}return l.nil}(),function(){if(n.validateSchema){const r=e.scopeValue("validate$data",{ref:n.validateSchema});return l._`!${r}(${t})`}return l.nil}())}subschema(e,t){const r=(0,u.getSubschema)(this.it,e);(0,u.extendSubschemaData)(r,this.it,e),(0,u.extendSubschemaMode)(r,e);const i={...this.it,...r,items:void 0,props:void 0};return function(e,t){g(e)&&(b(e),v(e))?function(e,t){const{schema:r,gen:n,opts:i}=e;i.$comment&&r.$comment&&_(e),function(e){const t=e.schema[e.opts.schemaId];t&&(e.baseId=(0,d.resolveUrl)(e.opts.uriResolver,e.baseId,t))}(e),function(e){if(e.schema.$async&&!e.schemaEnv.$async)throw new Error("async schema in sync schema")}(e);const o=n.const("_errs",h.default.errors);w(e,o),n.var(t,l._`${o} === ${h.default.errors}`)}(e,t):(0,n.boolOrEmptySchema)(e,t)}(i,t),i}mergeEvaluated(e,t){const{it:r,gen:n}=this;r.opts.unevaluated&&(!0!==r.props&&void 0!==e.props&&(r.props=f.mergeEvaluated.props(n,e.props,r.props,t)),!0!==r.items&&void 0!==e.items&&(r.items=f.mergeEvaluated.items(n,e.items,r.items,t)))}mergeValidEvaluated(e,t){const{it:r,gen:n}=this;if(r.opts.unevaluated&&(!0!==r.props||!0!==r.items))return n.if(t,(()=>this.mergeEvaluated(e,l.Name))),!0}}function O(e,t,r,n){const i=new x(e,r,t);"code"in r?r.code(i,n):i.$data&&r.validate?(0,c.funcKeywordCode)(i,r):"macro"in r?(0,c.macroKeywordCode)(i,r):(r.compile||r.validate)&&(0,c.funcKeywordCode)(i,r)}t.KeywordCxt=x;const P=/^\/(?:[^~]|~0|~1)*$/,R=/^([0-9]+)(#|\/(?:[^~]|~0|~1)*)?$/;function $(e,{dataLevel:t,dataNames:r,dataPathArr:n}){let i,o;if(""===e)return h.default.rootData;if("/"===e[0]){if(!P.test(e))throw new Error(`Invalid JSON-pointer: ${e}`);i=e,o=h.default.rootData}else{const s=R.exec(e);if(!s)throw new Error(`Invalid JSON-pointer: ${e}`);const a=+s[1];if(i=s[2],"#"===i){if(a>=t)throw new Error(c("property/index",a));return n[t-a]}if(a>t)throw new Error(c("data",a));if(o=r[t-a],!i)return o}let s=o;const a=i.split("/");for(const e of a)e&&(o=l._`${o}${(0,l.getProperty)((0,f.unescapeJsonPointer)(e))}`,s=l._`${s} && ${o}`);return s;function c(e,r){return`Cannot access ${e} ${r} levels up, current level is ${t}`}}t.getData=$},5005:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.validateKeywordUsage=t.validSchemaType=t.funcKeywordCode=t.macroKeywordCode=void 0;const n=r(3487),i=r(2141),o=r(412),s=r(4181);function a(e){const{gen:t,data:r,it:i}=e;t.if(i.parentData,(()=>t.assign(r,n._`${i.parentData}[${i.parentDataProperty}]`)))}function c(e,t,r){if(void 0===r)throw new Error(`keyword "${t}" failed to compile`);return e.scopeValue("keyword","function"==typeof r?{ref:r}:{ref:r,code:(0,n.stringify)(r)})}t.macroKeywordCode=function(e,t){const{gen:r,keyword:i,schema:o,parentSchema:s,it:a}=e,u=t.macro.call(a.self,o,s,a),l=c(r,i,u);!1!==a.opts.validateSchema&&a.self.validateSchema(u,!0);const h=r.name("valid");e.subschema({schema:u,schemaPath:n.nil,errSchemaPath:`${a.errSchemaPath}/${i}`,topSchemaRef:l,compositeRule:!0},h),e.pass(h,(()=>e.error(!0)))},t.funcKeywordCode=function(e,t){var r;const{gen:u,keyword:l,schema:h,parentSchema:d,$data:f,it:p}=e;!function({schemaEnv:e},t){if(t.async&&!e.$async)throw new Error("async keyword in sync schema")}(p,t);const m=!f&&t.compile?t.compile.call(p.self,h,d,p):t.validate,y=c(u,l,m),v=u.let("valid");function g(r=(t.async?n._`await `:n.nil)){const s=p.opts.passContext?i.default.this:i.default.self,a=!("compile"in t&&!f||!1===t.schema);u.assign(v,n._`${r}${(0,o.callValidateCode)(e,y,s,a)}`,t.modifying)}function b(e){var r;u.if((0,n.not)(null!==(r=t.valid)&&void 0!==r?r:v),e)}e.block$data(v,(function(){if(!1===t.errors)g(),t.modifying&&a(e),b((()=>e.error()));else{const r=t.async?function(){const e=u.let("ruleErrs",null);return u.try((()=>g(n._`await `)),(t=>u.assign(v,!1).if(n._`${t} instanceof ${p.ValidationError}`,(()=>u.assign(e,n._`${t}.errors`)),(()=>u.throw(t))))),e}():function(){const e=n._`${y}.errors`;return u.assign(e,null),g(n.nil),e}();t.modifying&&a(e),b((()=>function(e,t){const{gen:r}=e;r.if(n._`Array.isArray(${t})`,(()=>{r.assign(i.default.vErrors,n._`${i.default.vErrors} === null ? ${t} : ${i.default.vErrors}.concat(${t})`).assign(i.default.errors,n._`${i.default.vErrors}.length`),(0,s.extendErrors)(e)}),(()=>e.error()))}(e,r)))}})),e.ok(null!==(r=t.valid)&&void 0!==r?r:v)},t.validSchemaType=function(e,t,r=!1){return!t.length||t.some((t=>"array"===t?Array.isArray(e):"object"===t?e&&"object"==typeof e&&!Array.isArray(e):typeof e==t||r&&void 0===e))},t.validateKeywordUsage=function({schema:e,opts:t,self:r,errSchemaPath:n},i,o){if(Array.isArray(i.keyword)?!i.keyword.includes(o):i.keyword!==o)throw new Error("ajv implementation error");const s=i.dependencies;if(null==s?void 0:s.some((t=>!Object.prototype.hasOwnProperty.call(e,t))))throw new Error(`parent schema must have dependencies of ${o}: ${s.join(",")}`);if(i.validateSchema&&!i.validateSchema(e[o])){const e=`keyword "${o}" value is invalid at path "${n}": `+r.errorsText(i.validateSchema.errors);if("log"!==t.validateSchema)throw new Error(e);r.logger.error(e)}}},3099:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.extendSubschemaMode=t.extendSubschemaData=t.getSubschema=void 0;const n=r(3487),i=r(6776);t.getSubschema=function(e,{keyword:t,schemaProp:r,schema:o,schemaPath:s,errSchemaPath:a,topSchemaRef:c}){if(void 0!==t&&void 0!==o)throw new Error('both "keyword" and "schema" passed, only one allowed');if(void 0!==t){const o=e.schema[t];return void 0===r?{schema:o,schemaPath:n._`${e.schemaPath}${(0,n.getProperty)(t)}`,errSchemaPath:`${e.errSchemaPath}/${t}`}:{schema:o[r],schemaPath:n._`${e.schemaPath}${(0,n.getProperty)(t)}${(0,n.getProperty)(r)}`,errSchemaPath:`${e.errSchemaPath}/${t}/${(0,i.escapeFragment)(r)}`}}if(void 0!==o){if(void 0===s||void 0===a||void 0===c)throw new Error('"schemaPath", "errSchemaPath" and "topSchemaRef" are required with "schema"');return{schema:o,schemaPath:s,topSchemaRef:c,errSchemaPath:a}}throw new Error('either "keyword" or "schema" must be passed')},t.extendSubschemaData=function(e,t,{dataProp:r,dataPropType:o,data:s,dataTypes:a,propertyName:c}){if(void 0!==s&&void 0!==r)throw new Error('both "data" and "dataProp" passed, only one allowed');const{gen:u}=t;if(void 0!==r){const{errorPath:s,dataPathArr:a,opts:c}=t;l(u.let("data",n._`${t.data}${(0,n.getProperty)(r)}`,!0)),e.errorPath=n.str`${s}${(0,i.getErrorPath)(r,o,c.jsPropertySyntax)}`,e.parentDataProperty=n._`${r}`,e.dataPathArr=[...a,e.parentDataProperty]}function l(r){e.data=r,e.dataLevel=t.dataLevel+1,e.dataTypes=[],t.definedProperties=new Set,e.parentData=t.data,e.dataNames=[...t.dataNames,r]}void 0!==s&&(l(s instanceof n.Name?s:u.let("data",s,!0)),void 0!==c&&(e.propertyName=c)),a&&(e.dataTypes=a)},t.extendSubschemaMode=function(e,{jtdDiscriminator:t,jtdMetadata:r,compositeRule:n,createErrors:i,allErrors:o}){void 0!==n&&(e.compositeRule=n),void 0!==i&&(e.createErrors=i),void 0!==o&&(e.allErrors=o),e.jtdDiscriminator=t,e.jtdMetadata=r}},7159:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CodeGen=t.Name=t.nil=t.stringify=t.str=t._=t.KeywordCxt=void 0;var n=r(4815);Object.defineProperty(t,"KeywordCxt",{enumerable:!0,get:function(){return n.KeywordCxt}});var i=r(3487);Object.defineProperty(t,"_",{enumerable:!0,get:function(){return i._}}),Object.defineProperty(t,"str",{enumerable:!0,get:function(){return i.str}}),Object.defineProperty(t,"stringify",{enumerable:!0,get:function(){return i.stringify}}),Object.defineProperty(t,"nil",{enumerable:!0,get:function(){return i.nil}}),Object.defineProperty(t,"Name",{enumerable:!0,get:function(){return i.Name}}),Object.defineProperty(t,"CodeGen",{enumerable:!0,get:function(){return i.CodeGen}});const o=r(7426),s=r(6646),a=r(3141),c=r(5173),u=r(3487),l=r(2531),h=r(453),d=r(6776),f=r(4775),p=r(3589),m=(e,t)=>new RegExp(e,t);m.code="new RegExp";const y=["removeAdditional","useDefaults","coerceTypes"],v=new Set(["validate","serialize","parse","wrapper","root","schema","keyword","pattern","formats","validate$data","func","obj","Error"]),g={errorDataPath:"",format:"`validateFormats: false` can be used instead.",nullable:'"nullable" keyword is supported by default.',jsonPointers:"Deprecated jsPropertySyntax can be used instead.",extendRefs:"Deprecated ignoreKeywordsWithRef can be used instead.",missingRefs:"Pass empty schema with $id that should be ignored to ajv.addSchema.",processCode:"Use option `code: {process: (code, schemaEnv: object) => string}`",sourceCode:"Use option `code: {source: true}`",strictDefaults:"It is default now, see option `strict`.",strictKeywords:"It is default now, see option `strict`.",uniqueItems:'"uniqueItems" keyword is always validated.',unknownFormats:"Disable strict mode or pass `true` to `ajv.addFormat` (or `formats` option).",cache:"Map is used as cache, schema object as key.",serialize:"Map is used as cache, schema object as key.",ajvErrors:"It is default now."},b={ignoreKeywordsWithRef:"",jsPropertySyntax:"",unicode:'"minLength"/"maxLength" account for unicode characters by default.'};function w(e){var t,r,n,i,o,s,a,c,u,l,h,d,f,y,v,g,b,w,_,E,S,C,k,x,O;const P=e.strict,R=null===(t=e.code)||void 0===t?void 0:t.optimize,$=!0===R||void 0===R?1:R||0,D=null!==(n=null===(r=e.code)||void 0===r?void 0:r.regExp)&&void 0!==n?n:m,I=null!==(i=e.uriResolver)&&void 0!==i?i:p.default;return{strictSchema:null===(s=null!==(o=e.strictSchema)&&void 0!==o?o:P)||void 0===s||s,strictNumbers:null===(c=null!==(a=e.strictNumbers)&&void 0!==a?a:P)||void 0===c||c,strictTypes:null!==(l=null!==(u=e.strictTypes)&&void 0!==u?u:P)&&void 0!==l?l:"log",strictTuples:null!==(d=null!==(h=e.strictTuples)&&void 0!==h?h:P)&&void 0!==d?d:"log",strictRequired:null!==(y=null!==(f=e.strictRequired)&&void 0!==f?f:P)&&void 0!==y&&y,code:e.code?{...e.code,optimize:$,regExp:D}:{optimize:$,regExp:D},loopRequired:null!==(v=e.loopRequired)&&void 0!==v?v:200,loopEnum:null!==(g=e.loopEnum)&&void 0!==g?g:200,meta:null===(b=e.meta)||void 0===b||b,messages:null===(w=e.messages)||void 0===w||w,inlineRefs:null===(_=e.inlineRefs)||void 0===_||_,schemaId:null!==(E=e.schemaId)&&void 0!==E?E:"$id",addUsedSchema:null===(S=e.addUsedSchema)||void 0===S||S,validateSchema:null===(C=e.validateSchema)||void 0===C||C,validateFormats:null===(k=e.validateFormats)||void 0===k||k,unicodeRegExp:null===(x=e.unicodeRegExp)||void 0===x||x,int32range:null===(O=e.int32range)||void 0===O||O,uriResolver:I}}class _{constructor(e={}){this.schemas={},this.refs={},this.formats={},this._compilations=new Set,this._loading={},this._cache=new Map,e=this.opts={...e,...w(e)};const{es5:t,lines:r}=this.opts.code;this.scope=new u.ValueScope({scope:{},prefixes:v,es5:t,lines:r}),this.logger=function(e){if(!1===e)return P;if(void 0===e)return console;if(e.log&&e.warn&&e.error)return e;throw new Error("logger must implement log, warn and error methods")}(e.logger);const n=e.validateFormats;e.validateFormats=!1,this.RULES=(0,a.getRules)(),E.call(this,g,e,"NOT SUPPORTED"),E.call(this,b,e,"DEPRECATED","warn"),this._metaOpts=O.call(this),e.formats&&k.call(this),this._addVocabularies(),this._addDefaultMetaSchema(),e.keywords&&x.call(this,e.keywords),"object"==typeof e.meta&&this.addMetaSchema(e.meta),C.call(this),e.validateFormats=n}_addVocabularies(){this.addKeyword("$async")}_addDefaultMetaSchema(){const{$data:e,meta:t,schemaId:r}=this.opts;let n=f;"id"===r&&(n={...f},n.id=n.$id,delete n.$id),t&&e&&this.addMetaSchema(n,n[r],!1)}defaultMeta(){const{meta:e,schemaId:t}=this.opts;return this.opts.defaultMeta="object"==typeof e?e[t]||e:void 0}validate(e,t){let r;if("string"==typeof e){if(r=this.getSchema(e),!r)throw new Error(`no schema with key or ref "${e}"`)}else r=this.compile(e);const n=r(t);return"$async"in r||(this.errors=r.errors),n}compile(e,t){const r=this._addSchema(e,t);return r.validate||this._compileSchemaEnv(r)}compileAsync(e,t){if("function"!=typeof this.opts.loadSchema)throw new Error("options.loadSchema should be a function");const{loadSchema:r}=this.opts;return n.call(this,e,t);async function n(e,t){await i.call(this,e.$schema);const r=this._addSchema(e,t);return r.validate||o.call(this,r)}async function i(e){e&&!this.getSchema(e)&&await n.call(this,{$ref:e},!0)}async function o(e){try{return this._compileSchemaEnv(e)}catch(t){if(!(t instanceof s.default))throw t;return a.call(this,t),await c.call(this,t.missingSchema),o.call(this,e)}}function a({missingSchema:e,missingRef:t}){if(this.refs[e])throw new Error(`AnySchema ${e} is loaded but ${t} cannot be resolved`)}async function c(e){const r=await u.call(this,e);this.refs[e]||await i.call(this,r.$schema),this.refs[e]||this.addSchema(r,e,t)}async function u(e){const t=this._loading[e];if(t)return t;try{return await(this._loading[e]=r(e))}finally{delete this._loading[e]}}}addSchema(e,t,r,n=this.opts.validateSchema){if(Array.isArray(e)){for(const t of e)this.addSchema(t,void 0,r,n);return this}let i;if("object"==typeof e){const{schemaId:t}=this.opts;if(i=e[t],void 0!==i&&"string"!=typeof i)throw new Error(`schema ${t} must be string`)}return t=(0,l.normalizeId)(t||i),this._checkUnique(t),this.schemas[t]=this._addSchema(e,r,t,n,!0),this}addMetaSchema(e,t,r=this.opts.validateSchema){return this.addSchema(e,t,!0,r),this}validateSchema(e,t){if("boolean"==typeof e)return!0;let r;if(r=e.$schema,void 0!==r&&"string"!=typeof r)throw new Error("$schema must be a string");if(r=r||this.opts.defaultMeta||this.defaultMeta(),!r)return this.logger.warn("meta-schema not available"),this.errors=null,!0;const n=this.validate(r,e);if(!n&&t){const e="schema is invalid: "+this.errorsText();if("log"!==this.opts.validateSchema)throw new Error(e);this.logger.error(e)}return n}getSchema(e){let t;for(;"string"==typeof(t=S.call(this,e));)e=t;if(void 0===t){const{schemaId:r}=this.opts,n=new c.SchemaEnv({schema:{},schemaId:r});if(t=c.resolveSchema.call(this,n,e),!t)return;this.refs[e]=t}return t.validate||this._compileSchemaEnv(t)}removeSchema(e){if(e instanceof RegExp)return this._removeAllSchemas(this.schemas,e),this._removeAllSchemas(this.refs,e),this;switch(typeof e){case"undefined":return this._removeAllSchemas(this.schemas),this._removeAllSchemas(this.refs),this._cache.clear(),this;case"string":{const t=S.call(this,e);return"object"==typeof t&&this._cache.delete(t.schema),delete this.schemas[e],delete this.refs[e],this}case"object":{const t=e;this._cache.delete(t);let r=e[this.opts.schemaId];return r&&(r=(0,l.normalizeId)(r),delete this.schemas[r],delete this.refs[r]),this}default:throw new Error("ajv.removeSchema: invalid parameter")}}addVocabulary(e){for(const t of e)this.addKeyword(t);return this}addKeyword(e,t){let r;if("string"==typeof e)r=e,"object"==typeof t&&(this.logger.warn("these parameters are deprecated, see docs for addKeyword"),t.keyword=r);else{if("object"!=typeof e||void 0!==t)throw new Error("invalid addKeywords parameters");if(r=(t=e).keyword,Array.isArray(r)&&!r.length)throw new Error("addKeywords: keyword must be string or non-empty array")}if($.call(this,r,t),!t)return(0,d.eachItem)(r,(e=>D.call(this,e))),this;j.call(this,t);const n={...t,type:(0,h.getJSONTypes)(t.type),schemaType:(0,h.getJSONTypes)(t.schemaType)};return(0,d.eachItem)(r,0===n.type.length?e=>D.call(this,e,n):e=>n.type.forEach((t=>D.call(this,e,n,t)))),this}getKeyword(e){const t=this.RULES.all[e];return"object"==typeof t?t.definition:!!t}removeKeyword(e){const{RULES:t}=this;delete t.keywords[e],delete t.all[e];for(const r of t.rules){const t=r.rules.findIndex((t=>t.keyword===e));t>=0&&r.rules.splice(t,1)}return this}addFormat(e,t){return"string"==typeof t&&(t=new RegExp(t)),this.formats[e]=t,this}errorsText(e=this.errors,{separator:t=", ",dataVar:r="data"}={}){return e&&0!==e.length?e.map((e=>`${r}${e.instancePath} ${e.message}`)).reduce(((e,r)=>e+t+r)):"No errors"}$dataMetaSchema(e,t){const r=this.RULES.all;e=JSON.parse(JSON.stringify(e));for(const n of t){const t=n.split("/").slice(1);let i=e;for(const e of t)i=i[e];for(const e in r){const t=r[e];if("object"!=typeof t)continue;const{$data:n}=t.definition,o=i[e];n&&o&&(i[e]=A(o))}}return e}_removeAllSchemas(e,t){for(const r in e){const n=e[r];t&&!t.test(r)||("string"==typeof n?delete e[r]:n&&!n.meta&&(this._cache.delete(n.schema),delete e[r]))}}_addSchema(e,t,r,n=this.opts.validateSchema,i=this.opts.addUsedSchema){let o;const{schemaId:s}=this.opts;if("object"==typeof e)o=e[s];else{if(this.opts.jtd)throw new Error("schema must be object");if("boolean"!=typeof e)throw new Error("schema must be object or boolean")}let a=this._cache.get(e);if(void 0!==a)return a;r=(0,l.normalizeId)(o||r);const u=l.getSchemaRefs.call(this,e,r);return a=new c.SchemaEnv({schema:e,schemaId:s,meta:t,baseId:r,localRefs:u}),this._cache.set(a.schema,a),i&&!r.startsWith("#")&&(r&&this._checkUnique(r),this.refs[r]=a),n&&this.validateSchema(e,!0),a}_checkUnique(e){if(this.schemas[e]||this.refs[e])throw new Error(`schema with key or id "${e}" already exists`)}_compileSchemaEnv(e){if(e.meta?this._compileMetaSchema(e):c.compileSchema.call(this,e),!e.validate)throw new Error("ajv implementation error");return e.validate}_compileMetaSchema(e){const t=this.opts;this.opts=this._metaOpts;try{c.compileSchema.call(this,e)}finally{this.opts=t}}}function E(e,t,r,n="error"){for(const i in e){const o=i;o in t&&this.logger[n](`${r}: option ${i}. ${e[o]}`)}}function S(e){return e=(0,l.normalizeId)(e),this.schemas[e]||this.refs[e]}function C(){const e=this.opts.schemas;if(e)if(Array.isArray(e))this.addSchema(e);else for(const t in e)this.addSchema(e[t],t)}function k(){for(const e in this.opts.formats){const t=this.opts.formats[e];t&&this.addFormat(e,t)}}function x(e){if(Array.isArray(e))this.addVocabulary(e);else{this.logger.warn("keywords option as map is deprecated, pass array");for(const t in e){const r=e[t];r.keyword||(r.keyword=t),this.addKeyword(r)}}}function O(){const e={...this.opts};for(const t of y)delete e[t];return e}t.default=_,_.ValidationError=o.default,_.MissingRefError=s.default;const P={log(){},warn(){},error(){}},R=/^[a-z_$][a-z0-9_$:-]*$/i;function $(e,t){const{RULES:r}=this;if((0,d.eachItem)(e,(e=>{if(r.keywords[e])throw new Error(`Keyword ${e} is already defined`);if(!R.test(e))throw new Error(`Keyword ${e} has invalid name`)})),t&&t.$data&&!("code"in t)&&!("validate"in t))throw new Error('$data keyword must have "code" or "validate" function')}function D(e,t,r){var n;const i=null==t?void 0:t.post;if(r&&i)throw new Error('keyword with "post" flag cannot have "type"');const{RULES:o}=this;let s=i?o.post:o.rules.find((({type:e})=>e===r));if(s||(s={type:r,rules:[]},o.rules.push(s)),o.keywords[e]=!0,!t)return;const a={keyword:e,definition:{...t,type:(0,h.getJSONTypes)(t.type),schemaType:(0,h.getJSONTypes)(t.schemaType)}};t.before?I.call(this,s,a,t.before):s.rules.push(a),o.all[e]=a,null===(n=t.implements)||void 0===n||n.forEach((e=>this.addKeyword(e)))}function I(e,t,r){const n=e.rules.findIndex((e=>e.keyword===r));n>=0?e.rules.splice(n,0,t):(e.rules.push(t),this.logger.warn(`rule ${r} is not defined`))}function j(e){let{metaSchema:t}=e;void 0!==t&&(e.$data&&this.opts.$data&&(t=A(t)),e.validateSchema=this.compile(t,!0))}const T={$ref:"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#"};function A(e){return{anyOf:[e,T]}}},3510:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(4063);n.code='require("ajv/dist/runtime/equal").default',t.default=n},4499:(e,t)=>{"use strict";function r(e){const t=e.length;let r,n=0,i=0;for(;i<t;)n++,r=e.charCodeAt(i++),r>=55296&&r<=56319&&i<t&&(r=e.charCodeAt(i),56320==(64512&r)&&i++);return n}Object.defineProperty(t,"__esModule",{value:!0}),t.default=r,r.code='require("ajv/dist/runtime/ucs2length").default'},3589:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(540);n.code='require("ajv/dist/runtime/uri").default',t.default=n},7426:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});class r extends Error{constructor(e){super("validation failed"),this.errors=e,this.ajv=this.validation=!0}}t.default=r},4783:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.validateAdditionalItems=void 0;const n=r(3487),i=r(6776),o={keyword:"additionalItems",type:"array",schemaType:["boolean","object"],before:"uniqueItems",error:{message:({params:{len:e}})=>n.str`must NOT have more than ${e} items`,params:({params:{len:e}})=>n._`{limit: ${e}}`},code(e){const{parentSchema:t,it:r}=e,{items:n}=t;Array.isArray(n)?s(e,n):(0,i.checkStrictMode)(r,'"additionalItems" is ignored when "items" is not an array of schemas')}};function s(e,t){const{gen:r,schema:o,data:s,keyword:a,it:c}=e;c.items=!0;const u=r.const("len",n._`${s}.length`);if(!1===o)e.setParams({len:t.length}),e.pass(n._`${u} <= ${t.length}`);else if("object"==typeof o&&!(0,i.alwaysValidSchema)(c,o)){const o=r.var("valid",n._`${u} <= ${t.length}`);r.if((0,n.not)(o),(()=>function(o){r.forRange("i",t.length,u,(t=>{e.subschema({keyword:a,dataProp:t,dataPropType:i.Type.Num},o),c.allErrors||r.if((0,n.not)(o),(()=>r.break()))}))}(o))),e.ok(o)}}t.validateAdditionalItems=s,t.default=o},9351:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(412),i=r(3487),o=r(2141),s=r(6776),a={keyword:"additionalProperties",type:["object"],schemaType:["boolean","object"],allowUndefined:!0,trackErrors:!0,error:{message:"must NOT have additional properties",params:({params:e})=>i._`{additionalProperty: ${e.additionalProperty}}`},code(e){const{gen:t,schema:r,parentSchema:a,data:c,errsCount:u,it:l}=e;if(!u)throw new Error("ajv implementation error");const{allErrors:h,opts:d}=l;if(l.props=!0,"all"!==d.removeAdditional&&(0,s.alwaysValidSchema)(l,r))return;const f=(0,n.allSchemaProperties)(a.properties),p=(0,n.allSchemaProperties)(a.patternProperties);function m(e){t.code(i._`delete ${c}[${e}]`)}function y(n){if("all"===d.removeAdditional||d.removeAdditional&&!1===r)m(n);else{if(!1===r)return e.setParams({additionalProperty:n}),e.error(),void(h||t.break());if("object"==typeof r&&!(0,s.alwaysValidSchema)(l,r)){const r=t.name("valid");"failing"===d.removeAdditional?(v(n,r,!1),t.if((0,i.not)(r),(()=>{e.reset(),m(n)}))):(v(n,r),h||t.if((0,i.not)(r),(()=>t.break())))}}}function v(t,r,n){const i={keyword:"additionalProperties",dataProp:t,dataPropType:s.Type.Str};!1===n&&Object.assign(i,{compositeRule:!0,createErrors:!1,allErrors:!1}),e.subschema(i,r)}t.forIn("key",c,(r=>{f.length||p.length?t.if(function(r){let o;if(f.length>8){const e=(0,s.schemaRefOrVal)(l,a.properties,"properties");o=(0,n.isOwnProperty)(t,e,r)}else o=f.length?(0,i.or)(...f.map((e=>i._`${r} === ${e}`))):i.nil;return p.length&&(o=(0,i.or)(o,...p.map((t=>i._`${(0,n.usePattern)(e,t)}.test(${r})`)))),(0,i.not)(o)}(r),(()=>y(r))):y(r)})),e.ok(i._`${u} === ${o.default.errors}`)}};t.default=a},1125:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(6776),i={keyword:"allOf",schemaType:"array",code(e){const{gen:t,schema:r,it:i}=e;if(!Array.isArray(r))throw new Error("ajv implementation error");const o=t.name("valid");r.forEach(((t,r)=>{if((0,n.alwaysValidSchema)(i,t))return;const s=e.subschema({keyword:"allOf",schemaProp:r},o);e.ok(o),e.mergeEvaluated(s)}))}};t.default=i},19:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n={keyword:"anyOf",schemaType:"array",trackErrors:!0,code:r(412).validateUnion,error:{message:"must match a schema in anyOf"}};t.default=n},9864:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(3487),i=r(6776),o={keyword:"contains",type:"array",schemaType:["object","boolean"],before:"uniqueItems",trackErrors:!0,error:{message:({params:{min:e,max:t}})=>void 0===t?n.str`must contain at least ${e} valid item(s)`:n.str`must contain at least ${e} and no more than ${t} valid item(s)`,params:({params:{min:e,max:t}})=>void 0===t?n._`{minContains: ${e}}`:n._`{minContains: ${e}, maxContains: ${t}}`},code(e){const{gen:t,schema:r,parentSchema:o,data:s,it:a}=e;let c,u;const{minContains:l,maxContains:h}=o;a.opts.next?(c=void 0===l?1:l,u=h):c=1;const d=t.const("len",n._`${s}.length`);if(e.setParams({min:c,max:u}),void 0===u&&0===c)return void(0,i.checkStrictMode)(a,'"minContains" == 0 without "maxContains": "contains" keyword ignored');if(void 0!==u&&c>u)return(0,i.checkStrictMode)(a,'"minContains" > "maxContains" is always invalid'),void e.fail();if((0,i.alwaysValidSchema)(a,r)){let t=n._`${d} >= ${c}`;return void 0!==u&&(t=n._`${t} && ${d} <= ${u}`),void e.pass(t)}a.items=!0;const f=t.name("valid");function p(){const e=t.name("_valid"),r=t.let("count",0);m(e,(()=>t.if(e,(()=>function(e){t.code(n._`${e}++`),void 0===u?t.if(n._`${e} >= ${c}`,(()=>t.assign(f,!0).break())):(t.if(n._`${e} > ${u}`,(()=>t.assign(f,!1).break())),1===c?t.assign(f,!0):t.if(n._`${e} >= ${c}`,(()=>t.assign(f,!0))))}(r)))))}function m(r,n){t.forRange("i",0,d,(t=>{e.subschema({keyword:"contains",dataProp:t,dataPropType:i.Type.Num,compositeRule:!0},r),n()}))}void 0===u&&1===c?m(f,(()=>t.if(f,(()=>t.break())))):0===c?(t.let(f,!0),void 0!==u&&t.if(n._`${s}.length > 0`,p)):(t.let(f,!1),p()),e.result(f,(()=>e.reset()))}};t.default=o},7772:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.validateSchemaDeps=t.validatePropertyDeps=t.error=void 0;const n=r(3487),i=r(6776),o=r(412);t.error={message:({params:{property:e,depsCount:t,deps:r}})=>{const i=1===t?"property":"properties";return n.str`must have ${i} ${r} when property ${e} is present`},params:({params:{property:e,depsCount:t,deps:r,missingProperty:i}})=>n._`{property: ${e},
    missingProperty: ${i},
    depsCount: ${t},
    deps: ${r}}`};const s={keyword:"dependencies",type:"object",schemaType:"object",error:t.error,code(e){const[t,r]=function({schema:e}){const t={},r={};for(const n in e)"__proto__"!==n&&((Array.isArray(e[n])?t:r)[n]=e[n]);return[t,r]}(e);a(e,t),c(e,r)}};function a(e,t=e.schema){const{gen:r,data:i,it:s}=e;if(0===Object.keys(t).length)return;const a=r.let("missing");for(const c in t){const u=t[c];if(0===u.length)continue;const l=(0,o.propertyInData)(r,i,c,s.opts.ownProperties);e.setParams({property:c,depsCount:u.length,deps:u.join(", ")}),s.allErrors?r.if(l,(()=>{for(const t of u)(0,o.checkReportMissingProp)(e,t)})):(r.if(n._`${l} && (${(0,o.checkMissingProp)(e,u,a)})`),(0,o.reportMissingProp)(e,a),r.else())}}function c(e,t=e.schema){const{gen:r,data:n,keyword:s,it:a}=e,c=r.name("valid");for(const u in t)(0,i.alwaysValidSchema)(a,t[u])||(r.if((0,o.propertyInData)(r,n,u,a.opts.ownProperties),(()=>{const t=e.subschema({keyword:s,schemaProp:u},c);e.mergeValidEvaluated(t,c)}),(()=>r.var(c,!0))),e.ok(c))}t.validatePropertyDeps=a,t.validateSchemaDeps=c,t.default=s},9434:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(3487),i=r(6776),o={keyword:"if",schemaType:["object","boolean"],trackErrors:!0,error:{message:({params:e})=>n.str`must match "${e.ifClause}" schema`,params:({params:e})=>n._`{failingKeyword: ${e.ifClause}}`},code(e){const{gen:t,parentSchema:r,it:o}=e;void 0===r.then&&void 0===r.else&&(0,i.checkStrictMode)(o,'"if" without "then" and "else" is ignored');const a=s(o,"then"),c=s(o,"else");if(!a&&!c)return;const u=t.let("valid",!0),l=t.name("_valid");if(function(){const t=e.subschema({keyword:"if",compositeRule:!0,createErrors:!1,allErrors:!1},l);e.mergeEvaluated(t)}(),e.reset(),a&&c){const r=t.let("ifClause");e.setParams({ifClause:r}),t.if(l,h("then",r),h("else",r))}else a?t.if(l,h("then")):t.if((0,n.not)(l),h("else"));function h(r,i){return()=>{const o=e.subschema({keyword:r},l);t.assign(u,l),e.mergeValidEvaluated(o,u),i?t.assign(i,n._`${r}`):e.setParams({ifClause:r})}}e.pass(u,(()=>e.error(!0)))}};function s(e,t){const r=e.schema[t];return void 0!==r&&!(0,i.alwaysValidSchema)(e,r)}t.default=o},8200:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(4783),i=r(2924),o=r(4665),s=r(1119),a=r(9864),c=r(7772),u=r(3708),l=r(9351),h=r(6239),d=r(2296),f=r(5697),p=r(19),m=r(4200),y=r(1125),v=r(9434),g=r(6552);t.default=function(e=!1){const t=[f.default,p.default,m.default,y.default,v.default,g.default,u.default,l.default,c.default,h.default,d.default];return e?t.push(i.default,s.default):t.push(n.default,o.default),t.push(a.default),t}},4665:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.validateTuple=void 0;const n=r(3487),i=r(6776),o=r(412),s={keyword:"items",type:"array",schemaType:["object","array","boolean"],before:"uniqueItems",code(e){const{schema:t,it:r}=e;if(Array.isArray(t))return a(e,"additionalItems",t);r.items=!0,(0,i.alwaysValidSchema)(r,t)||e.ok((0,o.validateArray)(e))}};function a(e,t,r=e.schema){const{gen:o,parentSchema:s,data:a,keyword:c,it:u}=e;!function(e){const{opts:n,errSchemaPath:o}=u,s=r.length,a=s===e.minItems&&(s===e.maxItems||!1===e[t]);if(n.strictTuples&&!a){const e=`"${c}" is ${s}-tuple, but minItems or maxItems/${t} are not specified or different at path "${o}"`;(0,i.checkStrictMode)(u,e,n.strictTuples)}}(s),u.opts.unevaluated&&r.length&&!0!==u.items&&(u.items=i.mergeEvaluated.items(o,r.length,u.items));const l=o.name("valid"),h=o.const("len",n._`${a}.length`);r.forEach(((t,r)=>{(0,i.alwaysValidSchema)(u,t)||(o.if(n._`${h} > ${r}`,(()=>e.subschema({keyword:c,schemaProp:r,dataProp:r},l))),e.ok(l))}))}t.validateTuple=a,t.default=s},1119:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(3487),i=r(6776),o=r(412),s=r(4783),a={keyword:"items",type:"array",schemaType:["object","boolean"],before:"uniqueItems",error:{message:({params:{len:e}})=>n.str`must NOT have more than ${e} items`,params:({params:{len:e}})=>n._`{limit: ${e}}`},code(e){const{schema:t,parentSchema:r,it:n}=e,{prefixItems:a}=r;n.items=!0,(0,i.alwaysValidSchema)(n,t)||(a?(0,s.validateAdditionalItems)(e,a):e.ok((0,o.validateArray)(e)))}};t.default=a},5697:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(6776),i={keyword:"not",schemaType:["object","boolean"],trackErrors:!0,code(e){const{gen:t,schema:r,it:i}=e;if((0,n.alwaysValidSchema)(i,r))return void e.fail();const o=t.name("valid");e.subschema({keyword:"not",compositeRule:!0,createErrors:!1,allErrors:!1},o),e.failResult(o,(()=>e.reset()),(()=>e.error()))},error:{message:"must NOT be valid"}};t.default=i},4200:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(3487),i=r(6776),o={keyword:"oneOf",schemaType:"array",trackErrors:!0,error:{message:"must match exactly one schema in oneOf",params:({params:e})=>n._`{passingSchemas: ${e.passing}}`},code(e){const{gen:t,schema:r,parentSchema:o,it:s}=e;if(!Array.isArray(r))throw new Error("ajv implementation error");if(s.opts.discriminator&&o.discriminator)return;const a=r,c=t.let("valid",!1),u=t.let("passing",null),l=t.name("_valid");e.setParams({passing:u}),t.block((function(){a.forEach(((r,o)=>{let a;(0,i.alwaysValidSchema)(s,r)?t.var(l,!0):a=e.subschema({keyword:"oneOf",schemaProp:o,compositeRule:!0},l),o>0&&t.if(n._`${l} && ${c}`).assign(c,!1).assign(u,n._`[${u}, ${o}]`).else(),t.if(l,(()=>{t.assign(c,!0),t.assign(u,o),a&&e.mergeEvaluated(a,n.Name)}))}))})),e.result(c,(()=>e.reset()),(()=>e.error(!0)))}};t.default=o},2296:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(412),i=r(3487),o=r(6776),s=r(6776),a={keyword:"patternProperties",type:"object",schemaType:"object",code(e){const{gen:t,schema:r,data:a,parentSchema:c,it:u}=e,{opts:l}=u,h=(0,n.allSchemaProperties)(r),d=h.filter((e=>(0,o.alwaysValidSchema)(u,r[e])));if(0===h.length||d.length===h.length&&(!u.opts.unevaluated||!0===u.props))return;const f=l.strictSchema&&!l.allowMatchingProperties&&c.properties,p=t.name("valid");!0===u.props||u.props instanceof i.Name||(u.props=(0,s.evaluatedPropsToName)(t,u.props));const{props:m}=u;function y(e){for(const t in f)new RegExp(e).test(t)&&(0,o.checkStrictMode)(u,`property ${t} matches pattern ${e} (use allowMatchingProperties)`)}function v(r){t.forIn("key",a,(o=>{t.if(i._`${(0,n.usePattern)(e,r)}.test(${o})`,(()=>{const n=d.includes(r);n||e.subschema({keyword:"patternProperties",schemaProp:r,dataProp:o,dataPropType:s.Type.Str},p),u.opts.unevaluated&&!0!==m?t.assign(i._`${m}[${o}]`,!0):n||u.allErrors||t.if((0,i.not)(p),(()=>t.break()))}))}))}!function(){for(const e of h)f&&y(e),u.allErrors?v(e):(t.var(p,!0),v(e),t.if(p))}()}};t.default=a},2924:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(4665),i={keyword:"prefixItems",type:"array",schemaType:["array"],before:"uniqueItems",code:e=>(0,n.validateTuple)(e,"items")};t.default=i},6239:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(4815),i=r(412),o=r(6776),s=r(9351),a={keyword:"properties",type:"object",schemaType:"object",code(e){const{gen:t,schema:r,parentSchema:a,data:c,it:u}=e;"all"===u.opts.removeAdditional&&void 0===a.additionalProperties&&s.default.code(new n.KeywordCxt(u,s.default,"additionalProperties"));const l=(0,i.allSchemaProperties)(r);for(const e of l)u.definedProperties.add(e);u.opts.unevaluated&&l.length&&!0!==u.props&&(u.props=o.mergeEvaluated.props(t,(0,o.toHash)(l),u.props));const h=l.filter((e=>!(0,o.alwaysValidSchema)(u,r[e])));if(0===h.length)return;const d=t.name("valid");for(const r of h)f(r)?p(r):(t.if((0,i.propertyInData)(t,c,r,u.opts.ownProperties)),p(r),u.allErrors||t.else().var(d,!0),t.endIf()),e.it.definedProperties.add(r),e.ok(d);function f(e){return u.opts.useDefaults&&!u.compositeRule&&void 0!==r[e].default}function p(t){e.subschema({keyword:"properties",schemaProp:t,dataProp:t},d)}}};t.default=a},3708:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(3487),i=r(6776),o={keyword:"propertyNames",type:"object",schemaType:["object","boolean"],error:{message:"property name must be valid",params:({params:e})=>n._`{propertyName: ${e.propertyName}}`},code(e){const{gen:t,schema:r,data:o,it:s}=e;if((0,i.alwaysValidSchema)(s,r))return;const a=t.name("valid");t.forIn("key",o,(r=>{e.setParams({propertyName:r}),e.subschema({keyword:"propertyNames",data:r,dataTypes:["string"],propertyName:r,compositeRule:!0},a),t.if((0,n.not)(a),(()=>{e.error(!0),s.allErrors||t.break()}))})),e.ok(a)}};t.default=o},6552:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(6776),i={keyword:["then","else"],schemaType:["object","boolean"],code({keyword:e,parentSchema:t,it:r}){void 0===t.if&&(0,n.checkStrictMode)(r,`"${e}" without "if" is ignored`)}};t.default=i},412:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.validateUnion=t.validateArray=t.usePattern=t.callValidateCode=t.schemaProperties=t.allSchemaProperties=t.noPropertyInData=t.propertyInData=t.isOwnProperty=t.hasPropFunc=t.reportMissingProp=t.checkMissingProp=t.checkReportMissingProp=void 0;const n=r(3487),i=r(6776),o=r(2141),s=r(6776);function a(e){return e.scopeValue("func",{ref:Object.prototype.hasOwnProperty,code:n._`Object.prototype.hasOwnProperty`})}function c(e,t,r){return n._`${a(e)}.call(${t}, ${r})`}function u(e,t,r,i){const o=n._`${t}${(0,n.getProperty)(r)} === undefined`;return i?(0,n.or)(o,(0,n.not)(c(e,t,r))):o}function l(e){return e?Object.keys(e).filter((e=>"__proto__"!==e)):[]}t.checkReportMissingProp=function(e,t){const{gen:r,data:i,it:o}=e;r.if(u(r,i,t,o.opts.ownProperties),(()=>{e.setParams({missingProperty:n._`${t}`},!0),e.error()}))},t.checkMissingProp=function({gen:e,data:t,it:{opts:r}},i,o){return(0,n.or)(...i.map((i=>(0,n.and)(u(e,t,i,r.ownProperties),n._`${o} = ${i}`))))},t.reportMissingProp=function(e,t){e.setParams({missingProperty:t},!0),e.error()},t.hasPropFunc=a,t.isOwnProperty=c,t.propertyInData=function(e,t,r,i){const o=n._`${t}${(0,n.getProperty)(r)} !== undefined`;return i?n._`${o} && ${c(e,t,r)}`:o},t.noPropertyInData=u,t.allSchemaProperties=l,t.schemaProperties=function(e,t){return l(t).filter((r=>!(0,i.alwaysValidSchema)(e,t[r])))},t.callValidateCode=function({schemaCode:e,data:t,it:{gen:r,topSchemaRef:i,schemaPath:s,errorPath:a},it:c},u,l,h){const d=h?n._`${e}, ${t}, ${i}${s}`:t,f=[[o.default.instancePath,(0,n.strConcat)(o.default.instancePath,a)],[o.default.parentData,c.parentData],[o.default.parentDataProperty,c.parentDataProperty],[o.default.rootData,o.default.rootData]];c.opts.dynamicRef&&f.push([o.default.dynamicAnchors,o.default.dynamicAnchors]);const p=n._`${d}, ${r.object(...f)}`;return l!==n.nil?n._`${u}.call(${l}, ${p})`:n._`${u}(${p})`};const h=n._`new RegExp`;t.usePattern=function({gen:e,it:{opts:t}},r){const i=t.unicodeRegExp?"u":"",{regExp:o}=t.code,a=o(r,i);return e.scopeValue("pattern",{key:a.toString(),ref:a,code:n._`${"new RegExp"===o.code?h:(0,s.useFunc)(e,o)}(${r}, ${i})`})},t.validateArray=function(e){const{gen:t,data:r,keyword:o,it:s}=e,a=t.name("valid");if(s.allErrors){const e=t.let("valid",!0);return c((()=>t.assign(e,!1))),e}return t.var(a,!0),c((()=>t.break())),a;function c(s){const c=t.const("len",n._`${r}.length`);t.forRange("i",0,c,(r=>{e.subschema({keyword:o,dataProp:r,dataPropType:i.Type.Num},a),t.if((0,n.not)(a),s)}))}},t.validateUnion=function(e){const{gen:t,schema:r,keyword:o,it:s}=e;if(!Array.isArray(r))throw new Error("ajv implementation error");if(r.some((e=>(0,i.alwaysValidSchema)(s,e)))&&!s.opts.unevaluated)return;const a=t.let("valid",!1),c=t.name("_valid");t.block((()=>r.forEach(((r,i)=>{const s=e.subschema({keyword:o,schemaProp:i,compositeRule:!0},c);t.assign(a,n._`${a} || ${c}`),e.mergeValidEvaluated(s,c)||t.if((0,n.not)(a))})))),e.result(a,(()=>e.reset()),(()=>e.error(!0)))}},8386:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r={keyword:"id",code(){throw new Error('NOT SUPPORTED: keyword "id", use "$id" for schema ID')}};t.default=r},5684:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(8386),i=r(8280),o=["$schema","$id","$defs","$vocabulary",{keyword:"$comment"},"definitions",n.default,i.default];t.default=o},8280:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.callRef=t.getValidate=void 0;const n=r(6646),i=r(412),o=r(3487),s=r(2141),a=r(5173),c=r(6776),u={keyword:"$ref",schemaType:"string",code(e){const{gen:t,schema:r,it:i}=e,{baseId:s,schemaEnv:c,validateName:u,opts:d,self:f}=i,{root:p}=c;if(("#"===r||"#/"===r)&&s===p.baseId)return function(){if(c===p)return h(e,u,c,c.$async);const r=t.scopeValue("root",{ref:p});return h(e,o._`${r}.validate`,p,p.$async)}();const m=a.resolveRef.call(f,p,s,r);if(void 0===m)throw new n.default(i.opts.uriResolver,s,r);return m instanceof a.SchemaEnv?function(t){const r=l(e,t);h(e,r,t,t.$async)}(m):function(n){const i=t.scopeValue("schema",!0===d.code.source?{ref:n,code:(0,o.stringify)(n)}:{ref:n}),s=t.name("valid"),a=e.subschema({schema:n,dataTypes:[],schemaPath:o.nil,topSchemaRef:i,errSchemaPath:r},s);e.mergeEvaluated(a),e.ok(s)}(m)}};function l(e,t){const{gen:r}=e;return t.validate?r.scopeValue("validate",{ref:t.validate}):o._`${r.scopeValue("wrapper",{ref:t})}.validate`}function h(e,t,r,n){const{gen:a,it:u}=e,{allErrors:l,schemaEnv:h,opts:d}=u,f=d.passContext?s.default.this:o.nil;function p(e){const t=o._`${e}.errors`;a.assign(s.default.vErrors,o._`${s.default.vErrors} === null ? ${t} : ${s.default.vErrors}.concat(${t})`),a.assign(s.default.errors,o._`${s.default.vErrors}.length`)}function m(e){var t;if(!u.opts.unevaluated)return;const n=null===(t=null==r?void 0:r.validate)||void 0===t?void 0:t.evaluated;if(!0!==u.props)if(n&&!n.dynamicProps)void 0!==n.props&&(u.props=c.mergeEvaluated.props(a,n.props,u.props));else{const t=a.var("props",o._`${e}.evaluated.props`);u.props=c.mergeEvaluated.props(a,t,u.props,o.Name)}if(!0!==u.items)if(n&&!n.dynamicItems)void 0!==n.items&&(u.items=c.mergeEvaluated.items(a,n.items,u.items));else{const t=a.var("items",o._`${e}.evaluated.items`);u.items=c.mergeEvaluated.items(a,t,u.items,o.Name)}}n?function(){if(!h.$async)throw new Error("async schema referenced by sync schema");const r=a.let("valid");a.try((()=>{a.code(o._`await ${(0,i.callValidateCode)(e,t,f)}`),m(t),l||a.assign(r,!0)}),(e=>{a.if(o._`!(${e} instanceof ${u.ValidationError})`,(()=>a.throw(e))),p(e),l||a.assign(r,!1)})),e.ok(r)}():e.result((0,i.callValidateCode)(e,t,f),(()=>m(t)),(()=>p(t)))}t.getValidate=l,t.callRef=h,t.default=u},1240:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(3487),i=r(9306),o=r(5173),s=r(6776),a={keyword:"discriminator",type:"object",schemaType:"object",error:{message:({params:{discrError:e,tagName:t}})=>e===i.DiscrError.Tag?`tag "${t}" must be string`:`value of tag "${t}" must be in oneOf`,params:({params:{discrError:e,tag:t,tagName:r}})=>n._`{error: ${e}, tag: ${r}, tagValue: ${t}}`},code(e){const{gen:t,data:r,schema:a,parentSchema:c,it:u}=e,{oneOf:l}=c;if(!u.opts.discriminator)throw new Error("discriminator: requires discriminator option");const h=a.propertyName;if("string"!=typeof h)throw new Error("discriminator: requires propertyName");if(a.mapping)throw new Error("discriminator: mapping is not supported");if(!l)throw new Error("discriminator: requires oneOf keyword");const d=t.let("valid",!1),f=t.const("tag",n._`${r}${(0,n.getProperty)(h)}`);function p(r){const i=t.name("valid"),o=e.subschema({keyword:"oneOf",schemaProp:r},i);return e.mergeEvaluated(o,n.Name),i}t.if(n._`typeof ${f} == "string"`,(()=>function(){const r=function(){var e;const t={},r=i(c);let n=!0;for(let t=0;t<l.length;t++){let c=l[t];(null==c?void 0:c.$ref)&&!(0,s.schemaHasRulesButRef)(c,u.self.RULES)&&(c=o.resolveRef.call(u.self,u.schemaEnv.root,u.baseId,null==c?void 0:c.$ref),c instanceof o.SchemaEnv&&(c=c.schema));const d=null===(e=null==c?void 0:c.properties)||void 0===e?void 0:e[h];if("object"!=typeof d)throw new Error(`discriminator: oneOf subschemas (or referenced schemas) must have "properties/${h}"`);n=n&&(r||i(c)),a(d,t)}if(!n)throw new Error(`discriminator: "${h}" must be required`);return t;function i({required:e}){return Array.isArray(e)&&e.includes(h)}function a(e,t){if(e.const)d(e.const,t);else{if(!e.enum)throw new Error(`discriminator: "properties/${h}" must have "const" or "enum"`);for(const r of e.enum)d(r,t)}}function d(e,r){if("string"!=typeof e||e in t)throw new Error(`discriminator: "${h}" values must be unique strings`);t[e]=r}}();t.if(!1);for(const e in r)t.elseIf(n._`${f} === ${e}`),t.assign(d,p(r[e]));t.else(),e.error(!1,{discrError:i.DiscrError.Mapping,tag:f,tagName:h}),t.endIf()}()),(()=>e.error(!1,{discrError:i.DiscrError.Tag,tag:f,tagName:h}))),e.ok(d)}};t.default=a},9306:(e,t)=>{"use strict";var r;Object.defineProperty(t,"__esModule",{value:!0}),t.DiscrError=void 0,(r=t.DiscrError||(t.DiscrError={})).Tag="tag",r.Mapping="mapping"},3924:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(5684),i=r(2649),o=r(8200),s=r(9502),a=r(6167),c=[n.default,i.default,(0,o.default)(),s.default,a.metadataVocabulary,a.contentVocabulary];t.default=c},9651:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(3487),i={keyword:"format",type:["number","string"],schemaType:"string",$data:!0,error:{message:({schemaCode:e})=>n.str`must match format "${e}"`,params:({schemaCode:e})=>n._`{format: ${e}}`},code(e,t){const{gen:r,data:i,$data:o,schema:s,schemaCode:a,it:c}=e,{opts:u,errSchemaPath:l,schemaEnv:h,self:d}=c;u.validateFormats&&(o?function(){const o=r.scopeValue("formats",{ref:d.formats,code:u.code.formats}),s=r.const("fDef",n._`${o}[${a}]`),c=r.let("fType"),l=r.let("format");r.if(n._`typeof ${s} == "object" && !(${s} instanceof RegExp)`,(()=>r.assign(c,n._`${s}.type || "string"`).assign(l,n._`${s}.validate`)),(()=>r.assign(c,n._`"string"`).assign(l,s))),e.fail$data((0,n.or)(!1===u.strictSchema?n.nil:n._`${a} && !${l}`,function(){const e=h.$async?n._`(${s}.async ? await ${l}(${i}) : ${l}(${i}))`:n._`${l}(${i})`,r=n._`(typeof ${l} == "function" ? ${e} : ${l}.test(${i}))`;return n._`${l} && ${l} !== true && ${c} === ${t} && !${r}`}()))}():function(){const o=d.formats[s];if(!o)return void function(){if(!1!==u.strictSchema)throw new Error(e());function e(){return`unknown format "${s}" ignored in schema at path "${l}"`}d.logger.warn(e())}();if(!0===o)return;const[a,c,f]=function(e){const t=e instanceof RegExp?(0,n.regexpCode)(e):u.code.formats?n._`${u.code.formats}${(0,n.getProperty)(s)}`:void 0,i=r.scopeValue("formats",{key:s,ref:e,code:t});return"object"!=typeof e||e instanceof RegExp?["string",e,i]:[e.type||"string",e.validate,n._`${i}.validate`]}(o);a===t&&e.pass(function(){if("object"==typeof o&&!(o instanceof RegExp)&&o.async){if(!h.$async)throw new Error("async format in sync schema");return n._`await ${f}(${i})`}return"function"==typeof c?n._`${f}(${i})`:n._`${f}.test(${i})`}())}())}};t.default=i},9502:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=[r(9651).default];t.default=n},6167:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.contentVocabulary=t.metadataVocabulary=void 0,t.metadataVocabulary=["title","description","default","deprecated","readOnly","writeOnly","examples"],t.contentVocabulary=["contentMediaType","contentEncoding","contentSchema"]},4693:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(3487),i=r(6776),o=r(3510),s={keyword:"const",$data:!0,error:{message:"must be equal to constant",params:({schemaCode:e})=>n._`{allowedValue: ${e}}`},code(e){const{gen:t,data:r,$data:s,schemaCode:a,schema:c}=e;s||c&&"object"==typeof c?e.fail$data(n._`!${(0,i.useFunc)(t,o.default)}(${r}, ${a})`):e.fail(n._`${c} !== ${r}`)}};t.default=s},966:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(3487),i=r(6776),o=r(3510),s={keyword:"enum",schemaType:"array",$data:!0,error:{message:"must be equal to one of the allowed values",params:({schemaCode:e})=>n._`{allowedValues: ${e}}`},code(e){const{gen:t,data:r,$data:s,schema:a,schemaCode:c,it:u}=e;if(!s&&0===a.length)throw new Error("enum must have non-empty array");const l=a.length>=u.opts.loopEnum;let h;const d=()=>null!=h?h:h=(0,i.useFunc)(t,o.default);let f;if(l||s)f=t.let("valid"),e.block$data(f,(function(){t.assign(f,!1),t.forOf("v",c,(e=>t.if(n._`${d()}(${r}, ${e})`,(()=>t.assign(f,!0).break()))))}));else{if(!Array.isArray(a))throw new Error("ajv implementation error");const e=t.const("vSchema",c);f=(0,n.or)(...a.map(((t,i)=>function(e,t){const i=a[t];return"object"==typeof i&&null!==i?n._`${d()}(${r}, ${e}[${t}])`:n._`${r} === ${i}`}(e,i))))}e.pass(f)}};t.default=s},2649:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(3983),i=r(430),o=r(3229),s=r(4336),a=r(498),c=r(3301),u=r(1687),l=r(2958),h=r(4693),d=r(966),f=[n.default,i.default,o.default,s.default,a.default,c.default,u.default,l.default,{keyword:"type",schemaType:["string","array"]},{keyword:"nullable",schemaType:"boolean"},h.default,d.default];t.default=f},1687:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(3487),i={keyword:["maxItems","minItems"],type:"array",schemaType:"number",$data:!0,error:{message({keyword:e,schemaCode:t}){const r="maxItems"===e?"more":"fewer";return n.str`must NOT have ${r} than ${t} items`},params:({schemaCode:e})=>n._`{limit: ${e}}`},code(e){const{keyword:t,data:r,schemaCode:i}=e,o="maxItems"===t?n.operators.GT:n.operators.LT;e.fail$data(n._`${r}.length ${o} ${i}`)}};t.default=i},3229:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(3487),i=r(6776),o=r(4499),s={keyword:["maxLength","minLength"],type:"string",schemaType:"number",$data:!0,error:{message({keyword:e,schemaCode:t}){const r="maxLength"===e?"more":"fewer";return n.str`must NOT have ${r} than ${t} characters`},params:({schemaCode:e})=>n._`{limit: ${e}}`},code(e){const{keyword:t,data:r,schemaCode:s,it:a}=e,c="maxLength"===t?n.operators.GT:n.operators.LT,u=!1===a.opts.unicode?n._`${r}.length`:n._`${(0,i.useFunc)(e.gen,o.default)}(${r})`;e.fail$data(n._`${u} ${c} ${s}`)}};t.default=s},3983:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(3487),i=n.operators,o={maximum:{okStr:"<=",ok:i.LTE,fail:i.GT},minimum:{okStr:">=",ok:i.GTE,fail:i.LT},exclusiveMaximum:{okStr:"<",ok:i.LT,fail:i.GTE},exclusiveMinimum:{okStr:">",ok:i.GT,fail:i.LTE}},s={message:({keyword:e,schemaCode:t})=>n.str`must be ${o[e].okStr} ${t}`,params:({keyword:e,schemaCode:t})=>n._`{comparison: ${o[e].okStr}, limit: ${t}}`},a={keyword:Object.keys(o),type:"number",schemaType:"number",$data:!0,error:s,code(e){const{keyword:t,data:r,schemaCode:i}=e;e.fail$data(n._`${r} ${o[t].fail} ${i} || isNaN(${r})`)}};t.default=a},498:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(3487),i={keyword:["maxProperties","minProperties"],type:"object",schemaType:"number",$data:!0,error:{message({keyword:e,schemaCode:t}){const r="maxProperties"===e?"more":"fewer";return n.str`must NOT have ${r} than ${t} properties`},params:({schemaCode:e})=>n._`{limit: ${e}}`},code(e){const{keyword:t,data:r,schemaCode:i}=e,o="maxProperties"===t?n.operators.GT:n.operators.LT;e.fail$data(n._`Object.keys(${r}).length ${o} ${i}`)}};t.default=i},430:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(3487),i={keyword:"multipleOf",type:"number",schemaType:"number",$data:!0,error:{message:({schemaCode:e})=>n.str`must be multiple of ${e}`,params:({schemaCode:e})=>n._`{multipleOf: ${e}}`},code(e){const{gen:t,data:r,schemaCode:i,it:o}=e,s=o.opts.multipleOfPrecision,a=t.let("res"),c=s?n._`Math.abs(Math.round(${a}) - ${a}) > 1e-${s}`:n._`${a} !== parseInt(${a})`;e.fail$data(n._`(${i} === 0 || (${a} = ${r}/${i}, ${c}))`)}};t.default=i},4336:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(412),i=r(3487),o={keyword:"pattern",type:"string",schemaType:"string",$data:!0,error:{message:({schemaCode:e})=>i.str`must match pattern "${e}"`,params:({schemaCode:e})=>i._`{pattern: ${e}}`},code(e){const{data:t,$data:r,schema:o,schemaCode:s,it:a}=e,c=a.opts.unicodeRegExp?"u":"",u=r?i._`(new RegExp(${s}, ${c}))`:(0,n.usePattern)(e,o);e.fail$data(i._`!${u}.test(${t})`)}};t.default=o},3301:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(412),i=r(3487),o=r(6776),s={keyword:"required",type:"object",schemaType:"array",$data:!0,error:{message:({params:{missingProperty:e}})=>i.str`must have required property '${e}'`,params:({params:{missingProperty:e}})=>i._`{missingProperty: ${e}}`},code(e){const{gen:t,schema:r,schemaCode:s,data:a,$data:c,it:u}=e,{opts:l}=u;if(!c&&0===r.length)return;const h=r.length>=l.loopRequired;if(u.allErrors?function(){if(h||c)e.block$data(i.nil,d);else for(const t of r)(0,n.checkReportMissingProp)(e,t)}():function(){const o=t.let("missing");if(h||c){const r=t.let("valid",!0);e.block$data(r,(()=>function(r,o){e.setParams({missingProperty:r}),t.forOf(r,s,(()=>{t.assign(o,(0,n.propertyInData)(t,a,r,l.ownProperties)),t.if((0,i.not)(o),(()=>{e.error(),t.break()}))}),i.nil)}(o,r))),e.ok(r)}else t.if((0,n.checkMissingProp)(e,r,o)),(0,n.reportMissingProp)(e,o),t.else()}(),l.strictRequired){const t=e.parentSchema.properties,{definedProperties:n}=e.it;for(const e of r)if(void 0===(null==t?void 0:t[e])&&!n.has(e)){const t=`required property "${e}" is not defined at "${u.schemaEnv.baseId+u.errSchemaPath}" (strictRequired)`;(0,o.checkStrictMode)(u,t,u.opts.strictRequired)}}function d(){t.forOf("prop",s,(r=>{e.setParams({missingProperty:r}),t.if((0,n.noPropertyInData)(t,a,r,l.ownProperties),(()=>e.error()))}))}}};t.default=s},2958:(e,t,r)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=r(453),i=r(3487),o=r(6776),s=r(3510),a={keyword:"uniqueItems",type:"array",schemaType:"boolean",$data:!0,error:{message:({params:{i:e,j:t}})=>i.str`must NOT have duplicate items (items ## ${t} and ${e} are identical)`,params:({params:{i:e,j:t}})=>i._`{i: ${e}, j: ${t}}`},code(e){const{gen:t,data:r,$data:a,schema:c,parentSchema:u,schemaCode:l,it:h}=e;if(!a&&!c)return;const d=t.let("valid"),f=u.items?(0,n.getSchemaTypes)(u.items):[];function p(o,s){const a=t.name("item"),c=(0,n.checkDataTypes)(f,a,h.opts.strictNumbers,n.DataType.Wrong),u=t.const("indices",i._`{}`);t.for(i._`;${o}--;`,(()=>{t.let(a,i._`${r}[${o}]`),t.if(c,i._`continue`),f.length>1&&t.if(i._`typeof ${a} == "string"`,i._`${a} += "_"`),t.if(i._`typeof ${u}[${a}] == "number"`,(()=>{t.assign(s,i._`${u}[${a}]`),e.error(),t.assign(d,!1).break()})).code(i._`${u}[${a}] = ${o}`)}))}function m(n,a){const c=(0,o.useFunc)(t,s.default),u=t.name("outer");t.label(u).for(i._`;${n}--;`,(()=>t.for(i._`${a} = ${n}; ${a}--;`,(()=>t.if(i._`${c}(${r}[${n}], ${r}[${a}])`,(()=>{e.error(),t.assign(d,!1).break(u)}))))))}e.block$data(d,(function(){const n=t.let("i",i._`${r}.length`),o=t.let("j");e.setParams({i:n,j:o}),t.assign(d,!0),t.if(i._`${n} > 1`,(()=>(f.length>0&&!f.some((e=>"object"===e||"array"===e))?p:m)(n,o)))}),i._`${l} === false`),e.ok(d)}};t.default=a},9742:(e,t)=>{"use strict";t.byteLength=function(e){var t=a(e),r=t[0],n=t[1];return 3*(r+n)/4-n},t.toByteArray=function(e){var t,r,o=a(e),s=o[0],c=o[1],u=new i(function(e,t,r){return 3*(t+r)/4-r}(0,s,c)),l=0,h=c>0?s-4:s;for(r=0;r<h;r+=4)t=n[e.charCodeAt(r)]<<18|n[e.charCodeAt(r+1)]<<12|n[e.charCodeAt(r+2)]<<6|n[e.charCodeAt(r+3)],u[l++]=t>>16&255,u[l++]=t>>8&255,u[l++]=255&t;return 2===c&&(t=n[e.charCodeAt(r)]<<2|n[e.charCodeAt(r+1)]>>4,u[l++]=255&t),1===c&&(t=n[e.charCodeAt(r)]<<10|n[e.charCodeAt(r+1)]<<4|n[e.charCodeAt(r+2)]>>2,u[l++]=t>>8&255,u[l++]=255&t),u},t.fromByteArray=function(e){for(var t,n=e.length,i=n%3,o=[],s=16383,a=0,u=n-i;a<u;a+=s)o.push(c(e,a,a+s>u?u:a+s));return 1===i?(t=e[n-1],o.push(r[t>>2]+r[t<<4&63]+"==")):2===i&&(t=(e[n-2]<<8)+e[n-1],o.push(r[t>>10]+r[t>>4&63]+r[t<<2&63]+"=")),o.join("")};for(var r=[],n=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0;s<64;++s)r[s]=o[s],n[o.charCodeAt(s)]=s;function a(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=e.indexOf("=");return-1===r&&(r=t),[r,r===t?0:4-r%4]}function c(e,t,n){for(var i,o,s=[],a=t;a<n;a+=3)i=(e[a]<<16&16711680)+(e[a+1]<<8&65280)+(255&e[a+2]),s.push(r[(o=i)>>18&63]+r[o>>12&63]+r[o>>6&63]+r[63&o]);return s.join("")}n["-".charCodeAt(0)]=62,n["_".charCodeAt(0)]=63},8764:(e,t,r)=>{"use strict";const n=r(9742),i=r(645),o="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;t.Buffer=c,t.SlowBuffer=function(e){return+e!=e&&(e=0),c.alloc(+e)},t.INSPECT_MAX_BYTES=50;const s=2147483647;function a(e){if(e>s)throw new RangeError('The value "'+e+'" is invalid for option "size"');const t=new Uint8Array(e);return Object.setPrototypeOf(t,c.prototype),t}function c(e,t,r){if("number"==typeof e){if("string"==typeof t)throw new TypeError('The "string" argument must be of type string. Received type number');return h(e)}return u(e,t,r)}function u(e,t,r){if("string"==typeof e)return function(e,t){if("string"==typeof t&&""!==t||(t="utf8"),!c.isEncoding(t))throw new TypeError("Unknown encoding: "+t);const r=0|m(e,t);let n=a(r);const i=n.write(e,t);return i!==r&&(n=n.slice(0,i)),n}(e,t);if(ArrayBuffer.isView(e))return function(e){if(G(e,Uint8Array)){const t=new Uint8Array(e);return f(t.buffer,t.byteOffset,t.byteLength)}return d(e)}(e);if(null==e)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e);if(G(e,ArrayBuffer)||e&&G(e.buffer,ArrayBuffer))return f(e,t,r);if("undefined"!=typeof SharedArrayBuffer&&(G(e,SharedArrayBuffer)||e&&G(e.buffer,SharedArrayBuffer)))return f(e,t,r);if("number"==typeof e)throw new TypeError('The "value" argument must not be of type number. Received type number');const n=e.valueOf&&e.valueOf();if(null!=n&&n!==e)return c.from(n,t,r);const i=function(e){if(c.isBuffer(e)){const t=0|p(e.length),r=a(t);return 0===r.length||e.copy(r,0,0,t),r}return void 0!==e.length?"number"!=typeof e.length||J(e.length)?a(0):d(e):"Buffer"===e.type&&Array.isArray(e.data)?d(e.data):void 0}(e);if(i)return i;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof e[Symbol.toPrimitive])return c.from(e[Symbol.toPrimitive]("string"),t,r);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof e)}function l(e){if("number"!=typeof e)throw new TypeError('"size" argument must be of type number');if(e<0)throw new RangeError('The value "'+e+'" is invalid for option "size"')}function h(e){return l(e),a(e<0?0:0|p(e))}function d(e){const t=e.length<0?0:0|p(e.length),r=a(t);for(let n=0;n<t;n+=1)r[n]=255&e[n];return r}function f(e,t,r){if(t<0||e.byteLength<t)throw new RangeError('"offset" is outside of buffer bounds');if(e.byteLength<t+(r||0))throw new RangeError('"length" is outside of buffer bounds');let n;return n=void 0===t&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,t):new Uint8Array(e,t,r),Object.setPrototypeOf(n,c.prototype),n}function p(e){if(e>=s)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+s.toString(16)+" bytes");return 0|e}function m(e,t){if(c.isBuffer(e))return e.length;if(ArrayBuffer.isView(e)||G(e,ArrayBuffer))return e.byteLength;if("string"!=typeof e)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof e);const r=e.length,n=arguments.length>2&&!0===arguments[2];if(!n&&0===r)return 0;let i=!1;for(;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":return z(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return W(e).length;default:if(i)return n?-1:z(e).length;t=(""+t).toLowerCase(),i=!0}}function y(e,t,r){let n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return $(this,t,r);case"utf8":case"utf-8":return x(this,t,r);case"ascii":return P(this,t,r);case"latin1":case"binary":return R(this,t,r);case"base64":return k(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return D(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}function v(e,t,r){const n=e[t];e[t]=e[r],e[r]=n}function g(e,t,r,n,i){if(0===e.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),J(r=+r)&&(r=i?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(i)return-1;r=e.length-1}else if(r<0){if(!i)return-1;r=0}if("string"==typeof t&&(t=c.from(t,n)),c.isBuffer(t))return 0===t.length?-1:b(e,t,r,n,i);if("number"==typeof t)return t&=255,"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):b(e,[t],r,n,i);throw new TypeError("val must be string, number or Buffer")}function b(e,t,r,n,i){let o,s=1,a=e.length,c=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return-1;s=2,a/=2,c/=2,r/=2}function u(e,t){return 1===s?e[t]:e.readUInt16BE(t*s)}if(i){let n=-1;for(o=r;o<a;o++)if(u(e,o)===u(t,-1===n?0:o-n)){if(-1===n&&(n=o),o-n+1===c)return n*s}else-1!==n&&(o-=o-n),n=-1}else for(r+c>a&&(r=a-c),o=r;o>=0;o--){let r=!0;for(let n=0;n<c;n++)if(u(e,o+n)!==u(t,n)){r=!1;break}if(r)return o}return-1}function w(e,t,r,n){r=Number(r)||0;const i=e.length-r;n?(n=Number(n))>i&&(n=i):n=i;const o=t.length;let s;for(n>o/2&&(n=o/2),s=0;s<n;++s){const n=parseInt(t.substr(2*s,2),16);if(J(n))return s;e[r+s]=n}return s}function _(e,t,r,n){return Q(z(t,e.length-r),e,r,n)}function E(e,t,r,n){return Q(function(e){const t=[];for(let r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}(t),e,r,n)}function S(e,t,r,n){return Q(W(t),e,r,n)}function C(e,t,r,n){return Q(function(e,t){let r,n,i;const o=[];for(let s=0;s<e.length&&!((t-=2)<0);++s)r=e.charCodeAt(s),n=r>>8,i=r%256,o.push(i),o.push(n);return o}(t,e.length-r),e,r,n)}function k(e,t,r){return 0===t&&r===e.length?n.fromByteArray(e):n.fromByteArray(e.slice(t,r))}function x(e,t,r){r=Math.min(e.length,r);const n=[];let i=t;for(;i<r;){const t=e[i];let o=null,s=t>239?4:t>223?3:t>191?2:1;if(i+s<=r){let r,n,a,c;switch(s){case 1:t<128&&(o=t);break;case 2:r=e[i+1],128==(192&r)&&(c=(31&t)<<6|63&r,c>127&&(o=c));break;case 3:r=e[i+1],n=e[i+2],128==(192&r)&&128==(192&n)&&(c=(15&t)<<12|(63&r)<<6|63&n,c>2047&&(c<55296||c>57343)&&(o=c));break;case 4:r=e[i+1],n=e[i+2],a=e[i+3],128==(192&r)&&128==(192&n)&&128==(192&a)&&(c=(15&t)<<18|(63&r)<<12|(63&n)<<6|63&a,c>65535&&c<1114112&&(o=c))}}null===o?(o=65533,s=1):o>65535&&(o-=65536,n.push(o>>>10&1023|55296),o=56320|1023&o),n.push(o),i+=s}return function(e){const t=e.length;if(t<=O)return String.fromCharCode.apply(String,e);let r="",n=0;for(;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=O));return r}(n)}t.kMaxLength=s,c.TYPED_ARRAY_SUPPORT=function(){try{const e=new Uint8Array(1),t={foo:function(){return 42}};return Object.setPrototypeOf(t,Uint8Array.prototype),Object.setPrototypeOf(e,t),42===e.foo()}catch(e){return!1}}(),c.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(c.prototype,"parent",{enumerable:!0,get:function(){if(c.isBuffer(this))return this.buffer}}),Object.defineProperty(c.prototype,"offset",{enumerable:!0,get:function(){if(c.isBuffer(this))return this.byteOffset}}),c.poolSize=8192,c.from=function(e,t,r){return u(e,t,r)},Object.setPrototypeOf(c.prototype,Uint8Array.prototype),Object.setPrototypeOf(c,Uint8Array),c.alloc=function(e,t,r){return function(e,t,r){return l(e),e<=0?a(e):void 0!==t?"string"==typeof r?a(e).fill(t,r):a(e).fill(t):a(e)}(e,t,r)},c.allocUnsafe=function(e){return h(e)},c.allocUnsafeSlow=function(e){return h(e)},c.isBuffer=function(e){return null!=e&&!0===e._isBuffer&&e!==c.prototype},c.compare=function(e,t){if(G(e,Uint8Array)&&(e=c.from(e,e.offset,e.byteLength)),G(t,Uint8Array)&&(t=c.from(t,t.offset,t.byteLength)),!c.isBuffer(e)||!c.isBuffer(t))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(e===t)return 0;let r=e.length,n=t.length;for(let i=0,o=Math.min(r,n);i<o;++i)if(e[i]!==t[i]){r=e[i],n=t[i];break}return r<n?-1:n<r?1:0},c.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},c.concat=function(e,t){if(!Array.isArray(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return c.alloc(0);let r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;const n=c.allocUnsafe(t);let i=0;for(r=0;r<e.length;++r){let t=e[r];if(G(t,Uint8Array))i+t.length>n.length?(c.isBuffer(t)||(t=c.from(t)),t.copy(n,i)):Uint8Array.prototype.set.call(n,t,i);else{if(!c.isBuffer(t))throw new TypeError('"list" argument must be an Array of Buffers');t.copy(n,i)}i+=t.length}return n},c.byteLength=m,c.prototype._isBuffer=!0,c.prototype.swap16=function(){const e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let t=0;t<e;t+=2)v(this,t,t+1);return this},c.prototype.swap32=function(){const e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let t=0;t<e;t+=4)v(this,t,t+3),v(this,t+1,t+2);return this},c.prototype.swap64=function(){const e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let t=0;t<e;t+=8)v(this,t,t+7),v(this,t+1,t+6),v(this,t+2,t+5),v(this,t+3,t+4);return this},c.prototype.toString=function(){const e=this.length;return 0===e?"":0===arguments.length?x(this,0,e):y.apply(this,arguments)},c.prototype.toLocaleString=c.prototype.toString,c.prototype.equals=function(e){if(!c.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===c.compare(this,e)},c.prototype.inspect=function(){let e="";const r=t.INSPECT_MAX_BYTES;return e=this.toString("hex",0,r).replace(/(.{2})/g,"$1 ").trim(),this.length>r&&(e+=" ... "),"<Buffer "+e+">"},o&&(c.prototype[o]=c.prototype.inspect),c.prototype.compare=function(e,t,r,n,i){if(G(e,Uint8Array)&&(e=c.from(e,e.offset,e.byteLength)),!c.isBuffer(e))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof e);if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===i&&(i=this.length),t<0||r>e.length||n<0||i>this.length)throw new RangeError("out of range index");if(n>=i&&t>=r)return 0;if(n>=i)return-1;if(t>=r)return 1;if(this===e)return 0;let o=(i>>>=0)-(n>>>=0),s=(r>>>=0)-(t>>>=0);const a=Math.min(o,s),u=this.slice(n,i),l=e.slice(t,r);for(let e=0;e<a;++e)if(u[e]!==l[e]){o=u[e],s=l[e];break}return o<s?-1:s<o?1:0},c.prototype.includes=function(e,t,r){return-1!==this.indexOf(e,t,r)},c.prototype.indexOf=function(e,t,r){return g(this,e,t,r,!0)},c.prototype.lastIndexOf=function(e,t,r){return g(this,e,t,r,!1)},c.prototype.write=function(e,t,r,n){if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t>>>=0,isFinite(r)?(r>>>=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}const i=this.length-t;if((void 0===r||r>i)&&(r=i),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");let o=!1;for(;;)switch(n){case"hex":return w(this,e,t,r);case"utf8":case"utf-8":return _(this,e,t,r);case"ascii":case"latin1":case"binary":return E(this,e,t,r);case"base64":return S(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return C(this,e,t,r);default:if(o)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),o=!0}},c.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};const O=4096;function P(e,t,r){let n="";r=Math.min(e.length,r);for(let i=t;i<r;++i)n+=String.fromCharCode(127&e[i]);return n}function R(e,t,r){let n="";r=Math.min(e.length,r);for(let i=t;i<r;++i)n+=String.fromCharCode(e[i]);return n}function $(e,t,r){const n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);let i="";for(let n=t;n<r;++n)i+=Y[e[n]];return i}function D(e,t,r){const n=e.slice(t,r);let i="";for(let e=0;e<n.length-1;e+=2)i+=String.fromCharCode(n[e]+256*n[e+1]);return i}function I(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function j(e,t,r,n,i,o){if(!c.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>i||t<o)throw new RangeError('"value" argument is out of bounds');if(r+n>e.length)throw new RangeError("Index out of range")}function T(e,t,r,n,i){U(t,n,i,e,r,7);let o=Number(t&BigInt(4294967295));e[r++]=o,o>>=8,e[r++]=o,o>>=8,e[r++]=o,o>>=8,e[r++]=o;let s=Number(t>>BigInt(32)&BigInt(4294967295));return e[r++]=s,s>>=8,e[r++]=s,s>>=8,e[r++]=s,s>>=8,e[r++]=s,r}function A(e,t,r,n,i){U(t,n,i,e,r,7);let o=Number(t&BigInt(4294967295));e[r+7]=o,o>>=8,e[r+6]=o,o>>=8,e[r+5]=o,o>>=8,e[r+4]=o;let s=Number(t>>BigInt(32)&BigInt(4294967295));return e[r+3]=s,s>>=8,e[r+2]=s,s>>=8,e[r+1]=s,s>>=8,e[r]=s,r+8}function N(e,t,r,n,i,o){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function M(e,t,r,n,o){return t=+t,r>>>=0,o||N(e,0,r,4),i.write(e,t,r,n,23,4),r+4}function L(e,t,r,n,o){return t=+t,r>>>=0,o||N(e,0,r,8),i.write(e,t,r,n,52,8),r+8}c.prototype.slice=function(e,t){const r=this.length;(e=~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),(t=void 0===t?r:~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e);const n=this.subarray(e,t);return Object.setPrototypeOf(n,c.prototype),n},c.prototype.readUintLE=c.prototype.readUIntLE=function(e,t,r){e>>>=0,t>>>=0,r||I(e,t,this.length);let n=this[e],i=1,o=0;for(;++o<t&&(i*=256);)n+=this[e+o]*i;return n},c.prototype.readUintBE=c.prototype.readUIntBE=function(e,t,r){e>>>=0,t>>>=0,r||I(e,t,this.length);let n=this[e+--t],i=1;for(;t>0&&(i*=256);)n+=this[e+--t]*i;return n},c.prototype.readUint8=c.prototype.readUInt8=function(e,t){return e>>>=0,t||I(e,1,this.length),this[e]},c.prototype.readUint16LE=c.prototype.readUInt16LE=function(e,t){return e>>>=0,t||I(e,2,this.length),this[e]|this[e+1]<<8},c.prototype.readUint16BE=c.prototype.readUInt16BE=function(e,t){return e>>>=0,t||I(e,2,this.length),this[e]<<8|this[e+1]},c.prototype.readUint32LE=c.prototype.readUInt32LE=function(e,t){return e>>>=0,t||I(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},c.prototype.readUint32BE=c.prototype.readUInt32BE=function(e,t){return e>>>=0,t||I(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},c.prototype.readBigUInt64LE=X((function(e){K(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||V(e,this.length-8);const n=t+256*this[++e]+65536*this[++e]+this[++e]*2**24,i=this[++e]+256*this[++e]+65536*this[++e]+r*2**24;return BigInt(n)+(BigInt(i)<<BigInt(32))})),c.prototype.readBigUInt64BE=X((function(e){K(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||V(e,this.length-8);const n=t*2**24+65536*this[++e]+256*this[++e]+this[++e],i=this[++e]*2**24+65536*this[++e]+256*this[++e]+r;return(BigInt(n)<<BigInt(32))+BigInt(i)})),c.prototype.readIntLE=function(e,t,r){e>>>=0,t>>>=0,r||I(e,t,this.length);let n=this[e],i=1,o=0;for(;++o<t&&(i*=256);)n+=this[e+o]*i;return i*=128,n>=i&&(n-=Math.pow(2,8*t)),n},c.prototype.readIntBE=function(e,t,r){e>>>=0,t>>>=0,r||I(e,t,this.length);let n=t,i=1,o=this[e+--n];for(;n>0&&(i*=256);)o+=this[e+--n]*i;return i*=128,o>=i&&(o-=Math.pow(2,8*t)),o},c.prototype.readInt8=function(e,t){return e>>>=0,t||I(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},c.prototype.readInt16LE=function(e,t){e>>>=0,t||I(e,2,this.length);const r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},c.prototype.readInt16BE=function(e,t){e>>>=0,t||I(e,2,this.length);const r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},c.prototype.readInt32LE=function(e,t){return e>>>=0,t||I(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},c.prototype.readInt32BE=function(e,t){return e>>>=0,t||I(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},c.prototype.readBigInt64LE=X((function(e){K(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||V(e,this.length-8);const n=this[e+4]+256*this[e+5]+65536*this[e+6]+(r<<24);return(BigInt(n)<<BigInt(32))+BigInt(t+256*this[++e]+65536*this[++e]+this[++e]*2**24)})),c.prototype.readBigInt64BE=X((function(e){K(e>>>=0,"offset");const t=this[e],r=this[e+7];void 0!==t&&void 0!==r||V(e,this.length-8);const n=(t<<24)+65536*this[++e]+256*this[++e]+this[++e];return(BigInt(n)<<BigInt(32))+BigInt(this[++e]*2**24+65536*this[++e]+256*this[++e]+r)})),c.prototype.readFloatLE=function(e,t){return e>>>=0,t||I(e,4,this.length),i.read(this,e,!0,23,4)},c.prototype.readFloatBE=function(e,t){return e>>>=0,t||I(e,4,this.length),i.read(this,e,!1,23,4)},c.prototype.readDoubleLE=function(e,t){return e>>>=0,t||I(e,8,this.length),i.read(this,e,!0,52,8)},c.prototype.readDoubleBE=function(e,t){return e>>>=0,t||I(e,8,this.length),i.read(this,e,!1,52,8)},c.prototype.writeUintLE=c.prototype.writeUIntLE=function(e,t,r,n){e=+e,t>>>=0,r>>>=0,n||j(this,e,t,r,Math.pow(2,8*r)-1,0);let i=1,o=0;for(this[t]=255&e;++o<r&&(i*=256);)this[t+o]=e/i&255;return t+r},c.prototype.writeUintBE=c.prototype.writeUIntBE=function(e,t,r,n){e=+e,t>>>=0,r>>>=0,n||j(this,e,t,r,Math.pow(2,8*r)-1,0);let i=r-1,o=1;for(this[t+i]=255&e;--i>=0&&(o*=256);)this[t+i]=e/o&255;return t+r},c.prototype.writeUint8=c.prototype.writeUInt8=function(e,t,r){return e=+e,t>>>=0,r||j(this,e,t,1,255,0),this[t]=255&e,t+1},c.prototype.writeUint16LE=c.prototype.writeUInt16LE=function(e,t,r){return e=+e,t>>>=0,r||j(this,e,t,2,65535,0),this[t]=255&e,this[t+1]=e>>>8,t+2},c.prototype.writeUint16BE=c.prototype.writeUInt16BE=function(e,t,r){return e=+e,t>>>=0,r||j(this,e,t,2,65535,0),this[t]=e>>>8,this[t+1]=255&e,t+2},c.prototype.writeUint32LE=c.prototype.writeUInt32LE=function(e,t,r){return e=+e,t>>>=0,r||j(this,e,t,4,4294967295,0),this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e,t+4},c.prototype.writeUint32BE=c.prototype.writeUInt32BE=function(e,t,r){return e=+e,t>>>=0,r||j(this,e,t,4,4294967295,0),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},c.prototype.writeBigUInt64LE=X((function(e,t=0){return T(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),c.prototype.writeBigUInt64BE=X((function(e,t=0){return A(this,e,t,BigInt(0),BigInt("0xffffffffffffffff"))})),c.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t>>>=0,!n){const n=Math.pow(2,8*r-1);j(this,e,t,r,n-1,-n)}let i=0,o=1,s=0;for(this[t]=255&e;++i<r&&(o*=256);)e<0&&0===s&&0!==this[t+i-1]&&(s=1),this[t+i]=(e/o>>0)-s&255;return t+r},c.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t>>>=0,!n){const n=Math.pow(2,8*r-1);j(this,e,t,r,n-1,-n)}let i=r-1,o=1,s=0;for(this[t+i]=255&e;--i>=0&&(o*=256);)e<0&&0===s&&0!==this[t+i+1]&&(s=1),this[t+i]=(e/o>>0)-s&255;return t+r},c.prototype.writeInt8=function(e,t,r){return e=+e,t>>>=0,r||j(this,e,t,1,127,-128),e<0&&(e=255+e+1),this[t]=255&e,t+1},c.prototype.writeInt16LE=function(e,t,r){return e=+e,t>>>=0,r||j(this,e,t,2,32767,-32768),this[t]=255&e,this[t+1]=e>>>8,t+2},c.prototype.writeInt16BE=function(e,t,r){return e=+e,t>>>=0,r||j(this,e,t,2,32767,-32768),this[t]=e>>>8,this[t+1]=255&e,t+2},c.prototype.writeInt32LE=function(e,t,r){return e=+e,t>>>=0,r||j(this,e,t,4,2147483647,-2147483648),this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24,t+4},c.prototype.writeInt32BE=function(e,t,r){return e=+e,t>>>=0,r||j(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e,t+4},c.prototype.writeBigInt64LE=X((function(e,t=0){return T(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),c.prototype.writeBigInt64BE=X((function(e,t=0){return A(this,e,t,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),c.prototype.writeFloatLE=function(e,t,r){return M(this,e,t,!0,r)},c.prototype.writeFloatBE=function(e,t,r){return M(this,e,t,!1,r)},c.prototype.writeDoubleLE=function(e,t,r){return L(this,e,t,!0,r)},c.prototype.writeDoubleBE=function(e,t,r){return L(this,e,t,!1,r)},c.prototype.copy=function(e,t,r,n){if(!c.isBuffer(e))throw new TypeError("argument should be a Buffer");if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);const i=n-r;return this===e&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(t,r,n):Uint8Array.prototype.set.call(e,this.subarray(r,n),t),i},c.prototype.fill=function(e,t,r,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!c.isEncoding(n))throw new TypeError("Unknown encoding: "+n);if(1===e.length){const t=e.charCodeAt(0);("utf8"===n&&t<128||"latin1"===n)&&(e=t)}}else"number"==typeof e?e&=255:"boolean"==typeof e&&(e=Number(e));if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;let i;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(i=t;i<r;++i)this[i]=e;else{const o=c.isBuffer(e)?e:c.from(e,n),s=o.length;if(0===s)throw new TypeError('The value "'+e+'" is invalid for argument "value"');for(i=0;i<r-t;++i)this[i+t]=o[i%s]}return this};const B={};function F(e,t,r){B[e]=class extends r{constructor(){super(),Object.defineProperty(this,"message",{value:t.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${e}]`,this.stack,delete this.name}get code(){return e}set code(e){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:e,writable:!0})}toString(){return`${this.name} [${e}]: ${this.message}`}}}function q(e){let t="",r=e.length;const n="-"===e[0]?1:0;for(;r>=n+4;r-=3)t=`_${e.slice(r-3,r)}${t}`;return`${e.slice(0,r)}${t}`}function U(e,t,r,n,i,o){if(e>r||e<t){const n="bigint"==typeof t?"n":"";let i;throw i=o>3?0===t||t===BigInt(0)?`>= 0${n} and < 2${n} ** ${8*(o+1)}${n}`:`>= -(2${n} ** ${8*(o+1)-1}${n}) and < 2 ** ${8*(o+1)-1}${n}`:`>= ${t}${n} and <= ${r}${n}`,new B.ERR_OUT_OF_RANGE("value",i,e)}!function(e,t,r){K(t,"offset"),void 0!==e[t]&&void 0!==e[t+r]||V(t,e.length-(r+1))}(n,i,o)}function K(e,t){if("number"!=typeof e)throw new B.ERR_INVALID_ARG_TYPE(t,"number",e)}function V(e,t,r){if(Math.floor(e)!==e)throw K(e,r),new B.ERR_OUT_OF_RANGE(r||"offset","an integer",e);if(t<0)throw new B.ERR_BUFFER_OUT_OF_BOUNDS;throw new B.ERR_OUT_OF_RANGE(r||"offset",`>= ${r?1:0} and <= ${t}`,e)}F("ERR_BUFFER_OUT_OF_BOUNDS",(function(e){return e?`${e} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),F("ERR_INVALID_ARG_TYPE",(function(e,t){return`The "${e}" argument must be of type number. Received type ${typeof t}`}),TypeError),F("ERR_OUT_OF_RANGE",(function(e,t,r){let n=`The value of "${e}" is out of range.`,i=r;return Number.isInteger(r)&&Math.abs(r)>2**32?i=q(String(r)):"bigint"==typeof r&&(i=String(r),(r>BigInt(2)**BigInt(32)||r<-(BigInt(2)**BigInt(32)))&&(i=q(i)),i+="n"),n+=` It must be ${t}. Received ${i}`,n}),RangeError);const H=/[^+/0-9A-Za-z-_]/g;function z(e,t){let r;t=t||1/0;const n=e.length;let i=null;const o=[];for(let s=0;s<n;++s){if(r=e.charCodeAt(s),r>55295&&r<57344){if(!i){if(r>56319){(t-=3)>-1&&o.push(239,191,189);continue}if(s+1===n){(t-=3)>-1&&o.push(239,191,189);continue}i=r;continue}if(r<56320){(t-=3)>-1&&o.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320)}else i&&(t-=3)>-1&&o.push(239,191,189);if(i=null,r<128){if((t-=1)<0)break;o.push(r)}else if(r<2048){if((t-=2)<0)break;o.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;o.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;o.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return o}function W(e){return n.toByteArray(function(e){if((e=(e=e.split("=")[0]).trim().replace(H,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function Q(e,t,r,n){let i;for(i=0;i<n&&!(i+r>=t.length||i>=e.length);++i)t[i+r]=e[i];return i}function G(e,t){return e instanceof t||null!=e&&null!=e.constructor&&null!=e.constructor.name&&e.constructor.name===t.name}function J(e){return e!=e}const Y=function(){const e="0123456789abcdef",t=new Array(256);for(let r=0;r<16;++r){const n=16*r;for(let i=0;i<16;++i)t[n+i]=e[r]+e[i]}return t}();function X(e){return"undefined"==typeof BigInt?Z:e}function Z(){throw new Error("BigInt not supported")}},1227:(e,t,r)=>{var n=r(4155);t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const r="color: "+this.color;t.splice(1,0,r,"color: inherit");let n=0,i=0;t[0].replace(/%[a-zA-Z%]/g,(e=>{"%%"!==e&&(n++,"%c"===e&&(i=n))})),t.splice(i,0,r)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){let e;try{e=t.storage.getItem("debug")}catch(e){}return!e&&void 0!==n&&"env"in n&&(e=n.env.DEBUG),e},t.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))},t.storage=function(){try{return localStorage}catch(e){}}(),t.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.log=console.debug||console.log||(()=>{}),e.exports=r(2447)(t);const{formatters:i}=e.exports;i.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}},2447:(e,t,r)=>{e.exports=function(e){function t(e){let r,i,o,s=null;function a(...e){if(!a.enabled)return;const n=a,i=Number(new Date),o=i-(r||i);n.diff=o,n.prev=r,n.curr=i,r=i,e[0]=t.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let s=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,((r,i)=>{if("%%"===r)return"%";s++;const o=t.formatters[i];if("function"==typeof o){const t=e[s];r=o.call(n,t),e.splice(s,1),s--}return r})),t.formatArgs.call(n,e),(n.log||t.log).apply(n,e)}return a.namespace=e,a.useColors=t.useColors(),a.color=t.selectColor(e),a.extend=n,a.destroy=t.destroy,Object.defineProperty(a,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==s?s:(i!==t.namespaces&&(i=t.namespaces,o=t.enabled(e)),o),set:e=>{s=e}}),"function"==typeof t.init&&t.init(a),a}function n(e,r){const n=t(this.namespace+(void 0===r?":":r)+e);return n.log=this.log,n}function i(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}return t.debug=t,t.default=t,t.coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){const e=[...t.names.map(i),...t.skips.map(i).map((e=>"-"+e))].join(",");return t.enable(""),e},t.enable=function(e){let r;t.save(e),t.namespaces=e,t.names=[],t.skips=[];const n=("string"==typeof e?e:"").split(/[\s,]+/),i=n.length;for(r=0;r<i;r++)n[r]&&("-"===(e=n[r].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.slice(1)+"$")):t.names.push(new RegExp("^"+e+"$")))},t.enabled=function(e){if("*"===e[e.length-1])return!0;let r,n;for(r=0,n=t.skips.length;r<n;r++)if(t.skips[r].test(e))return!1;for(r=0,n=t.names.length;r<n;r++)if(t.names[r].test(e))return!0;return!1},t.humanize=r(7824),t.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(e).forEach((r=>{t[r]=e[r]})),t.names=[],t.skips=[],t.formatters={},t.selectColor=function(e){let r=0;for(let t=0;t<e.length;t++)r=(r<<5)-r+e.charCodeAt(t),r|=0;return t.colors[Math.abs(r)%t.colors.length]},t.enable(t.load()),t}},2114:e=>{"use strict";function t(e,t){for(const r in t)Object.defineProperty(e,r,{value:t[r],enumerable:!0,configurable:!0});return e}e.exports=function(e,r,n){if(!e||"string"==typeof e)throw new TypeError("Please pass an Error to err-code");n||(n={}),"object"==typeof r&&(n=r,r=""),r&&(n.code=r);try{return t(e,n)}catch(r){n.message=e.message,n.stack=e.stack;const i=function(){};return i.prototype=Object.create(Object.getPrototypeOf(e)),t(new i,n)}}},7187:e=>{"use strict";var t,r="object"==typeof Reflect?Reflect:null,n=r&&"function"==typeof r.apply?r.apply:function(e,t,r){return Function.prototype.apply.call(e,t,r)};t=r&&"function"==typeof r.ownKeys?r.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var i=Number.isNaN||function(e){return e!=e};function o(){o.init.call(this)}e.exports=o,e.exports.once=function(e,t){return new Promise((function(r,n){function i(r){e.removeListener(t,o),n(r)}function o(){"function"==typeof e.removeListener&&e.removeListener("error",i),r([].slice.call(arguments))}m(e,t,o,{once:!0}),"error"!==t&&function(e,t,r){"function"==typeof e.on&&m(e,"error",t,{once:!0})}(e,i)}))},o.EventEmitter=o,o.prototype._events=void 0,o.prototype._eventsCount=0,o.prototype._maxListeners=void 0;var s=10;function a(e){if("function"!=typeof e)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof e)}function c(e){return void 0===e._maxListeners?o.defaultMaxListeners:e._maxListeners}function u(e,t,r,n){var i,o,s,u;if(a(r),void 0===(o=e._events)?(o=e._events=Object.create(null),e._eventsCount=0):(void 0!==o.newListener&&(e.emit("newListener",t,r.listener?r.listener:r),o=e._events),s=o[t]),void 0===s)s=o[t]=r,++e._eventsCount;else if("function"==typeof s?s=o[t]=n?[r,s]:[s,r]:n?s.unshift(r):s.push(r),(i=c(e))>0&&s.length>i&&!s.warned){s.warned=!0;var l=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");l.name="MaxListenersExceededWarning",l.emitter=e,l.type=t,l.count=s.length,u=l,console&&console.warn&&console.warn(u)}return e}function l(){if(!this.fired)return this.target.removeListener(this.type,this.wrapFn),this.fired=!0,0===arguments.length?this.listener.call(this.target):this.listener.apply(this.target,arguments)}function h(e,t,r){var n={fired:!1,wrapFn:void 0,target:e,type:t,listener:r},i=l.bind(n);return i.listener=r,n.wrapFn=i,i}function d(e,t,r){var n=e._events;if(void 0===n)return[];var i=n[t];return void 0===i?[]:"function"==typeof i?r?[i.listener||i]:[i]:r?function(e){for(var t=new Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}(i):p(i,i.length)}function f(e){var t=this._events;if(void 0!==t){var r=t[e];if("function"==typeof r)return 1;if(void 0!==r)return r.length}return 0}function p(e,t){for(var r=new Array(t),n=0;n<t;++n)r[n]=e[n];return r}function m(e,t,r,n){if("function"==typeof e.on)n.once?e.once(t,r):e.on(t,r);else{if("function"!=typeof e.addEventListener)throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type '+typeof e);e.addEventListener(t,(function i(o){n.once&&e.removeEventListener(t,i),r(o)}))}}Object.defineProperty(o,"defaultMaxListeners",{enumerable:!0,get:function(){return s},set:function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");s=e}}),o.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},o.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||i(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},o.prototype.getMaxListeners=function(){return c(this)},o.prototype.emit=function(e){for(var t=[],r=1;r<arguments.length;r++)t.push(arguments[r]);var i="error"===e,o=this._events;if(void 0!==o)i=i&&void 0===o.error;else if(!i)return!1;if(i){var s;if(t.length>0&&(s=t[0]),s instanceof Error)throw s;var a=new Error("Unhandled error."+(s?" ("+s.message+")":""));throw a.context=s,a}var c=o[e];if(void 0===c)return!1;if("function"==typeof c)n(c,this,t);else{var u=c.length,l=p(c,u);for(r=0;r<u;++r)n(l[r],this,t)}return!0},o.prototype.addListener=function(e,t){return u(this,e,t,!1)},o.prototype.on=o.prototype.addListener,o.prototype.prependListener=function(e,t){return u(this,e,t,!0)},o.prototype.once=function(e,t){return a(t),this.on(e,h(this,e,t)),this},o.prototype.prependOnceListener=function(e,t){return a(t),this.prependListener(e,h(this,e,t)),this},o.prototype.removeListener=function(e,t){var r,n,i,o,s;if(a(t),void 0===(n=this._events))return this;if(void 0===(r=n[e]))return this;if(r===t||r.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete n[e],n.removeListener&&this.emit("removeListener",e,r.listener||t));else if("function"!=typeof r){for(i=-1,o=r.length-1;o>=0;o--)if(r[o]===t||r[o].listener===t){s=r[o].listener,i=o;break}if(i<0)return this;0===i?r.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(r,i),1===r.length&&(n[e]=r[0]),void 0!==n.removeListener&&this.emit("removeListener",e,s||t)}return this},o.prototype.off=o.prototype.removeListener,o.prototype.removeAllListeners=function(e){var t,r,n;if(void 0===(r=this._events))return this;if(void 0===r.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==r[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete r[e]),this;if(0===arguments.length){var i,o=Object.keys(r);for(n=0;n<o.length;++n)"removeListener"!==(i=o[n])&&this.removeAllListeners(i);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=r[e]))this.removeListener(e,t);else if(void 0!==t)for(n=t.length-1;n>=0;n--)this.removeListener(e,t[n]);return this},o.prototype.listeners=function(e){return d(this,e,!0)},o.prototype.rawListeners=function(e){return d(this,e,!1)},o.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):f.call(e,t)},o.prototype.listenerCount=f,o.prototype.eventNames=function(){return this._eventsCount>0?t(this._events):[]}},4063:e=>{"use strict";e.exports=function e(t,r){if(t===r)return!0;if(t&&r&&"object"==typeof t&&"object"==typeof r){if(t.constructor!==r.constructor)return!1;var n,i,o;if(Array.isArray(t)){if((n=t.length)!=r.length)return!1;for(i=n;0!=i--;)if(!e(t[i],r[i]))return!1;return!0}if(t.constructor===RegExp)return t.source===r.source&&t.flags===r.flags;if(t.valueOf!==Object.prototype.valueOf)return t.valueOf()===r.valueOf();if(t.toString!==Object.prototype.toString)return t.toString()===r.toString();if((n=(o=Object.keys(t)).length)!==Object.keys(r).length)return!1;for(i=n;0!=i--;)if(!Object.prototype.hasOwnProperty.call(r,o[i]))return!1;for(i=n;0!=i--;){var s=o[i];if(!e(t[s],r[s]))return!1}return!0}return t!=t&&r!=r}},5177:e=>{e.exports=function(){if("undefined"==typeof globalThis)return null;var e={RTCPeerConnection:globalThis.RTCPeerConnection||globalThis.mozRTCPeerConnection||globalThis.webkitRTCPeerConnection,RTCSessionDescription:globalThis.RTCSessionDescription||globalThis.mozRTCSessionDescription||globalThis.webkitRTCSessionDescription,RTCIceCandidate:globalThis.RTCIceCandidate||globalThis.mozRTCIceCandidate||globalThis.webkitRTCIceCandidate};return e.RTCPeerConnection?e:null}},645:(e,t)=>{t.read=function(e,t,r,n,i){var o,s,a=8*i-n-1,c=(1<<a)-1,u=c>>1,l=-7,h=r?i-1:0,d=r?-1:1,f=e[t+h];for(h+=d,o=f&(1<<-l)-1,f>>=-l,l+=a;l>0;o=256*o+e[t+h],h+=d,l-=8);for(s=o&(1<<-l)-1,o>>=-l,l+=n;l>0;s=256*s+e[t+h],h+=d,l-=8);if(0===o)o=1-u;else{if(o===c)return s?NaN:1/0*(f?-1:1);s+=Math.pow(2,n),o-=u}return(f?-1:1)*s*Math.pow(2,o-n)},t.write=function(e,t,r,n,i,o){var s,a,c,u=8*o-i-1,l=(1<<u)-1,h=l>>1,d=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,f=n?0:o-1,p=n?1:-1,m=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,s=l):(s=Math.floor(Math.log(t)/Math.LN2),t*(c=Math.pow(2,-s))<1&&(s--,c*=2),(t+=s+h>=1?d/c:d*Math.pow(2,1-h))*c>=2&&(s++,c/=2),s+h>=l?(a=0,s=l):s+h>=1?(a=(t*c-1)*Math.pow(2,i),s+=h):(a=t*Math.pow(2,h-1)*Math.pow(2,i),s=0));i>=8;e[r+f]=255&a,f+=p,a/=256,i-=8);for(s=s<<i|a,u+=i;u>0;e[r+f]=255&s,f+=p,s/=256,u-=8);e[r+f-p]|=128*m}},5717:e=>{"function"==typeof Object.create?e.exports=function(e,t){t&&(e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}))}:e.exports=function(e,t){if(t){e.super_=t;var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e}}},9461:e=>{"use strict";var t=e.exports=function(e,t,n){"function"==typeof t&&(n=t,t={}),r(t,"function"==typeof(n=t.cb||n)?n:n.pre||function(){},n.post||function(){},e,"",e)};function r(e,n,i,o,s,a,c,u,l,h){if(o&&"object"==typeof o&&!Array.isArray(o)){for(var d in n(o,s,a,c,u,l,h),o){var f=o[d];if(Array.isArray(f)){if(d in t.arrayKeywords)for(var p=0;p<f.length;p++)r(e,n,i,f[p],s+"/"+d+"/"+p,a,s,d,o,p)}else if(d in t.propsKeywords){if(f&&"object"==typeof f)for(var m in f)r(e,n,i,f[m],s+"/"+d+"/"+m.replace(/~/g,"~0").replace(/\//g,"~1"),a,s,d,o,m)}else(d in t.keywords||e.allKeys&&!(d in t.skipKeywords))&&r(e,n,i,f,s+"/"+d,a,s,d,o)}i(o,s,a,c,u,l,h)}}t.keywords={additionalItems:!0,items:!0,contains:!0,additionalProperties:!0,propertyNames:!0,not:!0,if:!0,then:!0,else:!0},t.arrayKeywords={items:!0,allOf:!0,anyOf:!0,oneOf:!0},t.propsKeywords={$defs:!0,definitions:!0,properties:!0,patternProperties:!0,dependencies:!0},t.skipKeywords={default:!0,enum:!0,const:!0,required:!0,maximum:!0,minimum:!0,exclusiveMaximum:!0,exclusiveMinimum:!0,multipleOf:!0,maxLength:!0,minLength:!0,pattern:!0,format:!0,maxItems:!0,minItems:!0,uniqueItems:!0,maxProperties:!0,minProperties:!0}},7824:e=>{var t=1e3,r=60*t,n=60*r,i=24*n;function o(e,t,r,n){var i=t>=1.5*r;return Math.round(e/r)+" "+n+(i?"s":"")}e.exports=function(e,s){s=s||{};var a,c,u=typeof e;if("string"===u&&e.length>0)return function(e){if(!((e=String(e)).length>100)){var o=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(o){var s=parseFloat(o[1]);switch((o[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*s;case"weeks":case"week":case"w":return 6048e5*s;case"days":case"day":case"d":return s*i;case"hours":case"hour":case"hrs":case"hr":case"h":return s*n;case"minutes":case"minute":case"mins":case"min":case"m":return s*r;case"seconds":case"second":case"secs":case"sec":case"s":return s*t;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return s;default:return}}}}(e);if("number"===u&&isFinite(e))return s.long?(a=e,(c=Math.abs(a))>=i?o(a,c,i,"day"):c>=n?o(a,c,n,"hour"):c>=r?o(a,c,r,"minute"):c>=t?o(a,c,t,"second"):a+" ms"):function(e){var o=Math.abs(e);return o>=i?Math.round(e/i)+"d":o>=n?Math.round(e/n)+"h":o>=r?Math.round(e/r)+"m":o>=t?Math.round(e/t)+"s":e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},4155:e=>{var t,r,n=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function s(e){if(t===setTimeout)return setTimeout(e,0);if((t===i||!t)&&setTimeout)return t=setTimeout,setTimeout(e,0);try{return t(e,0)}catch(r){try{return t.call(null,e,0)}catch(r){return t.call(this,e,0)}}}!function(){try{t="function"==typeof setTimeout?setTimeout:i}catch(e){t=i}try{r="function"==typeof clearTimeout?clearTimeout:o}catch(e){r=o}}();var a,c=[],u=!1,l=-1;function h(){u&&a&&(u=!1,a.length?c=a.concat(c):l=-1,c.length&&d())}function d(){if(!u){var e=s(h);u=!0;for(var t=c.length;t;){for(a=c,c=[];++l<t;)a&&a[l].run();l=-1,t=c.length}a=null,u=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===o||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{return r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function f(e,t){this.fun=e,this.array=t}function p(){}n.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];c.push(new f(e,t)),1!==c.length||u||s(d)},f.prototype.run=function(){this.fun.apply(null,this.array)},n.title="browser",n.browser=!0,n.env={},n.argv=[],n.version="",n.versions={},n.on=p,n.addListener=p,n.once=p,n.off=p,n.removeListener=p,n.removeAllListeners=p,n.emit=p,n.prependListener=p,n.prependOnceListener=p,n.listeners=function(e){return[]},n.binding=function(e){throw new Error("process.binding is not supported")},n.cwd=function(){return"/"},n.chdir=function(e){throw new Error("process.chdir is not supported")},n.umask=function(){return 0}},4375:(e,t,r)=>{let n;e.exports="function"==typeof queueMicrotask?queueMicrotask.bind("undefined"!=typeof window?window:r.g):e=>(n||(n=Promise.resolve())).then(e).catch((e=>setTimeout((()=>{throw e}),0)))},1798:(e,t,r)=>{"use strict";var n=r(4155),i=65536,o=r(9509).Buffer,s=r.g.crypto||r.g.msCrypto;s&&s.getRandomValues?e.exports=function(e,t){if(e>4294967295)throw new RangeError("requested too many random bytes");var r=o.allocUnsafe(e);if(e>0)if(e>i)for(var a=0;a<e;a+=i)s.getRandomValues(r.slice(a,a+i));else s.getRandomValues(r);return"function"==typeof t?n.nextTick((function(){t(null,r)})):r}:e.exports=function(){throw new Error("Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11")}},4281:e=>{"use strict";var t={};function r(e,r,n){n||(n=Error);var i=function(e){var t,n;function i(t,n,i){return e.call(this,function(e,t,n){return"string"==typeof r?r:r(e,t,n)}(t,n,i))||this}return n=e,(t=i).prototype=Object.create(n.prototype),t.prototype.constructor=t,t.__proto__=n,i}(n);i.prototype.name=n.name,i.prototype.code=e,t[e]=i}function n(e,t){if(Array.isArray(e)){var r=e.length;return e=e.map((function(e){return String(e)})),r>2?"one of ".concat(t," ").concat(e.slice(0,r-1).join(", "),", or ")+e[r-1]:2===r?"one of ".concat(t," ").concat(e[0]," or ").concat(e[1]):"of ".concat(t," ").concat(e[0])}return"of ".concat(t," ").concat(String(e))}r("ERR_INVALID_OPT_VALUE",(function(e,t){return'The value "'+t+'" is invalid for option "'+e+'"'}),TypeError),r("ERR_INVALID_ARG_TYPE",(function(e,t,r){var i,o,s,a,c;if("string"==typeof t&&(o="not ",t.substr(0,4)===o)?(i="must not be",t=t.replace(/^not /,"")):i="must be",function(e,t,r){return(void 0===r||r>e.length)&&(r=e.length),e.substring(r-9,r)===t}(e," argument"))s="The ".concat(e," ").concat(i," ").concat(n(t,"type"));else{var u=("number"!=typeof c&&(c=0),c+1>(a=e).length||-1===a.indexOf(".",c)?"argument":"property");s='The "'.concat(e,'" ').concat(u," ").concat(i," ").concat(n(t,"type"))}return s+". Received type ".concat(typeof r)}),TypeError),r("ERR_STREAM_PUSH_AFTER_EOF","stream.push() after EOF"),r("ERR_METHOD_NOT_IMPLEMENTED",(function(e){return"The "+e+" method is not implemented"})),r("ERR_STREAM_PREMATURE_CLOSE","Premature close"),r("ERR_STREAM_DESTROYED",(function(e){return"Cannot call "+e+" after a stream was destroyed"})),r("ERR_MULTIPLE_CALLBACK","Callback called multiple times"),r("ERR_STREAM_CANNOT_PIPE","Cannot pipe, not readable"),r("ERR_STREAM_WRITE_AFTER_END","write after end"),r("ERR_STREAM_NULL_VALUES","May not write null values to stream",TypeError),r("ERR_UNKNOWN_ENCODING",(function(e){return"Unknown encoding: "+e}),TypeError),r("ERR_STREAM_UNSHIFT_AFTER_END_EVENT","stream.unshift() after end event"),e.exports.q=t},6753:(e,t,r)=>{"use strict";var n=r(4155),i=Object.keys||function(e){var t=[];for(var r in e)t.push(r);return t};e.exports=l;var o=r(9481),s=r(4229);r(5717)(l,o);for(var a=i(s.prototype),c=0;c<a.length;c++){var u=a[c];l.prototype[u]||(l.prototype[u]=s.prototype[u])}function l(e){if(!(this instanceof l))return new l(e);o.call(this,e),s.call(this,e),this.allowHalfOpen=!0,e&&(!1===e.readable&&(this.readable=!1),!1===e.writable&&(this.writable=!1),!1===e.allowHalfOpen&&(this.allowHalfOpen=!1,this.once("end",h)))}function h(){this._writableState.ended||n.nextTick(d,this)}function d(e){e.end()}Object.defineProperty(l.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(l.prototype,"writableBuffer",{enumerable:!1,get:function(){return this._writableState&&this._writableState.getBuffer()}}),Object.defineProperty(l.prototype,"writableLength",{enumerable:!1,get:function(){return this._writableState.length}}),Object.defineProperty(l.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&this._readableState.destroyed&&this._writableState.destroyed},set:function(e){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=e,this._writableState.destroyed=e)}})},2725:(e,t,r)=>{"use strict";e.exports=i;var n=r(4605);function i(e){if(!(this instanceof i))return new i(e);n.call(this,e)}r(5717)(i,n),i.prototype._transform=function(e,t,r){r(null,e)}},9481:(e,t,r)=>{"use strict";var n,i=r(4155);e.exports=k,k.ReadableState=C,r(7187).EventEmitter;var o,s=function(e,t){return e.listeners(t).length},a=r(2503),c=r(8764).Buffer,u=(void 0!==r.g?r.g:"undefined"!=typeof window?window:"undefined"!=typeof self?self:{}).Uint8Array||function(){},l=r(4616);o=l&&l.debuglog?l.debuglog("stream"):function(){};var h,d,f,p=r(7327),m=r(1195),y=r(2457).getHighWaterMark,v=r(4281).q,g=v.ERR_INVALID_ARG_TYPE,b=v.ERR_STREAM_PUSH_AFTER_EOF,w=v.ERR_METHOD_NOT_IMPLEMENTED,_=v.ERR_STREAM_UNSHIFT_AFTER_END_EVENT;r(5717)(k,a);var E=m.errorOrDestroy,S=["error","close","destroy","pause","resume"];function C(e,t,i){n=n||r(6753),e=e||{},"boolean"!=typeof i&&(i=t instanceof n),this.objectMode=!!e.objectMode,i&&(this.objectMode=this.objectMode||!!e.readableObjectMode),this.highWaterMark=y(this,e,"readableHighWaterMark",i),this.buffer=new p,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.paused=!0,this.emitClose=!1!==e.emitClose,this.autoDestroy=!!e.autoDestroy,this.destroyed=!1,this.defaultEncoding=e.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,e.encoding&&(h||(h=r(2553).s),this.decoder=new h(e.encoding),this.encoding=e.encoding)}function k(e){if(n=n||r(6753),!(this instanceof k))return new k(e);var t=this instanceof n;this._readableState=new C(e,this,t),this.readable=!0,e&&("function"==typeof e.read&&(this._read=e.read),"function"==typeof e.destroy&&(this._destroy=e.destroy)),a.call(this)}function x(e,t,r,n,i){o("readableAddChunk",t);var s,a=e._readableState;if(null===t)a.reading=!1,function(e,t){if(o("onEofChunk"),!t.ended){if(t.decoder){var r=t.decoder.end();r&&r.length&&(t.buffer.push(r),t.length+=t.objectMode?1:r.length)}t.ended=!0,t.sync?$(e):(t.needReadable=!1,t.emittedReadable||(t.emittedReadable=!0,D(e)))}}(e,a);else if(i||(s=function(e,t){var r,n;return n=t,c.isBuffer(n)||n instanceof u||"string"==typeof t||void 0===t||e.objectMode||(r=new g("chunk",["string","Buffer","Uint8Array"],t)),r}(a,t)),s)E(e,s);else if(a.objectMode||t&&t.length>0)if("string"==typeof t||a.objectMode||Object.getPrototypeOf(t)===c.prototype||(t=function(e){return c.from(e)}(t)),n)a.endEmitted?E(e,new _):O(e,a,t,!0);else if(a.ended)E(e,new b);else{if(a.destroyed)return!1;a.reading=!1,a.decoder&&!r?(t=a.decoder.write(t),a.objectMode||0!==t.length?O(e,a,t,!1):I(e,a)):O(e,a,t,!1)}else n||(a.reading=!1,I(e,a));return!a.ended&&(a.length<a.highWaterMark||0===a.length)}function O(e,t,r,n){t.flowing&&0===t.length&&!t.sync?(t.awaitDrain=0,e.emit("data",r)):(t.length+=t.objectMode?1:r.length,n?t.buffer.unshift(r):t.buffer.push(r),t.needReadable&&$(e)),I(e,t)}Object.defineProperty(k.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(e){this._readableState&&(this._readableState.destroyed=e)}}),k.prototype.destroy=m.destroy,k.prototype._undestroy=m.undestroy,k.prototype._destroy=function(e,t){t(e)},k.prototype.push=function(e,t){var r,n=this._readableState;return n.objectMode?r=!0:"string"==typeof e&&((t=t||n.defaultEncoding)!==n.encoding&&(e=c.from(e,t),t=""),r=!0),x(this,e,t,!1,r)},k.prototype.unshift=function(e){return x(this,e,null,!0,!1)},k.prototype.isPaused=function(){return!1===this._readableState.flowing},k.prototype.setEncoding=function(e){h||(h=r(2553).s);var t=new h(e);this._readableState.decoder=t,this._readableState.encoding=this._readableState.decoder.encoding;for(var n=this._readableState.buffer.head,i="";null!==n;)i+=t.write(n.data),n=n.next;return this._readableState.buffer.clear(),""!==i&&this._readableState.buffer.push(i),this._readableState.length=i.length,this};var P=1073741824;function R(e,t){return e<=0||0===t.length&&t.ended?0:t.objectMode?1:e!=e?t.flowing&&t.length?t.buffer.head.data.length:t.length:(e>t.highWaterMark&&(t.highWaterMark=function(e){return e>=P?e=P:(e--,e|=e>>>1,e|=e>>>2,e|=e>>>4,e|=e>>>8,e|=e>>>16,e++),e}(e)),e<=t.length?e:t.ended?t.length:(t.needReadable=!0,0))}function $(e){var t=e._readableState;o("emitReadable",t.needReadable,t.emittedReadable),t.needReadable=!1,t.emittedReadable||(o("emitReadable",t.flowing),t.emittedReadable=!0,i.nextTick(D,e))}function D(e){var t=e._readableState;o("emitReadable_",t.destroyed,t.length,t.ended),t.destroyed||!t.length&&!t.ended||(e.emit("readable"),t.emittedReadable=!1),t.needReadable=!t.flowing&&!t.ended&&t.length<=t.highWaterMark,M(e)}function I(e,t){t.readingMore||(t.readingMore=!0,i.nextTick(j,e,t))}function j(e,t){for(;!t.reading&&!t.ended&&(t.length<t.highWaterMark||t.flowing&&0===t.length);){var r=t.length;if(o("maybeReadMore read 0"),e.read(0),r===t.length)break}t.readingMore=!1}function T(e){var t=e._readableState;t.readableListening=e.listenerCount("readable")>0,t.resumeScheduled&&!t.paused?t.flowing=!0:e.listenerCount("data")>0&&e.resume()}function A(e){o("readable nexttick read 0"),e.read(0)}function N(e,t){o("resume",t.reading),t.reading||e.read(0),t.resumeScheduled=!1,e.emit("resume"),M(e),t.flowing&&!t.reading&&e.read(0)}function M(e){var t=e._readableState;for(o("flow",t.flowing);t.flowing&&null!==e.read(););}function L(e,t){return 0===t.length?null:(t.objectMode?r=t.buffer.shift():!e||e>=t.length?(r=t.decoder?t.buffer.join(""):1===t.buffer.length?t.buffer.first():t.buffer.concat(t.length),t.buffer.clear()):r=t.buffer.consume(e,t.decoder),r);var r}function B(e){var t=e._readableState;o("endReadable",t.endEmitted),t.endEmitted||(t.ended=!0,i.nextTick(F,t,e))}function F(e,t){if(o("endReadableNT",e.endEmitted,e.length),!e.endEmitted&&0===e.length&&(e.endEmitted=!0,t.readable=!1,t.emit("end"),e.autoDestroy)){var r=t._writableState;(!r||r.autoDestroy&&r.finished)&&t.destroy()}}function q(e,t){for(var r=0,n=e.length;r<n;r++)if(e[r]===t)return r;return-1}k.prototype.read=function(e){o("read",e),e=parseInt(e,10);var t=this._readableState,r=e;if(0!==e&&(t.emittedReadable=!1),0===e&&t.needReadable&&((0!==t.highWaterMark?t.length>=t.highWaterMark:t.length>0)||t.ended))return o("read: emitReadable",t.length,t.ended),0===t.length&&t.ended?B(this):$(this),null;if(0===(e=R(e,t))&&t.ended)return 0===t.length&&B(this),null;var n,i=t.needReadable;return o("need readable",i),(0===t.length||t.length-e<t.highWaterMark)&&o("length less than watermark",i=!0),t.ended||t.reading?o("reading or ended",i=!1):i&&(o("do read"),t.reading=!0,t.sync=!0,0===t.length&&(t.needReadable=!0),this._read(t.highWaterMark),t.sync=!1,t.reading||(e=R(r,t))),null===(n=e>0?L(e,t):null)?(t.needReadable=t.length<=t.highWaterMark,e=0):(t.length-=e,t.awaitDrain=0),0===t.length&&(t.ended||(t.needReadable=!0),r!==e&&t.ended&&B(this)),null!==n&&this.emit("data",n),n},k.prototype._read=function(e){E(this,new w("_read()"))},k.prototype.pipe=function(e,t){var r=this,n=this._readableState;switch(n.pipesCount){case 0:n.pipes=e;break;case 1:n.pipes=[n.pipes,e];break;default:n.pipes.push(e)}n.pipesCount+=1,o("pipe count=%d opts=%j",n.pipesCount,t);var a=t&&!1===t.end||e===i.stdout||e===i.stderr?m:c;function c(){o("onend"),e.end()}n.endEmitted?i.nextTick(a):r.once("end",a),e.on("unpipe",(function t(i,s){o("onunpipe"),i===r&&s&&!1===s.hasUnpiped&&(s.hasUnpiped=!0,o("cleanup"),e.removeListener("close",f),e.removeListener("finish",p),e.removeListener("drain",u),e.removeListener("error",d),e.removeListener("unpipe",t),r.removeListener("end",c),r.removeListener("end",m),r.removeListener("data",h),l=!0,!n.awaitDrain||e._writableState&&!e._writableState.needDrain||u())}));var u=function(e){return function(){var t=e._readableState;o("pipeOnDrain",t.awaitDrain),t.awaitDrain&&t.awaitDrain--,0===t.awaitDrain&&s(e,"data")&&(t.flowing=!0,M(e))}}(r);e.on("drain",u);var l=!1;function h(t){o("ondata");var i=e.write(t);o("dest.write",i),!1===i&&((1===n.pipesCount&&n.pipes===e||n.pipesCount>1&&-1!==q(n.pipes,e))&&!l&&(o("false write response, pause",n.awaitDrain),n.awaitDrain++),r.pause())}function d(t){o("onerror",t),m(),e.removeListener("error",d),0===s(e,"error")&&E(e,t)}function f(){e.removeListener("finish",p),m()}function p(){o("onfinish"),e.removeListener("close",f),m()}function m(){o("unpipe"),r.unpipe(e)}return r.on("data",h),function(e,t,r){if("function"==typeof e.prependListener)return e.prependListener(t,r);e._events&&e._events[t]?Array.isArray(e._events[t])?e._events[t].unshift(r):e._events[t]=[r,e._events[t]]:e.on(t,r)}(e,"error",d),e.once("close",f),e.once("finish",p),e.emit("pipe",r),n.flowing||(o("pipe resume"),r.resume()),e},k.prototype.unpipe=function(e){var t=this._readableState,r={hasUnpiped:!1};if(0===t.pipesCount)return this;if(1===t.pipesCount)return e&&e!==t.pipes||(e||(e=t.pipes),t.pipes=null,t.pipesCount=0,t.flowing=!1,e&&e.emit("unpipe",this,r)),this;if(!e){var n=t.pipes,i=t.pipesCount;t.pipes=null,t.pipesCount=0,t.flowing=!1;for(var o=0;o<i;o++)n[o].emit("unpipe",this,{hasUnpiped:!1});return this}var s=q(t.pipes,e);return-1===s||(t.pipes.splice(s,1),t.pipesCount-=1,1===t.pipesCount&&(t.pipes=t.pipes[0]),e.emit("unpipe",this,r)),this},k.prototype.on=function(e,t){var r=a.prototype.on.call(this,e,t),n=this._readableState;return"data"===e?(n.readableListening=this.listenerCount("readable")>0,!1!==n.flowing&&this.resume()):"readable"===e&&(n.endEmitted||n.readableListening||(n.readableListening=n.needReadable=!0,n.flowing=!1,n.emittedReadable=!1,o("on readable",n.length,n.reading),n.length?$(this):n.reading||i.nextTick(A,this))),r},k.prototype.addListener=k.prototype.on,k.prototype.removeListener=function(e,t){var r=a.prototype.removeListener.call(this,e,t);return"readable"===e&&i.nextTick(T,this),r},k.prototype.removeAllListeners=function(e){var t=a.prototype.removeAllListeners.apply(this,arguments);return"readable"!==e&&void 0!==e||i.nextTick(T,this),t},k.prototype.resume=function(){var e=this._readableState;return e.flowing||(o("resume"),e.flowing=!e.readableListening,function(e,t){t.resumeScheduled||(t.resumeScheduled=!0,i.nextTick(N,e,t))}(this,e)),e.paused=!1,this},k.prototype.pause=function(){return o("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(o("pause"),this._readableState.flowing=!1,this.emit("pause")),this._readableState.paused=!0,this},k.prototype.wrap=function(e){var t=this,r=this._readableState,n=!1;for(var i in e.on("end",(function(){if(o("wrapped end"),r.decoder&&!r.ended){var e=r.decoder.end();e&&e.length&&t.push(e)}t.push(null)})),e.on("data",(function(i){o("wrapped data"),r.decoder&&(i=r.decoder.write(i)),r.objectMode&&null==i||(r.objectMode||i&&i.length)&&(t.push(i)||(n=!0,e.pause()))})),e)void 0===this[i]&&"function"==typeof e[i]&&(this[i]=function(t){return function(){return e[t].apply(e,arguments)}}(i));for(var s=0;s<S.length;s++)e.on(S[s],this.emit.bind(this,S[s]));return this._read=function(t){o("wrapped _read",t),n&&(n=!1,e.resume())},this},"function"==typeof Symbol&&(k.prototype[Symbol.asyncIterator]=function(){return void 0===d&&(d=r(5850)),d(this)}),Object.defineProperty(k.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),Object.defineProperty(k.prototype,"readableBuffer",{enumerable:!1,get:function(){return this._readableState&&this._readableState.buffer}}),Object.defineProperty(k.prototype,"readableFlowing",{enumerable:!1,get:function(){return this._readableState.flowing},set:function(e){this._readableState&&(this._readableState.flowing=e)}}),k._fromList=L,Object.defineProperty(k.prototype,"readableLength",{enumerable:!1,get:function(){return this._readableState.length}}),"function"==typeof Symbol&&(k.from=function(e,t){return void 0===f&&(f=r(5167)),f(k,e,t)})},4605:(e,t,r)=>{"use strict";e.exports=l;var n=r(4281).q,i=n.ERR_METHOD_NOT_IMPLEMENTED,o=n.ERR_MULTIPLE_CALLBACK,s=n.ERR_TRANSFORM_ALREADY_TRANSFORMING,a=n.ERR_TRANSFORM_WITH_LENGTH_0,c=r(6753);function u(e,t){var r=this._transformState;r.transforming=!1;var n=r.writecb;if(null===n)return this.emit("error",new o);r.writechunk=null,r.writecb=null,null!=t&&this.push(t),n(e);var i=this._readableState;i.reading=!1,(i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}function l(e){if(!(this instanceof l))return new l(e);c.call(this,e),this._transformState={afterTransform:u.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,e&&("function"==typeof e.transform&&(this._transform=e.transform),"function"==typeof e.flush&&(this._flush=e.flush)),this.on("prefinish",h)}function h(){var e=this;"function"!=typeof this._flush||this._readableState.destroyed?d(this,null,null):this._flush((function(t,r){d(e,t,r)}))}function d(e,t,r){if(t)return e.emit("error",t);if(null!=r&&e.push(r),e._writableState.length)throw new a;if(e._transformState.transforming)throw new s;return e.push(null)}r(5717)(l,c),l.prototype.push=function(e,t){return this._transformState.needTransform=!1,c.prototype.push.call(this,e,t)},l.prototype._transform=function(e,t,r){r(new i("_transform()"))},l.prototype._write=function(e,t,r){var n=this._transformState;if(n.writecb=r,n.writechunk=e,n.writeencoding=t,!n.transforming){var i=this._readableState;(n.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},l.prototype._read=function(e){var t=this._transformState;null===t.writechunk||t.transforming?t.needTransform=!0:(t.transforming=!0,this._transform(t.writechunk,t.writeencoding,t.afterTransform))},l.prototype._destroy=function(e,t){c.prototype._destroy.call(this,e,(function(e){t(e)}))}},4229:(e,t,r)=>{"use strict";var n,i=r(4155);function o(e){var t=this;this.next=null,this.entry=null,this.finish=function(){!function(e,t,r){var n=e.entry;for(e.entry=null;n;){var i=n.callback;t.pendingcb--,i(undefined),n=n.next}t.corkedRequestsFree.next=e}(t,e)}}e.exports=k,k.WritableState=C;var s,a={deprecate:r(4927)},c=r(2503),u=r(8764).Buffer,l=(void 0!==r.g?r.g:"undefined"!=typeof window?window:"undefined"!=typeof self?self:{}).Uint8Array||function(){},h=r(1195),d=r(2457).getHighWaterMark,f=r(4281).q,p=f.ERR_INVALID_ARG_TYPE,m=f.ERR_METHOD_NOT_IMPLEMENTED,y=f.ERR_MULTIPLE_CALLBACK,v=f.ERR_STREAM_CANNOT_PIPE,g=f.ERR_STREAM_DESTROYED,b=f.ERR_STREAM_NULL_VALUES,w=f.ERR_STREAM_WRITE_AFTER_END,_=f.ERR_UNKNOWN_ENCODING,E=h.errorOrDestroy;function S(){}function C(e,t,s){n=n||r(6753),e=e||{},"boolean"!=typeof s&&(s=t instanceof n),this.objectMode=!!e.objectMode,s&&(this.objectMode=this.objectMode||!!e.writableObjectMode),this.highWaterMark=d(this,e,"writableHighWaterMark",s),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var a=!1===e.decodeStrings;this.decodeStrings=!a,this.defaultEncoding=e.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(e){!function(e,t){var r=e._writableState,n=r.sync,o=r.writecb;if("function"!=typeof o)throw new y;if(function(e){e.writing=!1,e.writecb=null,e.length-=e.writelen,e.writelen=0}(r),t)!function(e,t,r,n,o){--t.pendingcb,r?(i.nextTick(o,n),i.nextTick(D,e,t),e._writableState.errorEmitted=!0,E(e,n)):(o(n),e._writableState.errorEmitted=!0,E(e,n),D(e,t))}(e,r,n,t,o);else{var s=R(r)||e.destroyed;s||r.corked||r.bufferProcessing||!r.bufferedRequest||P(e,r),n?i.nextTick(O,e,r,s,o):O(e,r,s,o)}}(t,e)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.emitClose=!1!==e.emitClose,this.autoDestroy=!!e.autoDestroy,this.bufferedRequestCount=0,this.corkedRequestsFree=new o(this)}function k(e){var t=this instanceof(n=n||r(6753));if(!t&&!s.call(k,this))return new k(e);this._writableState=new C(e,this,t),this.writable=!0,e&&("function"==typeof e.write&&(this._write=e.write),"function"==typeof e.writev&&(this._writev=e.writev),"function"==typeof e.destroy&&(this._destroy=e.destroy),"function"==typeof e.final&&(this._final=e.final)),c.call(this)}function x(e,t,r,n,i,o,s){t.writelen=n,t.writecb=s,t.writing=!0,t.sync=!0,t.destroyed?t.onwrite(new g("write")):r?e._writev(i,t.onwrite):e._write(i,o,t.onwrite),t.sync=!1}function O(e,t,r,n){r||function(e,t){0===t.length&&t.needDrain&&(t.needDrain=!1,e.emit("drain"))}(e,t),t.pendingcb--,n(),D(e,t)}function P(e,t){t.bufferProcessing=!0;var r=t.bufferedRequest;if(e._writev&&r&&r.next){var n=t.bufferedRequestCount,i=new Array(n),s=t.corkedRequestsFree;s.entry=r;for(var a=0,c=!0;r;)i[a]=r,r.isBuf||(c=!1),r=r.next,a+=1;i.allBuffers=c,x(e,t,!0,t.length,i,"",s.finish),t.pendingcb++,t.lastBufferedRequest=null,s.next?(t.corkedRequestsFree=s.next,s.next=null):t.corkedRequestsFree=new o(t),t.bufferedRequestCount=0}else{for(;r;){var u=r.chunk,l=r.encoding,h=r.callback;if(x(e,t,!1,t.objectMode?1:u.length,u,l,h),r=r.next,t.bufferedRequestCount--,t.writing)break}null===r&&(t.lastBufferedRequest=null)}t.bufferedRequest=r,t.bufferProcessing=!1}function R(e){return e.ending&&0===e.length&&null===e.bufferedRequest&&!e.finished&&!e.writing}function $(e,t){e._final((function(r){t.pendingcb--,r&&E(e,r),t.prefinished=!0,e.emit("prefinish"),D(e,t)}))}function D(e,t){var r=R(t);if(r&&(function(e,t){t.prefinished||t.finalCalled||("function"!=typeof e._final||t.destroyed?(t.prefinished=!0,e.emit("prefinish")):(t.pendingcb++,t.finalCalled=!0,i.nextTick($,e,t)))}(e,t),0===t.pendingcb&&(t.finished=!0,e.emit("finish"),t.autoDestroy))){var n=e._readableState;(!n||n.autoDestroy&&n.endEmitted)&&e.destroy()}return r}r(5717)(k,c),C.prototype.getBuffer=function(){for(var e=this.bufferedRequest,t=[];e;)t.push(e),e=e.next;return t},function(){try{Object.defineProperty(C.prototype,"buffer",{get:a.deprecate((function(){return this.getBuffer()}),"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(e){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(s=Function.prototype[Symbol.hasInstance],Object.defineProperty(k,Symbol.hasInstance,{value:function(e){return!!s.call(this,e)||this===k&&e&&e._writableState instanceof C}})):s=function(e){return e instanceof this},k.prototype.pipe=function(){E(this,new v)},k.prototype.write=function(e,t,r){var n,o=this._writableState,s=!1,a=!o.objectMode&&(n=e,u.isBuffer(n)||n instanceof l);return a&&!u.isBuffer(e)&&(e=function(e){return u.from(e)}(e)),"function"==typeof t&&(r=t,t=null),a?t="buffer":t||(t=o.defaultEncoding),"function"!=typeof r&&(r=S),o.ending?function(e,t){var r=new w;E(e,r),i.nextTick(t,r)}(this,r):(a||function(e,t,r,n){var o;return null===r?o=new b:"string"==typeof r||t.objectMode||(o=new p("chunk",["string","Buffer"],r)),!o||(E(e,o),i.nextTick(n,o),!1)}(this,o,e,r))&&(o.pendingcb++,s=function(e,t,r,n,i,o){if(!r){var s=function(e,t,r){return e.objectMode||!1===e.decodeStrings||"string"!=typeof t||(t=u.from(t,r)),t}(t,n,i);n!==s&&(r=!0,i="buffer",n=s)}var a=t.objectMode?1:n.length;t.length+=a;var c=t.length<t.highWaterMark;if(c||(t.needDrain=!0),t.writing||t.corked){var l=t.lastBufferedRequest;t.lastBufferedRequest={chunk:n,encoding:i,isBuf:r,callback:o,next:null},l?l.next=t.lastBufferedRequest:t.bufferedRequest=t.lastBufferedRequest,t.bufferedRequestCount+=1}else x(e,t,!1,a,n,i,o);return c}(this,o,a,e,t,r)),s},k.prototype.cork=function(){this._writableState.corked++},k.prototype.uncork=function(){var e=this._writableState;e.corked&&(e.corked--,e.writing||e.corked||e.bufferProcessing||!e.bufferedRequest||P(this,e))},k.prototype.setDefaultEncoding=function(e){if("string"==typeof e&&(e=e.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((e+"").toLowerCase())>-1))throw new _(e);return this._writableState.defaultEncoding=e,this},Object.defineProperty(k.prototype,"writableBuffer",{enumerable:!1,get:function(){return this._writableState&&this._writableState.getBuffer()}}),Object.defineProperty(k.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),k.prototype._write=function(e,t,r){r(new m("_write()"))},k.prototype._writev=null,k.prototype.end=function(e,t,r){var n=this._writableState;return"function"==typeof e?(r=e,e=null,t=null):"function"==typeof t&&(r=t,t=null),null!=e&&this.write(e,t),n.corked&&(n.corked=1,this.uncork()),n.ending||function(e,t,r){t.ending=!0,D(e,t),r&&(t.finished?i.nextTick(r):e.once("finish",r)),t.ended=!0,e.writable=!1}(this,n,r),this},Object.defineProperty(k.prototype,"writableLength",{enumerable:!1,get:function(){return this._writableState.length}}),Object.defineProperty(k.prototype,"destroyed",{enumerable:!1,get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(e){this._writableState&&(this._writableState.destroyed=e)}}),k.prototype.destroy=h.destroy,k.prototype._undestroy=h.undestroy,k.prototype._destroy=function(e,t){t(e)}},5850:(e,t,r)=>{"use strict";var n,i=r(4155);function o(e,t,r){return(t=function(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!=typeof n)return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var s=r(8610),a=Symbol("lastResolve"),c=Symbol("lastReject"),u=Symbol("error"),l=Symbol("ended"),h=Symbol("lastPromise"),d=Symbol("handlePromise"),f=Symbol("stream");function p(e,t){return{value:e,done:t}}function m(e){var t=e[a];if(null!==t){var r=e[f].read();null!==r&&(e[h]=null,e[a]=null,e[c]=null,t(p(r,!1)))}}function y(e){i.nextTick(m,e)}var v=Object.getPrototypeOf((function(){})),g=Object.setPrototypeOf((o(n={get stream(){return this[f]},next:function(){var e=this,t=this[u];if(null!==t)return Promise.reject(t);if(this[l])return Promise.resolve(p(void 0,!0));if(this[f].destroyed)return new Promise((function(t,r){i.nextTick((function(){e[u]?r(e[u]):t(p(void 0,!0))}))}));var r,n=this[h];if(n)r=new Promise(function(e,t){return function(r,n){e.then((function(){t[l]?r(p(void 0,!0)):t[d](r,n)}),n)}}(n,this));else{var o=this[f].read();if(null!==o)return Promise.resolve(p(o,!1));r=new Promise(this[d])}return this[h]=r,r}},Symbol.asyncIterator,(function(){return this})),o(n,"return",(function(){var e=this;return new Promise((function(t,r){e[f].destroy(null,(function(e){e?r(e):t(p(void 0,!0))}))}))})),n),v);e.exports=function(e){var t,r=Object.create(g,(o(t={},f,{value:e,writable:!0}),o(t,a,{value:null,writable:!0}),o(t,c,{value:null,writable:!0}),o(t,u,{value:null,writable:!0}),o(t,l,{value:e._readableState.endEmitted,writable:!0}),o(t,d,{value:function(e,t){var n=r[f].read();n?(r[h]=null,r[a]=null,r[c]=null,e(p(n,!1))):(r[a]=e,r[c]=t)},writable:!0}),t));return r[h]=null,s(e,(function(e){if(e&&"ERR_STREAM_PREMATURE_CLOSE"!==e.code){var t=r[c];return null!==t&&(r[h]=null,r[a]=null,r[c]=null,t(e)),void(r[u]=e)}var n=r[a];null!==n&&(r[h]=null,r[a]=null,r[c]=null,n(p(void 0,!0))),r[l]=!0})),e.on("readable",y.bind(null,r)),r}},7327:(e,t,r)=>{"use strict";function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t,r){return(t=a(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function s(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,a(n.key),n)}}function a(e){var t=function(e,t){if("object"!=typeof e||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!=typeof n)return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==typeof t?t:String(t)}var c=r(8764).Buffer,u=r(2361).inspect,l=u&&u.custom||"inspect";e.exports=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.head=null,this.tail=null,this.length=0}var t,r;return t=e,(r=[{key:"push",value:function(e){var t={data:e,next:null};this.length>0?this.tail.next=t:this.head=t,this.tail=t,++this.length}},{key:"unshift",value:function(e){var t={data:e,next:this.head};0===this.length&&(this.tail=t),this.head=t,++this.length}},{key:"shift",value:function(){if(0!==this.length){var e=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,e}}},{key:"clear",value:function(){this.head=this.tail=null,this.length=0}},{key:"join",value:function(e){if(0===this.length)return"";for(var t=this.head,r=""+t.data;t=t.next;)r+=e+t.data;return r}},{key:"concat",value:function(e){if(0===this.length)return c.alloc(0);for(var t,r,n,i=c.allocUnsafe(e>>>0),o=this.head,s=0;o;)t=o.data,r=i,n=s,c.prototype.copy.call(t,r,n),s+=o.data.length,o=o.next;return i}},{key:"consume",value:function(e,t){var r;return e<this.head.data.length?(r=this.head.data.slice(0,e),this.head.data=this.head.data.slice(e)):r=e===this.head.data.length?this.shift():t?this._getString(e):this._getBuffer(e),r}},{key:"first",value:function(){return this.head.data}},{key:"_getString",value:function(e){var t=this.head,r=1,n=t.data;for(e-=n.length;t=t.next;){var i=t.data,o=e>i.length?i.length:e;if(o===i.length?n+=i:n+=i.slice(0,e),0==(e-=o)){o===i.length?(++r,t.next?this.head=t.next:this.head=this.tail=null):(this.head=t,t.data=i.slice(o));break}++r}return this.length-=r,n}},{key:"_getBuffer",value:function(e){var t=c.allocUnsafe(e),r=this.head,n=1;for(r.data.copy(t),e-=r.data.length;r=r.next;){var i=r.data,o=e>i.length?i.length:e;if(i.copy(t,t.length-e,0,o),0==(e-=o)){o===i.length?(++n,r.next?this.head=r.next:this.head=this.tail=null):(this.head=r,r.data=i.slice(o));break}++n}return this.length-=n,t}},{key:l,value:function(e,t){return u(this,i(i({},t),{},{depth:0,customInspect:!1}))}}])&&s(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),e}()},1195:(e,t,r)=>{"use strict";var n=r(4155);function i(e,t){s(e,t),o(e)}function o(e){e._writableState&&!e._writableState.emitClose||e._readableState&&!e._readableState.emitClose||e.emit("close")}function s(e,t){e.emit("error",t)}e.exports={destroy:function(e,t){var r=this,a=this._readableState&&this._readableState.destroyed,c=this._writableState&&this._writableState.destroyed;return a||c?(t?t(e):e&&(this._writableState?this._writableState.errorEmitted||(this._writableState.errorEmitted=!0,n.nextTick(s,this,e)):n.nextTick(s,this,e)),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(e||null,(function(e){!t&&e?r._writableState?r._writableState.errorEmitted?n.nextTick(o,r):(r._writableState.errorEmitted=!0,n.nextTick(i,r,e)):n.nextTick(i,r,e):t?(n.nextTick(o,r),t(e)):n.nextTick(o,r)})),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finalCalled=!1,this._writableState.prefinished=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)},errorOrDestroy:function(e,t){var r=e._readableState,n=e._writableState;r&&r.autoDestroy||n&&n.autoDestroy?e.destroy(t):e.emit("error",t)}}},8610:(e,t,r)=>{"use strict";var n=r(4281).q.ERR_STREAM_PREMATURE_CLOSE;function i(){}e.exports=function e(t,r,o){if("function"==typeof r)return e(t,null,r);r||(r={}),o=function(e){var t=!1;return function(){if(!t){t=!0;for(var r=arguments.length,n=new Array(r),i=0;i<r;i++)n[i]=arguments[i];e.apply(this,n)}}}(o||i);var s=r.readable||!1!==r.readable&&t.readable,a=r.writable||!1!==r.writable&&t.writable,c=function(){t.writable||l()},u=t._writableState&&t._writableState.finished,l=function(){a=!1,u=!0,s||o.call(t)},h=t._readableState&&t._readableState.endEmitted,d=function(){s=!1,h=!0,a||o.call(t)},f=function(e){o.call(t,e)},p=function(){var e;return s&&!h?(t._readableState&&t._readableState.ended||(e=new n),o.call(t,e)):a&&!u?(t._writableState&&t._writableState.ended||(e=new n),o.call(t,e)):void 0},m=function(){t.req.on("finish",l)};return function(e){return e.setHeader&&"function"==typeof e.abort}(t)?(t.on("complete",l),t.on("abort",p),t.req?m():t.on("request",m)):a&&!t._writableState&&(t.on("end",c),t.on("close",c)),t.on("end",d),t.on("finish",l),!1!==r.error&&t.on("error",f),t.on("close",p),function(){t.removeListener("complete",l),t.removeListener("abort",p),t.removeListener("request",m),t.req&&t.req.removeListener("finish",l),t.removeListener("end",c),t.removeListener("close",c),t.removeListener("finish",l),t.removeListener("end",d),t.removeListener("error",f),t.removeListener("close",p)}}},5167:e=>{e.exports=function(){throw new Error("Readable.from is not available in the browser")}},9946:(e,t,r)=>{"use strict";var n,i=r(4281).q,o=i.ERR_MISSING_ARGS,s=i.ERR_STREAM_DESTROYED;function a(e){if(e)throw e}function c(e){e()}function u(e,t){return e.pipe(t)}e.exports=function(){for(var e=arguments.length,t=new Array(e),i=0;i<e;i++)t[i]=arguments[i];var l,h=function(e){return e.length?"function"!=typeof e[e.length-1]?a:e.pop():a}(t);if(Array.isArray(t[0])&&(t=t[0]),t.length<2)throw new o("streams");var d=t.map((function(e,i){var o=i<t.length-1;return function(e,t,i,o){o=function(e){var t=!1;return function(){t||(t=!0,e.apply(void 0,arguments))}}(o);var a=!1;e.on("close",(function(){a=!0})),void 0===n&&(n=r(8610)),n(e,{readable:t,writable:i},(function(e){if(e)return o(e);a=!0,o()}));var c=!1;return function(t){if(!a&&!c)return c=!0,function(e){return e.setHeader&&"function"==typeof e.abort}(e)?e.abort():"function"==typeof e.destroy?e.destroy():void o(t||new s("pipe"))}}(e,o,i>0,(function(e){l||(l=e),e&&d.forEach(c),o||(d.forEach(c),h(l))}))}));return t.reduce(u)}},2457:(e,t,r)=>{"use strict";var n=r(4281).q.ERR_INVALID_OPT_VALUE;e.exports={getHighWaterMark:function(e,t,r,i){var o=function(e,t,r){return null!=e.highWaterMark?e.highWaterMark:t?e[r]:null}(t,i,r);if(null!=o){if(!isFinite(o)||Math.floor(o)!==o||o<0)throw new n(i?r:"highWaterMark",o);return Math.floor(o)}return e.objectMode?16:16384}}},2503:(e,t,r)=>{e.exports=r(7187).EventEmitter},8473:(e,t,r)=>{(t=e.exports=r(9481)).Stream=t,t.Readable=t,t.Writable=r(4229),t.Duplex=r(6753),t.Transform=r(4605),t.PassThrough=r(2725),t.finished=r(8610),t.pipeline=r(9946)},9509:(e,t,r)=>{var n=r(8764),i=n.Buffer;function o(e,t){for(var r in e)t[r]=e[r]}function s(e,t,r){return i(e,t,r)}i.from&&i.alloc&&i.allocUnsafe&&i.allocUnsafeSlow?e.exports=n:(o(n,t),t.Buffer=s),s.prototype=Object.create(i.prototype),o(i,s),s.from=function(e,t,r){if("number"==typeof e)throw new TypeError("Argument must not be a number");return i(e,t,r)},s.alloc=function(e,t,r){if("number"!=typeof e)throw new TypeError("Argument must be a number");var n=i(e);return void 0!==t?"string"==typeof r?n.fill(t,r):n.fill(t):n.fill(0),n},s.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return i(e)},s.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return n.SlowBuffer(e)}},8853:(e,t,r)=>{const n=r(1227)("simple-peer"),i=r(5177),o=r(1798),s=r(8473),a=r(4375),c=r(2114),{Buffer:u}=r(8764),l=65536;function h(e){return e.replace(/a=ice-options:trickle\s\n/g,"")}class d extends s.Duplex{constructor(e){if(super(e=Object.assign({allowHalfOpen:!1},e)),this._id=o(4).toString("hex").slice(0,7),this._debug("new peer %o",e),this.channelName=e.initiator?e.channelName||o(20).toString("hex"):null,this.initiator=e.initiator||!1,this.channelConfig=e.channelConfig||d.channelConfig,this.channelNegotiated=this.channelConfig.negotiated,this.config=Object.assign({},d.config,e.config),this.offerOptions=e.offerOptions||{},this.answerOptions=e.answerOptions||{},this.sdpTransform=e.sdpTransform||(e=>e),this.streams=e.streams||(e.stream?[e.stream]:[]),this.trickle=void 0===e.trickle||e.trickle,this.allowHalfTrickle=void 0!==e.allowHalfTrickle&&e.allowHalfTrickle,this.iceCompleteTimeout=e.iceCompleteTimeout||5e3,this.destroyed=!1,this.destroying=!1,this._connected=!1,this.remoteAddress=void 0,this.remoteFamily=void 0,this.remotePort=void 0,this.localAddress=void 0,this.localFamily=void 0,this.localPort=void 0,this._wrtc=e.wrtc&&"object"==typeof e.wrtc?e.wrtc:i(),!this._wrtc)throw"undefined"==typeof window?c(new Error("No WebRTC support: Specify `opts.wrtc` option in this environment"),"ERR_WEBRTC_SUPPORT"):c(new Error("No WebRTC support: Not a supported browser"),"ERR_WEBRTC_SUPPORT");this._pcReady=!1,this._channelReady=!1,this._iceComplete=!1,this._iceCompleteTimer=null,this._channel=null,this._pendingCandidates=[],this._isNegotiating=!1,this._firstNegotiation=!0,this._batchedNegotiation=!1,this._queuedNegotiation=!1,this._sendersAwaitingStable=[],this._senderMap=new Map,this._closingInterval=null,this._remoteTracks=[],this._remoteStreams=[],this._chunk=null,this._cb=null,this._interval=null;try{this._pc=new this._wrtc.RTCPeerConnection(this.config)}catch(e){return void this.destroy(c(e,"ERR_PC_CONSTRUCTOR"))}this._isReactNativeWebrtc="number"==typeof this._pc._peerConnectionId,this._pc.oniceconnectionstatechange=()=>{this._onIceStateChange()},this._pc.onicegatheringstatechange=()=>{this._onIceStateChange()},this._pc.onconnectionstatechange=()=>{this._onConnectionStateChange()},this._pc.onsignalingstatechange=()=>{this._onSignalingStateChange()},this._pc.onicecandidate=e=>{this._onIceCandidate(e)},"object"==typeof this._pc.peerIdentity&&this._pc.peerIdentity.catch((e=>{this.destroy(c(e,"ERR_PC_PEER_IDENTITY"))})),this.initiator||this.channelNegotiated?this._setupData({channel:this._pc.createDataChannel(this.channelName,this.channelConfig)}):this._pc.ondatachannel=e=>{this._setupData(e)},this.streams&&this.streams.forEach((e=>{this.addStream(e)})),this._pc.ontrack=e=>{this._onTrack(e)},this._debug("initial negotiation"),this._needsNegotiation(),this._onFinishBound=()=>{this._onFinish()},this.once("finish",this._onFinishBound)}get bufferSize(){return this._channel&&this._channel.bufferedAmount||0}get connected(){return this._connected&&"open"===this._channel.readyState}address(){return{port:this.localPort,family:this.localFamily,address:this.localAddress}}signal(e){if(!this.destroying){if(this.destroyed)throw c(new Error("cannot signal after peer is destroyed"),"ERR_DESTROYED");if("string"==typeof e)try{e=JSON.parse(e)}catch(t){e={}}this._debug("signal()"),e.renegotiate&&this.initiator&&(this._debug("got request to renegotiate"),this._needsNegotiation()),e.transceiverRequest&&this.initiator&&(this._debug("got request for transceiver"),this.addTransceiver(e.transceiverRequest.kind,e.transceiverRequest.init)),e.candidate&&(this._pc.remoteDescription&&this._pc.remoteDescription.type?this._addIceCandidate(e.candidate):this._pendingCandidates.push(e.candidate)),e.sdp&&this._pc.setRemoteDescription(new this._wrtc.RTCSessionDescription(e)).then((()=>{this.destroyed||(this._pendingCandidates.forEach((e=>{this._addIceCandidate(e)})),this._pendingCandidates=[],"offer"===this._pc.remoteDescription.type&&this._createAnswer())})).catch((e=>{this.destroy(c(e,"ERR_SET_REMOTE_DESCRIPTION"))})),e.sdp||e.candidate||e.renegotiate||e.transceiverRequest||this.destroy(c(new Error("signal() called with invalid signal data"),"ERR_SIGNALING"))}}_addIceCandidate(e){const t=new this._wrtc.RTCIceCandidate(e);this._pc.addIceCandidate(t).catch((e=>{!t.address||t.address.endsWith(".local")?("Ignoring unsupported ICE candidate.",console.warn("Ignoring unsupported ICE candidate.")):this.destroy(c(e,"ERR_ADD_ICE_CANDIDATE"))}))}send(e){if(!this.destroying){if(this.destroyed)throw c(new Error("cannot send after peer is destroyed"),"ERR_DESTROYED");this._channel.send(e)}}addTransceiver(e,t){if(!this.destroying){if(this.destroyed)throw c(new Error("cannot addTransceiver after peer is destroyed"),"ERR_DESTROYED");if(this._debug("addTransceiver()"),this.initiator)try{this._pc.addTransceiver(e,t),this._needsNegotiation()}catch(e){this.destroy(c(e,"ERR_ADD_TRANSCEIVER"))}else this.emit("signal",{type:"transceiverRequest",transceiverRequest:{kind:e,init:t}})}}addStream(e){if(!this.destroying){if(this.destroyed)throw c(new Error("cannot addStream after peer is destroyed"),"ERR_DESTROYED");this._debug("addStream()"),e.getTracks().forEach((t=>{this.addTrack(t,e)}))}}addTrack(e,t){if(this.destroying)return;if(this.destroyed)throw c(new Error("cannot addTrack after peer is destroyed"),"ERR_DESTROYED");this._debug("addTrack()");const r=this._senderMap.get(e)||new Map;let n=r.get(t);if(n)throw n.removed?c(new Error("Track has been removed. You should enable/disable tracks that you want to re-add."),"ERR_SENDER_REMOVED"):c(new Error("Track has already been added to that stream."),"ERR_SENDER_ALREADY_ADDED");n=this._pc.addTrack(e,t),r.set(t,n),this._senderMap.set(e,r),this._needsNegotiation()}replaceTrack(e,t,r){if(this.destroying)return;if(this.destroyed)throw c(new Error("cannot replaceTrack after peer is destroyed"),"ERR_DESTROYED");this._debug("replaceTrack()");const n=this._senderMap.get(e),i=n?n.get(r):null;if(!i)throw c(new Error("Cannot replace track that was never added."),"ERR_TRACK_NOT_ADDED");t&&this._senderMap.set(t,n),null!=i.replaceTrack?i.replaceTrack(t):this.destroy(c(new Error("replaceTrack is not supported in this browser"),"ERR_UNSUPPORTED_REPLACETRACK"))}removeTrack(e,t){if(this.destroying)return;if(this.destroyed)throw c(new Error("cannot removeTrack after peer is destroyed"),"ERR_DESTROYED");this._debug("removeSender()");const r=this._senderMap.get(e),n=r?r.get(t):null;if(!n)throw c(new Error("Cannot remove track that was never added."),"ERR_TRACK_NOT_ADDED");try{n.removed=!0,this._pc.removeTrack(n)}catch(e){"NS_ERROR_UNEXPECTED"===e.name?this._sendersAwaitingStable.push(n):this.destroy(c(e,"ERR_REMOVE_TRACK"))}this._needsNegotiation()}removeStream(e){if(!this.destroying){if(this.destroyed)throw c(new Error("cannot removeStream after peer is destroyed"),"ERR_DESTROYED");this._debug("removeSenders()"),e.getTracks().forEach((t=>{this.removeTrack(t,e)}))}}_needsNegotiation(){this._debug("_needsNegotiation"),this._batchedNegotiation||(this._batchedNegotiation=!0,a((()=>{this._batchedNegotiation=!1,this.initiator||!this._firstNegotiation?(this._debug("starting batched negotiation"),this.negotiate()):this._debug("non-initiator initial negotiation request discarded"),this._firstNegotiation=!1})))}negotiate(){if(!this.destroying){if(this.destroyed)throw c(new Error("cannot negotiate after peer is destroyed"),"ERR_DESTROYED");this.initiator?this._isNegotiating?(this._queuedNegotiation=!0,this._debug("already negotiating, queueing")):(this._debug("start negotiation"),setTimeout((()=>{this._createOffer()}),0)):this._isNegotiating?(this._queuedNegotiation=!0,this._debug("already negotiating, queueing")):(this._debug("requesting negotiation from initiator"),this.emit("signal",{type:"renegotiate",renegotiate:!0})),this._isNegotiating=!0}}destroy(e){this._destroy(e,(()=>{}))}_destroy(e,t){this.destroyed||this.destroying||(this.destroying=!0,this._debug("destroying (error: %s)",e&&(e.message||e)),a((()=>{if(this.destroyed=!0,this.destroying=!1,this._debug("destroy (error: %s)",e&&(e.message||e)),this.readable=this.writable=!1,this._readableState.ended||this.push(null),this._writableState.finished||this.end(),this._connected=!1,this._pcReady=!1,this._channelReady=!1,this._remoteTracks=null,this._remoteStreams=null,this._senderMap=null,clearInterval(this._closingInterval),this._closingInterval=null,clearInterval(this._interval),this._interval=null,this._chunk=null,this._cb=null,this._onFinishBound&&this.removeListener("finish",this._onFinishBound),this._onFinishBound=null,this._channel){try{this._channel.close()}catch(e){}this._channel.onmessage=null,this._channel.onopen=null,this._channel.onclose=null,this._channel.onerror=null}if(this._pc){try{this._pc.close()}catch(e){}this._pc.oniceconnectionstatechange=null,this._pc.onicegatheringstatechange=null,this._pc.onsignalingstatechange=null,this._pc.onicecandidate=null,this._pc.ontrack=null,this._pc.ondatachannel=null}this._pc=null,this._channel=null,e&&this.emit("error",e),this.emit("close"),t()})))}_setupData(e){if(!e.channel)return this.destroy(c(new Error("Data channel event is missing `channel` property"),"ERR_DATA_CHANNEL"));this._channel=e.channel,this._channel.binaryType="arraybuffer","number"==typeof this._channel.bufferedAmountLowThreshold&&(this._channel.bufferedAmountLowThreshold=l),this.channelName=this._channel.label,this._channel.onmessage=e=>{this._onChannelMessage(e)},this._channel.onbufferedamountlow=()=>{this._onChannelBufferedAmountLow()},this._channel.onopen=()=>{this._onChannelOpen()},this._channel.onclose=()=>{this._onChannelClose()},this._channel.onerror=e=>{const t=e.error instanceof Error?e.error:new Error(`Datachannel error: ${e.message} ${e.filename}:${e.lineno}:${e.colno}`);this.destroy(c(t,"ERR_DATA_CHANNEL"))};let t=!1;this._closingInterval=setInterval((()=>{this._channel&&"closing"===this._channel.readyState?(t&&this._onChannelClose(),t=!0):t=!1}),5e3)}_read(){}_write(e,t,r){if(this.destroyed)return r(c(new Error("cannot write after peer is destroyed"),"ERR_DATA_CHANNEL"));if(this._connected){try{this.send(e)}catch(e){return this.destroy(c(e,"ERR_DATA_CHANNEL"))}this._channel.bufferedAmount>l?(this._debug("start backpressure: bufferedAmount %d",this._channel.bufferedAmount),this._cb=r):r(null)}else this._debug("write before connect"),this._chunk=e,this._cb=r}_onFinish(){if(this.destroyed)return;const e=()=>{setTimeout((()=>this.destroy()),1e3)};this._connected?e():this.once("connect",e)}_startIceCompleteTimeout(){this.destroyed||this._iceCompleteTimer||(this._debug("started iceComplete timeout"),this._iceCompleteTimer=setTimeout((()=>{this._iceComplete||(this._iceComplete=!0,this._debug("iceComplete timeout completed"),this.emit("iceTimeout"),this.emit("_iceComplete"))}),this.iceCompleteTimeout))}_createOffer(){this.destroyed||this._pc.createOffer(this.offerOptions).then((e=>{if(this.destroyed)return;this.trickle||this.allowHalfTrickle||(e.sdp=h(e.sdp)),e.sdp=this.sdpTransform(e.sdp);const t=()=>{if(this.destroyed)return;const t=this._pc.localDescription||e;this._debug("signal"),this.emit("signal",{type:t.type,sdp:t.sdp})};this._pc.setLocalDescription(e).then((()=>{this._debug("createOffer success"),this.destroyed||(this.trickle||this._iceComplete?t():this.once("_iceComplete",t))})).catch((e=>{this.destroy(c(e,"ERR_SET_LOCAL_DESCRIPTION"))}))})).catch((e=>{this.destroy(c(e,"ERR_CREATE_OFFER"))}))}_requestMissingTransceivers(){this._pc.getTransceivers&&this._pc.getTransceivers().forEach((e=>{e.mid||!e.sender.track||e.requested||(e.requested=!0,this.addTransceiver(e.sender.track.kind))}))}_createAnswer(){this.destroyed||this._pc.createAnswer(this.answerOptions).then((e=>{if(this.destroyed)return;this.trickle||this.allowHalfTrickle||(e.sdp=h(e.sdp)),e.sdp=this.sdpTransform(e.sdp);const t=()=>{if(this.destroyed)return;const t=this._pc.localDescription||e;this._debug("signal"),this.emit("signal",{type:t.type,sdp:t.sdp}),this.initiator||this._requestMissingTransceivers()};this._pc.setLocalDescription(e).then((()=>{this.destroyed||(this.trickle||this._iceComplete?t():this.once("_iceComplete",t))})).catch((e=>{this.destroy(c(e,"ERR_SET_LOCAL_DESCRIPTION"))}))})).catch((e=>{this.destroy(c(e,"ERR_CREATE_ANSWER"))}))}_onConnectionStateChange(){this.destroyed||"failed"===this._pc.connectionState&&this.destroy(c(new Error("Connection failed."),"ERR_CONNECTION_FAILURE"))}_onIceStateChange(){if(this.destroyed)return;const e=this._pc.iceConnectionState,t=this._pc.iceGatheringState;this._debug("iceStateChange (connection: %s) (gathering: %s)",e,t),this.emit("iceStateChange",e,t),"connected"!==e&&"completed"!==e||(this._pcReady=!0,this._maybeReady()),"failed"===e&&this.destroy(c(new Error("Ice connection failed."),"ERR_ICE_CONNECTION_FAILURE")),"closed"===e&&this.destroy(c(new Error("Ice connection closed."),"ERR_ICE_CONNECTION_CLOSED"))}getStats(e){const t=e=>("[object Array]"===Object.prototype.toString.call(e.values)&&e.values.forEach((t=>{Object.assign(e,t)})),e);0===this._pc.getStats.length||this._isReactNativeWebrtc?this._pc.getStats().then((r=>{const n=[];r.forEach((e=>{n.push(t(e))})),e(null,n)}),(t=>e(t))):this._pc.getStats.length>0?this._pc.getStats((r=>{if(this.destroyed)return;const n=[];r.result().forEach((e=>{const r={};e.names().forEach((t=>{r[t]=e.stat(t)})),r.id=e.id,r.type=e.type,r.timestamp=e.timestamp,n.push(t(r))})),e(null,n)}),(t=>e(t))):e(null,[])}_maybeReady(){if(this._debug("maybeReady pc %s channel %s",this._pcReady,this._channelReady),this._connected||this._connecting||!this._pcReady||!this._channelReady)return;this._connecting=!0;const e=()=>{this.destroyed||this.getStats(((t,r)=>{if(this.destroyed)return;t&&(r=[]);const n={},i={},o={};let s=!1;r.forEach((e=>{"remotecandidate"!==e.type&&"remote-candidate"!==e.type||(n[e.id]=e),"localcandidate"!==e.type&&"local-candidate"!==e.type||(i[e.id]=e),"candidatepair"!==e.type&&"candidate-pair"!==e.type||(o[e.id]=e)}));const a=e=>{s=!0;let t=i[e.localCandidateId];t&&(t.ip||t.address)?(this.localAddress=t.ip||t.address,this.localPort=Number(t.port)):t&&t.ipAddress?(this.localAddress=t.ipAddress,this.localPort=Number(t.portNumber)):"string"==typeof e.googLocalAddress&&(t=e.googLocalAddress.split(":"),this.localAddress=t[0],this.localPort=Number(t[1])),this.localAddress&&(this.localFamily=this.localAddress.includes(":")?"IPv6":"IPv4");let r=n[e.remoteCandidateId];r&&(r.ip||r.address)?(this.remoteAddress=r.ip||r.address,this.remotePort=Number(r.port)):r&&r.ipAddress?(this.remoteAddress=r.ipAddress,this.remotePort=Number(r.portNumber)):"string"==typeof e.googRemoteAddress&&(r=e.googRemoteAddress.split(":"),this.remoteAddress=r[0],this.remotePort=Number(r[1])),this.remoteAddress&&(this.remoteFamily=this.remoteAddress.includes(":")?"IPv6":"IPv4"),this._debug("connect local: %s:%s remote: %s:%s",this.localAddress,this.localPort,this.remoteAddress,this.remotePort)};if(r.forEach((e=>{"transport"===e.type&&e.selectedCandidatePairId&&a(o[e.selectedCandidatePairId]),("googCandidatePair"===e.type&&"true"===e.googActiveConnection||("candidatepair"===e.type||"candidate-pair"===e.type)&&e.selected)&&a(e)})),s||Object.keys(o).length&&!Object.keys(i).length){if(this._connecting=!1,this._connected=!0,this._chunk){try{this.send(this._chunk)}catch(t){return this.destroy(c(t,"ERR_DATA_CHANNEL"))}this._chunk=null,this._debug('sent chunk from "write before connect"');const e=this._cb;this._cb=null,e(null)}"number"!=typeof this._channel.bufferedAmountLowThreshold&&(this._interval=setInterval((()=>this._onInterval()),150),this._interval.unref&&this._interval.unref()),this._debug("connect"),this.emit("connect")}else setTimeout(e,100)}))};e()}_onInterval(){!this._cb||!this._channel||this._channel.bufferedAmount>l||this._onChannelBufferedAmountLow()}_onSignalingStateChange(){this.destroyed||("stable"===this._pc.signalingState&&(this._isNegotiating=!1,this._debug("flushing sender queue",this._sendersAwaitingStable),this._sendersAwaitingStable.forEach((e=>{this._pc.removeTrack(e),this._queuedNegotiation=!0})),this._sendersAwaitingStable=[],this._queuedNegotiation?(this._debug("flushing negotiation queue"),this._queuedNegotiation=!1,this._needsNegotiation()):(this._debug("negotiated"),this.emit("negotiated"))),this._debug("signalingStateChange %s",this._pc.signalingState),this.emit("signalingStateChange",this._pc.signalingState))}_onIceCandidate(e){this.destroyed||(e.candidate&&this.trickle?this.emit("signal",{type:"candidate",candidate:{candidate:e.candidate.candidate,sdpMLineIndex:e.candidate.sdpMLineIndex,sdpMid:e.candidate.sdpMid}}):e.candidate||this._iceComplete||(this._iceComplete=!0,this.emit("_iceComplete")),e.candidate&&this._startIceCompleteTimeout())}_onChannelMessage(e){if(this.destroyed)return;let t=e.data;t instanceof ArrayBuffer&&(t=u.from(t)),this.push(t)}_onChannelBufferedAmountLow(){if(this.destroyed||!this._cb)return;this._debug("ending backpressure: bufferedAmount %d",this._channel.bufferedAmount);const e=this._cb;this._cb=null,e(null)}_onChannelOpen(){this._connected||this.destroyed||(this._debug("on channel open"),this._channelReady=!0,this._maybeReady())}_onChannelClose(){this.destroyed||(this._debug("on channel close"),this.destroy())}_onTrack(e){this.destroyed||e.streams.forEach((t=>{this._debug("on track"),this.emit("track",e.track,t),this._remoteTracks.push({track:e.track,stream:t}),this._remoteStreams.some((e=>e.id===t.id))||(this._remoteStreams.push(t),a((()=>{this._debug("on stream"),this.emit("stream",t)})))}))}_debug(){const e=[].slice.call(arguments);e[0]="["+this._id+"] "+e[0],n.apply(null,e)}}d.WEBRTC_SUPPORT=!!i(),d.config={iceServers:[{urls:["stun:stun.l.google.com:19302","stun:global.stun.twilio.com:3478"]}],sdpSemantics:"unified-plan"},d.channelConfig={},e.exports=d},2553:(e,t,r)=>{"use strict";var n=r(9509).Buffer,i=n.isEncoding||function(e){switch((e=""+e)&&e.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function o(e){var t;switch(this.encoding=function(e){var t=function(e){if(!e)return"utf8";for(var t;;)switch(e){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return e;default:if(t)return;e=(""+e).toLowerCase(),t=!0}}(e);if("string"!=typeof t&&(n.isEncoding===i||!i(e)))throw new Error("Unknown encoding: "+e);return t||e}(e),this.encoding){case"utf16le":this.text=c,this.end=u,t=4;break;case"utf8":this.fillLast=a,t=4;break;case"base64":this.text=l,this.end=h,t=3;break;default:return this.write=d,void(this.end=f)}this.lastNeed=0,this.lastTotal=0,this.lastChar=n.allocUnsafe(t)}function s(e){return e<=127?0:e>>5==6?2:e>>4==14?3:e>>3==30?4:e>>6==2?-1:-2}function a(e){var t=this.lastTotal-this.lastNeed,r=function(e,t,r){if(128!=(192&t[0]))return e.lastNeed=0,"�";if(e.lastNeed>1&&t.length>1){if(128!=(192&t[1]))return e.lastNeed=1,"�";if(e.lastNeed>2&&t.length>2&&128!=(192&t[2]))return e.lastNeed=2,"�"}}(this,e);return void 0!==r?r:this.lastNeed<=e.length?(e.copy(this.lastChar,t,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(e.copy(this.lastChar,t,0,e.length),void(this.lastNeed-=e.length))}function c(e,t){if((e.length-t)%2==0){var r=e.toString("utf16le",t);if(r){var n=r.charCodeAt(r.length-1);if(n>=55296&&n<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1],r.slice(0,-1)}return r}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=e[e.length-1],e.toString("utf16le",t,e.length-1)}function u(e){var t=e&&e.length?this.write(e):"";if(this.lastNeed){var r=this.lastTotal-this.lastNeed;return t+this.lastChar.toString("utf16le",0,r)}return t}function l(e,t){var r=(e.length-t)%3;return 0===r?e.toString("base64",t):(this.lastNeed=3-r,this.lastTotal=3,1===r?this.lastChar[0]=e[e.length-1]:(this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1]),e.toString("base64",t,e.length-r))}function h(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+this.lastChar.toString("base64",0,3-this.lastNeed):t}function d(e){return e.toString(this.encoding)}function f(e){return e&&e.length?this.write(e):""}t.s=o,o.prototype.write=function(e){if(0===e.length)return"";var t,r;if(this.lastNeed){if(void 0===(t=this.fillLast(e)))return"";r=this.lastNeed,this.lastNeed=0}else r=0;return r<e.length?t?t+this.text(e,r):this.text(e,r):t||""},o.prototype.end=function(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+"�":t},o.prototype.text=function(e,t){var r=function(e,t,r){var n=t.length-1;if(n<r)return 0;var i=s(t[n]);return i>=0?(i>0&&(e.lastNeed=i-1),i):--n<r||-2===i?0:(i=s(t[n]))>=0?(i>0&&(e.lastNeed=i-2),i):--n<r||-2===i?0:(i=s(t[n]))>=0?(i>0&&(2===i?i=0:e.lastNeed=i-3),i):0}(this,e,t);if(!this.lastNeed)return e.toString("utf8",t);this.lastTotal=r;var n=e.length-(r-this.lastNeed);return e.copy(this.lastChar,0,n),e.toString("utf8",t,n)},o.prototype.fillLast=function(e){if(this.lastNeed<=e.length)return e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,e.length),this.lastNeed-=e.length}},540:function(e,t){!function(e){"use strict";function t(){for(var e=arguments.length,t=Array(e),r=0;r<e;r++)t[r]=arguments[r];if(t.length>1){t[0]=t[0].slice(0,-1);for(var n=t.length-1,i=1;i<n;++i)t[i]=t[i].slice(1,-1);return t[n]=t[n].slice(1),t.join("")}return t[0]}function r(e){return"(?:"+e+")"}function n(e){return void 0===e?"undefined":null===e?"null":Object.prototype.toString.call(e).split(" ").pop().split("]").shift().toLowerCase()}function i(e){return e.toUpperCase()}function o(e){var n="[A-Za-z]",i="[0-9]",o=t(i,"[A-Fa-f]"),s=r(r("%[EFef]"+o+"%"+o+o+"%"+o+o)+"|"+r("%[89A-Fa-f]"+o+"%"+o+o)+"|"+r("%"+o+o)),a="[\\!\\$\\&\\'\\(\\)\\*\\+\\,\\;\\=]",c=t("[\\:\\/\\?\\#\\[\\]\\@]",a),u=e?"[\\uE000-\\uF8FF]":"[]",l=t(n,i,"[\\-\\.\\_\\~]",e?"[\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]":"[]"),h=r(n+t(n,i,"[\\+\\-\\.]")+"*"),d=r(r(s+"|"+t(l,a,"[\\:]"))+"*"),f=(r(r("25[0-5]")+"|"+r("2[0-4]"+i)+"|"+r("1"+i+i)+"|"+r("[1-9]"+i)+"|"+i),r(r("25[0-5]")+"|"+r("2[0-4]"+i)+"|"+r("1"+i+i)+"|"+r("0?[1-9]"+i)+"|0?0?"+i)),p=r(f+"\\."+f+"\\."+f+"\\."+f),m=r(o+"{1,4}"),y=r(r(m+"\\:"+m)+"|"+p),v=r(r(m+"\\:")+"{6}"+y),g=r("\\:\\:"+r(m+"\\:")+"{5}"+y),b=r(r(m)+"?\\:\\:"+r(m+"\\:")+"{4}"+y),w=r(r(r(m+"\\:")+"{0,1}"+m)+"?\\:\\:"+r(m+"\\:")+"{3}"+y),_=r(r(r(m+"\\:")+"{0,2}"+m)+"?\\:\\:"+r(m+"\\:")+"{2}"+y),E=r(r(r(m+"\\:")+"{0,3}"+m)+"?\\:\\:"+m+"\\:"+y),S=r(r(r(m+"\\:")+"{0,4}"+m)+"?\\:\\:"+y),C=r(r(r(m+"\\:")+"{0,5}"+m)+"?\\:\\:"+m),k=r(r(r(m+"\\:")+"{0,6}"+m)+"?\\:\\:"),x=r([v,g,b,w,_,E,S,C,k].join("|")),O=r(r(l+"|"+s)+"+"),P=(r(x+"\\%25"+O),r(x+r("\\%25|\\%(?!"+o+"{2})")+O)),R=r("[vV]"+o+"+\\."+t(l,a,"[\\:]")+"+"),$=r("\\["+r(P+"|"+x+"|"+R)+"\\]"),D=r(r(s+"|"+t(l,a))+"*"),I=r($+"|"+p+"(?!"+D+")|"+D),j=r(i+"*"),T=r(r(d+"@")+"?"+I+r("\\:"+j)+"?"),A=r(s+"|"+t(l,a,"[\\:\\@]")),N=r(A+"*"),M=r(A+"+"),L=r(r(s+"|"+t(l,a,"[\\@]"))+"+"),B=r(r("\\/"+N)+"*"),F=r("\\/"+r(M+B)+"?"),q=r(L+B),U=r(M+B),K="(?!"+A+")",V=(r(B+"|"+F+"|"+q+"|"+U+"|"+K),r(r(A+"|"+t("[\\/\\?]",u))+"*")),H=r(r(A+"|[\\/\\?]")+"*"),z=r(r("\\/\\/"+T+B)+"|"+F+"|"+U+"|"+K),W=r(h+"\\:"+z+r("\\?"+V)+"?"+r("\\#"+H)+"?"),Q=r(r("\\/\\/"+T+B)+"|"+F+"|"+q+"|"+K),G=r(Q+r("\\?"+V)+"?"+r("\\#"+H)+"?");return r(W+"|"+G),r(h+"\\:"+z+r("\\?"+V)+"?"),r(r("\\/\\/("+r("("+d+")@")+"?("+I+")"+r("\\:("+j+")")+"?)")+"?("+B+"|"+F+"|"+U+"|"+K+")"),r("\\?("+V+")"),r("\\#("+H+")"),r(r("\\/\\/("+r("("+d+")@")+"?("+I+")"+r("\\:("+j+")")+"?)")+"?("+B+"|"+F+"|"+q+"|"+K+")"),r("\\?("+V+")"),r("\\#("+H+")"),r(r("\\/\\/("+r("("+d+")@")+"?("+I+")"+r("\\:("+j+")")+"?)")+"?("+B+"|"+F+"|"+U+"|"+K+")"),r("\\?("+V+")"),r("\\#("+H+")"),r("("+d+")@"),r("\\:("+j+")"),{NOT_SCHEME:new RegExp(t("[^]",n,i,"[\\+\\-\\.]"),"g"),NOT_USERINFO:new RegExp(t("[^\\%\\:]",l,a),"g"),NOT_HOST:new RegExp(t("[^\\%\\[\\]\\:]",l,a),"g"),NOT_PATH:new RegExp(t("[^\\%\\/\\:\\@]",l,a),"g"),NOT_PATH_NOSCHEME:new RegExp(t("[^\\%\\/\\@]",l,a),"g"),NOT_QUERY:new RegExp(t("[^\\%]",l,a,"[\\:\\@\\/\\?]",u),"g"),NOT_FRAGMENT:new RegExp(t("[^\\%]",l,a,"[\\:\\@\\/\\?]"),"g"),ESCAPE:new RegExp(t("[^]",l,a),"g"),UNRESERVED:new RegExp(l,"g"),OTHER_CHARS:new RegExp(t("[^\\%]",l,c),"g"),PCT_ENCODED:new RegExp(s,"g"),IPV4ADDRESS:new RegExp("^("+p+")$"),IPV6ADDRESS:new RegExp("^\\[?("+x+")"+r(r("\\%25|\\%(?!"+o+"{2})")+"("+O+")")+"?\\]?$")}}var s=o(!1),a=o(!0),c=function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var r=[],n=!0,i=!1,o=void 0;try{for(var s,a=e[Symbol.iterator]();!(n=(s=a.next()).done)&&(r.push(s.value),!t||r.length!==t);n=!0);}catch(e){i=!0,o=e}finally{try{!n&&a.return&&a.return()}finally{if(i)throw o}}return r}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")},u=2147483647,l=36,h=/^xn--/,d=/[^\0-\x7E]/,f=/[\x2E\u3002\uFF0E\uFF61]/g,p={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},m=Math.floor,y=String.fromCharCode;function v(e){throw new RangeError(p[e])}function g(e,t){var r=e.split("@"),n="";return r.length>1&&(n=r[0]+"@",e=r[1]),n+function(e,t){for(var r=[],n=e.length;n--;)r[n]=t(e[n]);return r}((e=e.replace(f,".")).split("."),t).join(".")}function b(e){for(var t=[],r=0,n=e.length;r<n;){var i=e.charCodeAt(r++);if(i>=55296&&i<=56319&&r<n){var o=e.charCodeAt(r++);56320==(64512&o)?t.push(((1023&i)<<10)+(1023&o)+65536):(t.push(i),r--)}else t.push(i)}return t}var w=function(e,t){return e+22+75*(e<26)-((0!=t)<<5)},_=function(e,t,r){var n=0;for(e=r?m(e/700):e>>1,e+=m(e/t);e>455;n+=l)e=m(e/35);return m(n+36*e/(e+38))},E=function(e){var t,r=[],n=e.length,i=0,o=128,s=72,a=e.lastIndexOf("-");a<0&&(a=0);for(var c=0;c<a;++c)e.charCodeAt(c)>=128&&v("not-basic"),r.push(e.charCodeAt(c));for(var h=a>0?a+1:0;h<n;){for(var d=i,f=1,p=l;;p+=l){h>=n&&v("invalid-input");var y=(t=e.charCodeAt(h++))-48<10?t-22:t-65<26?t-65:t-97<26?t-97:l;(y>=l||y>m((u-i)/f))&&v("overflow"),i+=y*f;var g=p<=s?1:p>=s+26?26:p-s;if(y<g)break;var b=l-g;f>m(u/b)&&v("overflow"),f*=b}var w=r.length+1;s=_(i-d,w,0==d),m(i/w)>u-o&&v("overflow"),o+=m(i/w),i%=w,r.splice(i++,0,o)}return String.fromCodePoint.apply(String,r)},S=function(e){var t=[],r=(e=b(e)).length,n=128,i=0,o=72,s=!0,a=!1,c=void 0;try{for(var h,d=e[Symbol.iterator]();!(s=(h=d.next()).done);s=!0){var f=h.value;f<128&&t.push(y(f))}}catch(e){a=!0,c=e}finally{try{!s&&d.return&&d.return()}finally{if(a)throw c}}var p=t.length,g=p;for(p&&t.push("-");g<r;){var E=u,S=!0,C=!1,k=void 0;try{for(var x,O=e[Symbol.iterator]();!(S=(x=O.next()).done);S=!0){var P=x.value;P>=n&&P<E&&(E=P)}}catch(e){C=!0,k=e}finally{try{!S&&O.return&&O.return()}finally{if(C)throw k}}var R=g+1;E-n>m((u-i)/R)&&v("overflow"),i+=(E-n)*R,n=E;var $=!0,D=!1,I=void 0;try{for(var j,T=e[Symbol.iterator]();!($=(j=T.next()).done);$=!0){var A=j.value;if(A<n&&++i>u&&v("overflow"),A==n){for(var N=i,M=l;;M+=l){var L=M<=o?1:M>=o+26?26:M-o;if(N<L)break;var B=N-L,F=l-L;t.push(y(w(L+B%F,0))),N=m(B/F)}t.push(y(w(N,0))),o=_(i,R,g==p),i=0,++g}}}catch(e){D=!0,I=e}finally{try{!$&&T.return&&T.return()}finally{if(D)throw I}}++i,++n}return t.join("")},C={version:"2.1.0",ucs2:{decode:b,encode:function(e){return String.fromCodePoint.apply(String,function(e){if(Array.isArray(e)){for(var t=0,r=Array(e.length);t<e.length;t++)r[t]=e[t];return r}return Array.from(e)}(e))}},decode:E,encode:S,toASCII:function(e){return g(e,(function(e){return d.test(e)?"xn--"+S(e):e}))},toUnicode:function(e){return g(e,(function(e){return h.test(e)?E(e.slice(4).toLowerCase()):e}))}},k={};function x(e){var t=e.charCodeAt(0);return t<16?"%0"+t.toString(16).toUpperCase():t<128?"%"+t.toString(16).toUpperCase():t<2048?"%"+(t>>6|192).toString(16).toUpperCase()+"%"+(63&t|128).toString(16).toUpperCase():"%"+(t>>12|224).toString(16).toUpperCase()+"%"+(t>>6&63|128).toString(16).toUpperCase()+"%"+(63&t|128).toString(16).toUpperCase()}function O(e){for(var t="",r=0,n=e.length;r<n;){var i=parseInt(e.substr(r+1,2),16);if(i<128)t+=String.fromCharCode(i),r+=3;else if(i>=194&&i<224){if(n-r>=6){var o=parseInt(e.substr(r+4,2),16);t+=String.fromCharCode((31&i)<<6|63&o)}else t+=e.substr(r,6);r+=6}else if(i>=224){if(n-r>=9){var s=parseInt(e.substr(r+4,2),16),a=parseInt(e.substr(r+7,2),16);t+=String.fromCharCode((15&i)<<12|(63&s)<<6|63&a)}else t+=e.substr(r,9);r+=9}else t+=e.substr(r,3),r+=3}return t}function P(e,t){function r(e){var r=O(e);return r.match(t.UNRESERVED)?r:e}return e.scheme&&(e.scheme=String(e.scheme).replace(t.PCT_ENCODED,r).toLowerCase().replace(t.NOT_SCHEME,"")),void 0!==e.userinfo&&(e.userinfo=String(e.userinfo).replace(t.PCT_ENCODED,r).replace(t.NOT_USERINFO,x).replace(t.PCT_ENCODED,i)),void 0!==e.host&&(e.host=String(e.host).replace(t.PCT_ENCODED,r).toLowerCase().replace(t.NOT_HOST,x).replace(t.PCT_ENCODED,i)),void 0!==e.path&&(e.path=String(e.path).replace(t.PCT_ENCODED,r).replace(e.scheme?t.NOT_PATH:t.NOT_PATH_NOSCHEME,x).replace(t.PCT_ENCODED,i)),void 0!==e.query&&(e.query=String(e.query).replace(t.PCT_ENCODED,r).replace(t.NOT_QUERY,x).replace(t.PCT_ENCODED,i)),void 0!==e.fragment&&(e.fragment=String(e.fragment).replace(t.PCT_ENCODED,r).replace(t.NOT_FRAGMENT,x).replace(t.PCT_ENCODED,i)),e}function R(e){return e.replace(/^0*(.*)/,"$1")||"0"}function $(e,t){var r=e.match(t.IPV4ADDRESS)||[],n=c(r,2)[1];return n?n.split(".").map(R).join("."):e}function D(e,t){var r=e.match(t.IPV6ADDRESS)||[],n=c(r,3),i=n[1],o=n[2];if(i){for(var s=i.toLowerCase().split("::").reverse(),a=c(s,2),u=a[0],l=a[1],h=l?l.split(":").map(R):[],d=u.split(":").map(R),f=t.IPV4ADDRESS.test(d[d.length-1]),p=f?7:8,m=d.length-p,y=Array(p),v=0;v<p;++v)y[v]=h[v]||d[m+v]||"";f&&(y[p-1]=$(y[p-1],t));var g=y.reduce((function(e,t,r){if(!t||"0"===t){var n=e[e.length-1];n&&n.index+n.length===r?n.length++:e.push({index:r,length:1})}return e}),[]).sort((function(e,t){return t.length-e.length}))[0],b=void 0;if(g&&g.length>1){var w=y.slice(0,g.index),_=y.slice(g.index+g.length);b=w.join(":")+"::"+_.join(":")}else b=y.join(":");return o&&(b+="%"+o),b}return e}var I=/^(?:([^:\/?#]+):)?(?:\/\/((?:([^\/?#@]*)@)?(\[[^\/?#\]]+\]|[^\/?#:]*)(?:\:(\d*))?))?([^?#]*)(?:\?([^#]*))?(?:#((?:.|\n|\r)*))?/i,j=void 0==="".match(/(){0}/)[1];function T(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r={},n=!1!==t.iri?a:s;"suffix"===t.reference&&(e=(t.scheme?t.scheme+":":"")+"//"+e);var i=e.match(I);if(i){j?(r.scheme=i[1],r.userinfo=i[3],r.host=i[4],r.port=parseInt(i[5],10),r.path=i[6]||"",r.query=i[7],r.fragment=i[8],isNaN(r.port)&&(r.port=i[5])):(r.scheme=i[1]||void 0,r.userinfo=-1!==e.indexOf("@")?i[3]:void 0,r.host=-1!==e.indexOf("//")?i[4]:void 0,r.port=parseInt(i[5],10),r.path=i[6]||"",r.query=-1!==e.indexOf("?")?i[7]:void 0,r.fragment=-1!==e.indexOf("#")?i[8]:void 0,isNaN(r.port)&&(r.port=e.match(/\/\/(?:.|\n)*\:(?:\/|\?|\#|$)/)?i[4]:void 0)),r.host&&(r.host=D($(r.host,n),n)),void 0!==r.scheme||void 0!==r.userinfo||void 0!==r.host||void 0!==r.port||r.path||void 0!==r.query?void 0===r.scheme?r.reference="relative":void 0===r.fragment?r.reference="absolute":r.reference="uri":r.reference="same-document",t.reference&&"suffix"!==t.reference&&t.reference!==r.reference&&(r.error=r.error||"URI is not a "+t.reference+" reference.");var o=k[(t.scheme||r.scheme||"").toLowerCase()];if(t.unicodeSupport||o&&o.unicodeSupport)P(r,n);else{if(r.host&&(t.domainHost||o&&o.domainHost))try{r.host=C.toASCII(r.host.replace(n.PCT_ENCODED,O).toLowerCase())}catch(e){r.error=r.error||"Host's domain name can not be converted to ASCII via punycode: "+e}P(r,s)}o&&o.parse&&o.parse(r,t)}else r.error=r.error||"URI can not be parsed.";return r}var A=/^\.\.?\//,N=/^\/\.(\/|$)/,M=/^\/\.\.(\/|$)/,L=/^\/?(?:.|\n)*?(?=\/|$)/;function B(e){for(var t=[];e.length;)if(e.match(A))e=e.replace(A,"");else if(e.match(N))e=e.replace(N,"/");else if(e.match(M))e=e.replace(M,"/"),t.pop();else if("."===e||".."===e)e="";else{var r=e.match(L);if(!r)throw new Error("Unexpected dot segment condition");var n=r[0];e=e.slice(n.length),t.push(n)}return t.join("")}function F(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.iri?a:s,n=[],i=k[(t.scheme||e.scheme||"").toLowerCase()];if(i&&i.serialize&&i.serialize(e,t),e.host)if(r.IPV6ADDRESS.test(e.host));else if(t.domainHost||i&&i.domainHost)try{e.host=t.iri?C.toUnicode(e.host):C.toASCII(e.host.replace(r.PCT_ENCODED,O).toLowerCase())}catch(r){e.error=e.error||"Host's domain name can not be converted to "+(t.iri?"Unicode":"ASCII")+" via punycode: "+r}P(e,r),"suffix"!==t.reference&&e.scheme&&(n.push(e.scheme),n.push(":"));var o=function(e,t){var r=!1!==t.iri?a:s,n=[];return void 0!==e.userinfo&&(n.push(e.userinfo),n.push("@")),void 0!==e.host&&n.push(D($(String(e.host),r),r).replace(r.IPV6ADDRESS,(function(e,t,r){return"["+t+(r?"%25"+r:"")+"]"}))),"number"!=typeof e.port&&"string"!=typeof e.port||(n.push(":"),n.push(String(e.port))),n.length?n.join(""):void 0}(e,t);if(void 0!==o&&("suffix"!==t.reference&&n.push("//"),n.push(o),e.path&&"/"!==e.path.charAt(0)&&n.push("/")),void 0!==e.path){var c=e.path;t.absolutePath||i&&i.absolutePath||(c=B(c)),void 0===o&&(c=c.replace(/^\/\//,"/%2F")),n.push(c)}return void 0!==e.query&&(n.push("?"),n.push(e.query)),void 0!==e.fragment&&(n.push("#"),n.push(e.fragment)),n.join("")}function q(e,t){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},n={};return arguments[3]||(e=T(F(e,r),r),t=T(F(t,r),r)),!(r=r||{}).tolerant&&t.scheme?(n.scheme=t.scheme,n.userinfo=t.userinfo,n.host=t.host,n.port=t.port,n.path=B(t.path||""),n.query=t.query):(void 0!==t.userinfo||void 0!==t.host||void 0!==t.port?(n.userinfo=t.userinfo,n.host=t.host,n.port=t.port,n.path=B(t.path||""),n.query=t.query):(t.path?("/"===t.path.charAt(0)?n.path=B(t.path):(void 0===e.userinfo&&void 0===e.host&&void 0===e.port||e.path?e.path?n.path=e.path.slice(0,e.path.lastIndexOf("/")+1)+t.path:n.path=t.path:n.path="/"+t.path,n.path=B(n.path)),n.query=t.query):(n.path=e.path,void 0!==t.query?n.query=t.query:n.query=e.query),n.userinfo=e.userinfo,n.host=e.host,n.port=e.port),n.scheme=e.scheme),n.fragment=t.fragment,n}function U(e,t){return e&&e.toString().replace(t&&t.iri?a.PCT_ENCODED:s.PCT_ENCODED,O)}var K={scheme:"http",domainHost:!0,parse:function(e,t){return e.host||(e.error=e.error||"HTTP URIs must have a host."),e},serialize:function(e,t){var r="https"===String(e.scheme).toLowerCase();return e.port!==(r?443:80)&&""!==e.port||(e.port=void 0),e.path||(e.path="/"),e}},V={scheme:"https",domainHost:K.domainHost,parse:K.parse,serialize:K.serialize};function H(e){return"boolean"==typeof e.secure?e.secure:"wss"===String(e.scheme).toLowerCase()}var z={scheme:"ws",domainHost:!0,parse:function(e,t){var r=e;return r.secure=H(r),r.resourceName=(r.path||"/")+(r.query?"?"+r.query:""),r.path=void 0,r.query=void 0,r},serialize:function(e,t){if(e.port!==(H(e)?443:80)&&""!==e.port||(e.port=void 0),"boolean"==typeof e.secure&&(e.scheme=e.secure?"wss":"ws",e.secure=void 0),e.resourceName){var r=e.resourceName.split("?"),n=c(r,2),i=n[0],o=n[1];e.path=i&&"/"!==i?i:void 0,e.query=o,e.resourceName=void 0}return e.fragment=void 0,e}},W={scheme:"wss",domainHost:z.domainHost,parse:z.parse,serialize:z.serialize},Q={},G="[A-Za-z0-9\\-\\.\\_\\~\\xA0-\\u200D\\u2010-\\u2029\\u202F-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]",J="[0-9A-Fa-f]",Y=r(r("%[EFef]"+J+"%"+J+J+"%"+J+J)+"|"+r("%[89A-Fa-f]"+J+"%"+J+J)+"|"+r("%"+J+J)),X=t("[\\!\\$\\%\\'\\(\\)\\*\\+\\,\\-\\.0-9\\<\\>A-Z\\x5E-\\x7E]",'[\\"\\\\]'),Z=new RegExp(G,"g"),ee=new RegExp(Y,"g"),te=new RegExp(t("[^]","[A-Za-z0-9\\!\\$\\%\\'\\*\\+\\-\\^\\_\\`\\{\\|\\}\\~]","[\\.]",'[\\"]',X),"g"),re=new RegExp(t("[^]",G,"[\\!\\$\\'\\(\\)\\*\\+\\,\\;\\:\\@]"),"g"),ne=re;function ie(e){var t=O(e);return t.match(Z)?t:e}var oe={scheme:"mailto",parse:function(e,t){var r=e,n=r.to=r.path?r.path.split(","):[];if(r.path=void 0,r.query){for(var i=!1,o={},s=r.query.split("&"),a=0,c=s.length;a<c;++a){var u=s[a].split("=");switch(u[0]){case"to":for(var l=u[1].split(","),h=0,d=l.length;h<d;++h)n.push(l[h]);break;case"subject":r.subject=U(u[1],t);break;case"body":r.body=U(u[1],t);break;default:i=!0,o[U(u[0],t)]=U(u[1],t)}}i&&(r.headers=o)}r.query=void 0;for(var f=0,p=n.length;f<p;++f){var m=n[f].split("@");if(m[0]=U(m[0]),t.unicodeSupport)m[1]=U(m[1],t).toLowerCase();else try{m[1]=C.toASCII(U(m[1],t).toLowerCase())}catch(e){r.error=r.error||"Email address's domain name can not be converted to ASCII via punycode: "+e}n[f]=m.join("@")}return r},serialize:function(e,t){var r,n=e,o=null!=(r=e.to)?r instanceof Array?r:"number"!=typeof r.length||r.split||r.setInterval||r.call?[r]:Array.prototype.slice.call(r):[];if(o){for(var s=0,a=o.length;s<a;++s){var c=String(o[s]),u=c.lastIndexOf("@"),l=c.slice(0,u).replace(ee,ie).replace(ee,i).replace(te,x),h=c.slice(u+1);try{h=t.iri?C.toUnicode(h):C.toASCII(U(h,t).toLowerCase())}catch(e){n.error=n.error||"Email address's domain name can not be converted to "+(t.iri?"Unicode":"ASCII")+" via punycode: "+e}o[s]=l+"@"+h}n.path=o.join(",")}var d=e.headers=e.headers||{};e.subject&&(d.subject=e.subject),e.body&&(d.body=e.body);var f=[];for(var p in d)d[p]!==Q[p]&&f.push(p.replace(ee,ie).replace(ee,i).replace(re,x)+"="+d[p].replace(ee,ie).replace(ee,i).replace(ne,x));return f.length&&(n.query=f.join("&")),n}},se=/^([^\:]+)\:(.*)/,ae={scheme:"urn",parse:function(e,t){var r=e.path&&e.path.match(se),n=e;if(r){var i=t.scheme||n.scheme||"urn",o=r[1].toLowerCase(),s=r[2],a=i+":"+(t.nid||o),c=k[a];n.nid=o,n.nss=s,n.path=void 0,c&&(n=c.parse(n,t))}else n.error=n.error||"URN can not be parsed.";return n},serialize:function(e,t){var r=t.scheme||e.scheme||"urn",n=e.nid,i=r+":"+(t.nid||n),o=k[i];o&&(e=o.serialize(e,t));var s=e,a=e.nss;return s.path=(n||t.nid)+":"+a,s}},ce=/^[0-9A-Fa-f]{8}(?:\-[0-9A-Fa-f]{4}){3}\-[0-9A-Fa-f]{12}$/,ue={scheme:"urn:uuid",parse:function(e,t){var r=e;return r.uuid=r.nss,r.nss=void 0,t.tolerant||r.uuid&&r.uuid.match(ce)||(r.error=r.error||"UUID is not valid."),r},serialize:function(e,t){var r=e;return r.nss=(e.uuid||"").toLowerCase(),r}};k[K.scheme]=K,k[V.scheme]=V,k[z.scheme]=z,k[W.scheme]=W,k[oe.scheme]=oe,k[ae.scheme]=ae,k[ue.scheme]=ue,e.SCHEMES=k,e.pctEncChar=x,e.pctDecChars=O,e.parse=T,e.removeDotSegments=B,e.serialize=F,e.resolveComponents=q,e.resolve=function(e,t,r){var n=function(e,t){var r=e;if(t)for(var n in t)r[n]=t[n];return r}({scheme:"null"},r);return F(q(T(e,n),T(t,n),n,!0),n)},e.normalize=function(e,t){return"string"==typeof e?e=F(T(e,t),t):"object"===n(e)&&(e=T(F(e,t),t)),e},e.equal=function(e,t,r){return"string"==typeof e?e=F(T(e,r),r):"object"===n(e)&&(e=F(e,r)),"string"==typeof t?t=F(T(t,r),r):"object"===n(t)&&(t=F(t,r)),e===t},e.escapeComponent=function(e,t){return e&&e.toString().replace(t&&t.iri?a.ESCAPE:s.ESCAPE,x)},e.unescapeComponent=U,Object.defineProperty(e,"__esModule",{value:!0})}(t)},4927:(e,t,r)=>{function n(e){try{if(!r.g.localStorage)return!1}catch(e){return!1}var t=r.g.localStorage[e];return null!=t&&"true"===String(t).toLowerCase()}e.exports=function(e,t){if(n("noDeprecation"))return e;var r=!1;return function(){if(!r){if(n("throwDeprecation"))throw new Error(t);n("traceDeprecation")?console.trace(t):console.warn(t),r=!0}return e.apply(this,arguments)}}},2361:()=>{},4616:()=>{},4775:e=>{"use strict";e.exports=JSON.parse('{"$id":"https://raw.githubusercontent.com/ajv-validator/ajv/master/lib/refs/data.json#","description":"Meta-schema for $data reference (JSON AnySchema extension proposal)","type":"object","required":["$data"],"properties":{"$data":{"type":"string","anyOf":[{"format":"relative-json-pointer"},{"format":"json-pointer"}]}},"additionalProperties":false}')},98:e=>{"use strict";e.exports=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","$id":"http://json-schema.org/draft-07/schema#","title":"Core schema meta-schema","definitions":{"schemaArray":{"type":"array","minItems":1,"items":{"$ref":"#"}},"nonNegativeInteger":{"type":"integer","minimum":0},"nonNegativeIntegerDefault0":{"allOf":[{"$ref":"#/definitions/nonNegativeInteger"},{"default":0}]},"simpleTypes":{"enum":["array","boolean","integer","null","number","object","string"]},"stringArray":{"type":"array","items":{"type":"string"},"uniqueItems":true,"default":[]}},"type":["object","boolean"],"properties":{"$id":{"type":"string","format":"uri-reference"},"$schema":{"type":"string","format":"uri"},"$ref":{"type":"string","format":"uri-reference"},"$comment":{"type":"string"},"title":{"type":"string"},"description":{"type":"string"},"default":true,"readOnly":{"type":"boolean","default":false},"examples":{"type":"array","items":true},"multipleOf":{"type":"number","exclusiveMinimum":0},"maximum":{"type":"number"},"exclusiveMaximum":{"type":"number"},"minimum":{"type":"number"},"exclusiveMinimum":{"type":"number"},"maxLength":{"$ref":"#/definitions/nonNegativeInteger"},"minLength":{"$ref":"#/definitions/nonNegativeIntegerDefault0"},"pattern":{"type":"string","format":"regex"},"additionalItems":{"$ref":"#"},"items":{"anyOf":[{"$ref":"#"},{"$ref":"#/definitions/schemaArray"}],"default":true},"maxItems":{"$ref":"#/definitions/nonNegativeInteger"},"minItems":{"$ref":"#/definitions/nonNegativeIntegerDefault0"},"uniqueItems":{"type":"boolean","default":false},"contains":{"$ref":"#"},"maxProperties":{"$ref":"#/definitions/nonNegativeInteger"},"minProperties":{"$ref":"#/definitions/nonNegativeIntegerDefault0"},"required":{"$ref":"#/definitions/stringArray"},"additionalProperties":{"$ref":"#"},"definitions":{"type":"object","additionalProperties":{"$ref":"#"},"default":{}},"properties":{"type":"object","additionalProperties":{"$ref":"#"},"default":{}},"patternProperties":{"type":"object","additionalProperties":{"$ref":"#"},"propertyNames":{"format":"regex"},"default":{}},"dependencies":{"type":"object","additionalProperties":{"anyOf":[{"$ref":"#"},{"$ref":"#/definitions/stringArray"}]}},"propertyNames":{"$ref":"#"},"const":true,"enum":{"type":"array","items":true,"minItems":1,"uniqueItems":true},"type":{"anyOf":[{"$ref":"#/definitions/simpleTypes"},{"type":"array","items":{"$ref":"#/definitions/simpleTypes"},"minItems":1,"uniqueItems":true}]},"format":{"type":"string"},"contentMediaType":{"type":"string"},"contentEncoding":{"type":"string"},"if":{"$ref":"#"},"then":{"$ref":"#"},"else":{"$ref":"#"},"allOf":{"$ref":"#/definitions/schemaArray"},"anyOf":{"$ref":"#/definitions/schemaArray"},"oneOf":{"$ref":"#/definitions/schemaArray"},"not":{"$ref":"#"}},"default":true}')}},t={};function r(n){var i=t[n];if(void 0!==i)return i.exports;var o=t[n]={exports:{}};return e[n].call(o.exports,o,o.exports,r),o.exports}r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),(()=>{"use strict";function e(e){if(!e)throw new Error("ensureNotFalsy() is falsy");return e}var t={bufferSize:1,refCount:!0},n="abcdefghijklmnopqrstuvwxyz";function i(e=10){for(var t="",r=0;r<e;r++)t+=n.charAt(Math.floor(Math.random()*n.length));return t}function o(e){return(e+="").charAt(0).toUpperCase()+e.substr(1)}function s(e){for(;"."===e.charAt(0);)e=e.substr(1);for(;"."===e.slice(-1);)e=e.slice(0,-1);return e}function a(e){return!(!e.includes("/")&&!e.includes("\\"))}function c(e){return c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},c(e)}function u(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,(i=n.key,o=void 0,o=function(e,t){if("object"!==c(e)||null===e)return e;var r=e[Symbol.toPrimitive];if(void 0!==r){var n=r.call(e,"string");if("object"!==c(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(i),"symbol"===c(o)?o:String(o)),n)}var i,o}function l(e,t,r){return t&&u(e.prototype,t),r&&u(e,r),Object.defineProperty(e,"prototype",{writable:!1}),e}function h(e,t){if(e===t)return!0;if(e&&t&&"object"==typeof e&&"object"==typeof t){if(e.constructor!==t.constructor)return!1;var r,n;if(Array.isArray(e)){if((r=e.length)!==t.length)return!1;for(n=r;0!=n--;)if(!h(e[n],t[n]))return!1;return!0}if(e.constructor===RegExp)return e.source===t.source&&e.flags===t.flags;if(e.valueOf!==Object.prototype.valueOf)return e.valueOf()===t.valueOf();if(e.toString!==Object.prototype.toString)return e.toString()===t.toString();var i=Object.keys(e);if((r=i.length)!==Object.keys(t).length)return!1;for(n=r;0!=n--;)if(!Object.prototype.hasOwnProperty.call(t,i[n]))return!1;for(n=r;0!=n--;){var o=i[n];if(!h(e[o],t[o]))return!1}return!0}return e!=e&&t!=t}function d(e){return Object.freeze(e),Object.getOwnPropertyNames(e).forEach((function(t){!e.hasOwnProperty(t)||null===e[t]||"object"!=typeof e[t]&&"function"!=typeof e[t]||Object.isFrozen(e[t])||d(e[t])})),e}function f(e){var t={};for(var r in e)if(e.hasOwnProperty(r))if("object"==typeof e[r]){var n=f(e[r]);for(var i in n)n.hasOwnProperty(i)&&(t[r+"."+i]=n[i])}else t[r]=e[r];return t}function p(e){return Object.assign({},e)}function m(e,t=!1){if(!e)return e;if(!t&&Array.isArray(e))return e.sort(((e,t)=>"string"==typeof e&&"string"==typeof t?e.localeCompare(t):"object"==typeof e?1:-1)).map((e=>m(e,t)));if("object"==typeof e&&!Array.isArray(e)){var r={};return Object.keys(e).sort(((e,t)=>e.localeCompare(t))).forEach((n=>{r[n]=m(e[n],t)})),r}return e}var y=function e(t){if(!t)return t;if(null===t||"object"!=typeof t)return t;if(Array.isArray(t)){for(var r=new Array(t.length),n=r.length;n--;)r[n]=e(t[n]);return r}var i={};for(var o in t)i[o]=e(t[o]);return i};function v(e,t,r){return Object.defineProperty(e,t,{get:function(){return r}}),r}function g(e){return Array.isArray(e)?e.slice(0):[e]}function b(e){return Array.isArray(e)}function w(e){return null!=e}function _(e,t){var r=0,n=-1;for(var i of e){if(!t(i,n+=1))break;r+=1}return r}function E(e,t){for(var r=t.length,n=0;n<r;++n){var i=t[n];e.push(i)}}function S(e,t){return S=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},S(e,t)}function C(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,S(e,t)}function k(e){return k=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},k(e)}function x(e,t,r){return x=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}()?Reflect.construct.bind():function(e,t,r){var n=[null];n.push.apply(n,t);var i=new(Function.bind.apply(e,n));return r&&S(i,r.prototype),i},x.apply(null,arguments)}function O(e){var t="function"==typeof Map?new Map:void 0;return O=function(e){if(null===e||!function(e){try{return-1!==Function.toString.call(e).indexOf("[native code]")}catch(t){return"function"==typeof e}}(e))return e;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r)}function r(){return x(e,arguments,k(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),S(r,e)},O(e)}var P={isDevMode:()=>!1,deepFreezeWhenDevMode:e=>e,tunnelErrorMessage:e=>"RxDB Error-Code "+e+".\n        Error messages are not included in RxDB core to reduce build size.\n        - To find out what this error means, either use the dev-mode-plugin https://rxdb.info/dev-mode.html\n        - or search for the error code here: https://github.com/pubkey/rxdb/search?q="+e+"\n        "};function R(e,t,r){return"RxError ("+t+"):\n"+e+"\n"+function(e){var t="";return 0===Object.keys(e).length?t:(t+="Given parameters: {\n",t+=Object.keys(e).map((t=>{var r="[object Object]";try{r="errors"===t?e[t].map((e=>JSON.stringify(e,Object.getOwnPropertyNames(e)))):JSON.stringify(e[t],(function(e,t){return void 0===t?null:t}),2)}catch(e){}return t+":"+r})).join("\n"),t+="}")}(r)}var $=function(e){function t(t,r,n={}){var i,o=R(r,t,n);return(i=e.call(this,o)||this).code=t,i.message=o,i.parameters=n,i.rxdb=!0,i}return C(t,e),t.prototype.toString=function(){return this.message},l(t,[{key:"name",get:function(){return"RxError ("+this.code+")"}},{key:"typeError",get:function(){return!1}}]),t}(O(Error)),D=function(e){function t(t,r,n={}){var i,o=R(r,t,n);return(i=e.call(this,o)||this).code=t,i.message=o,i.parameters=n,i.rxdb=!0,i}return C(t,e),t.prototype.toString=function(){return this.message},l(t,[{key:"name",get:function(){return"RxTypeError ("+this.code+")"}},{key:"typeError",get:function(){return!0}}]),t}(O(TypeError));function I(e,t){return new $(e,P.tunnelErrorMessage(e),t)}function j(e,t){return new D(e,P.tunnelErrorMessage(e),t)}function T(e){return!(!e||409!==e.status)&&e}var A={409:"document write conflict",422:"schema validation error",510:"attachment data missing"},N={preAddRxPlugin:[],preCreateRxDatabase:[],createRxDatabase:[],preCreateRxCollection:[],createRxCollection:[],postDestroyRxCollection:[],postRemoveRxCollection:[],preCreateRxSchema:[],createRxSchema:[],preCreateRxQuery:[],prePrepareQuery:[],createRxDocument:[],postCreateRxDocument:[],preCreateRxStorageInstance:[],preMigrateDocument:[],postMigrateDocument:[],preDestroyRxDatabase:[],postRemoveRxDatabase:[],preReplicationMasterWrite:[],preReplicationMasterWriteDocumentsHandle:[]};function M(e,t){N[e]&&N[e].forEach((e=>e(t)))}function L(e,t){return Promise.all(N[e].map((e=>e(t))))}var B=/\./g,F=e=>{var t=typeof e;return null!==e&&("object"===t||"function"===t)},q=new Set(["__proto__","prototype","constructor"]),U=new Set("0123456789");function K(e,t){if("number"!=typeof t&&Array.isArray(e)){var r=Number.parseInt(t,10);return Number.isInteger(r)&&e[r]===e[t]}return!1}function V(e,t,r){if(Array.isArray(t)&&(t=t.join(".")),!t.includes(".")&&!t.includes("["))return e[t];if(!F(e)||"string"!=typeof t)return void 0===r?e:r;var n=function(e){var t=[],r="",n="start",i=!1;for(var o of e)switch(o){case"\\":if("index"===n)throw new Error("Invalid character in an index");if("indexEnd"===n)throw new Error("Invalid character after an index");i&&(r+=o),n="property",i=!i;break;case".":if("index"===n)throw new Error("Invalid character in an index");if("indexEnd"===n){n="property";break}if(i){i=!1,r+=o;break}if(q.has(r))return[];t.push(r),r="",n="property";break;case"[":if("index"===n)throw new Error("Invalid character in an index");if("indexEnd"===n){n="index";break}if(i){i=!1,r+=o;break}if("property"===n){if(q.has(r))return[];t.push(r),r=""}n="index";break;case"]":if("index"===n){t.push(Number.parseInt(r,10)),r="",n="indexEnd";break}if("indexEnd"===n)throw new Error("Invalid character after an index");default:if("index"===n&&!U.has(o))throw new Error("Invalid character in an index");if("indexEnd"===n)throw new Error("Invalid character after an index");"start"===n&&(n="property"),i&&(i=!1,r+="\\"),r+=o}switch(i&&(r+="\\"),n){case"property":if(q.has(r))return[];t.push(r);break;case"index":throw new Error("Index was not closed");case"start":t.push("")}return t}(t);if(0===n.length)return r;for(var i=0;i<n.length;i++){var o=n[i];if(null==(e=K(e,o)?i===n.length-1?void 0:null:e[o])){if(i!==n.length-1)return r;break}}return void 0===e?r:e}var H=1;function z(){return{lwt:H}}function W(e,t){return V(e,s("properties."+t.replace(B,".properties.")))}function Q(e,t,r){if("string"==typeof t.primaryKey)return r;var n=J(t,r),i=r[e];if(i&&i!==n)throw I("DOC19",{args:{documentData:r,existingPrimary:i,newPrimary:n},schema:t});return r[e]=n,r}function G(e){return"string"==typeof e?e:e.key}function J(e,t){if("string"==typeof e.primaryKey)return t[e.primaryKey];var r=e.primaryKey;return r.fields.map((e=>{var r=V(t,e);if(void 0===r)throw I("DOC18",{args:{field:e,documentData:t}});return r})).join(r.separator)}function Y(e){var t=G((e=p(e)).primaryKey);e.properties=p(e.properties),e.additionalProperties=!1,e.hasOwnProperty("keyCompression")||(e.keyCompression=!1),e.indexes=e.indexes?e.indexes.slice(0):[],e.required=e.required?e.required.slice(0):[],e.encrypted=e.encrypted?e.encrypted.slice(0):[],e.properties._rev={type:"string",minLength:1},e.properties._attachments={type:"object"},e.properties._deleted={type:"boolean"},e.properties._meta=X,e.required=e.required?e.required.slice(0):[],e.required.push("_deleted"),e.required.push("_rev"),e.required.push("_meta"),e.required.push("_attachments");var r=Z(e);return E(e.required,r),e.required=e.required.filter((e=>!e.includes("."))).filter(((e,t,r)=>r.indexOf(e)===t)),e.version=e.version||0,e.indexes&&(e.indexes=e.indexes.map((e=>{var r=b(e)?e.slice(0):[e];if(!r.includes(t)){var n=r.slice(0);return n.push(t),n}return r}))),e}var X={type:"object",properties:{lwt:{type:"number",minimum:H,maximum:1e15,multipleOf:.01}},additionalProperties:!0,required:["lwt"]};function Z(e){var t=Object.keys(e.properties).filter((t=>e.properties[t].final)),r=G(e.primaryKey);return t.push(r),"string"!=typeof e.primaryKey&&e.primaryKey.fields.forEach((e=>t.push(e))),t}var ee=function(){function e(e,t){this.jsonSchema=e,this.hashFunction=t,this.indexes=function(e){return(e.indexes||[]).map((e=>b(e)?e:[e]))}(this.jsonSchema),this.primaryPath=G(this.jsonSchema.primaryKey),this.finalFields=Z(this.jsonSchema)}var t=e.prototype;return t.validateChange=function(e,t){this.finalFields.forEach((r=>{if(!h(e[r],t[r]))throw I("DOC9",{dataBefore:e,dataAfter:t,fieldName:r,schema:this.jsonSchema})}))},t.getDocumentPrototype=function(){var e={},t=W(this.jsonSchema,"");return Object.keys(t).forEach((t=>{var r=t;e.__defineGetter__(t,(function(){if(this.get&&"function"==typeof this.get)return this.get(r)})),Object.defineProperty(e,t+"$",{get:function(){return this.get$(r)},enumerable:!1,configurable:!1}),Object.defineProperty(e,t+"_",{get:function(){return this.populate(r)},enumerable:!1,configurable:!1})})),v(this,"getDocumentPrototype",(()=>e)),e},t.getPrimaryOfDocumentData=function(e){return J(this.jsonSchema,e)},l(e,[{key:"version",get:function(){return this.jsonSchema.version}},{key:"defaultValues",get:function(){var e={};return Object.entries(this.jsonSchema.properties).filter((([,e])=>e.hasOwnProperty("default"))).forEach((([t,r])=>e[t]=r.default)),v(this,"defaultValues",e)}},{key:"hash",get:function(){return v(this,"hash",this.hashFunction(JSON.stringify(this.jsonSchema)))}}]),e}();function te(e){return"function"==typeof e}function re(e){return function(t){if(function(e){return te(null==e?void 0:e.lift)}(t))return t.lift((function(t){try{return e(t,this)}catch(e){this.error(e)}}));throw new TypeError("Unable to lift unknown Observable type")}}var ne=function(e,t){return ne=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])},ne(e,t)};function ie(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function r(){this.constructor=e}ne(e,t),e.prototype=null===t?Object.create(t):(r.prototype=t.prototype,new r)}function oe(e,t){var r,n,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(a){return function(c){return function(a){if(r)throw new TypeError("Generator is already executing.");for(;o&&(o=0,a[0]&&(s=0)),s;)try{if(r=1,n&&(i=2&a[0]?n.return:a[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,a[1])).done)return i;switch(n=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,n=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((i=(i=s.trys).length>0&&i[i.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){s.label=a[1];break}if(6===a[0]&&s.label<i[1]){s.label=i[1],i=a;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(a);break}i[2]&&s.ops.pop(),s.trys.pop();continue}a=t.call(e,s)}catch(e){a=[6,e],n=0}finally{r=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}}function se(e){var t="function"==typeof Symbol&&Symbol.iterator,r=t&&e[t],n=0;if(r)return r.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function ae(e,t){var r="function"==typeof Symbol&&e[Symbol.iterator];if(!r)return e;var n,i,o=r.call(e),s=[];try{for(;(void 0===t||t-- >0)&&!(n=o.next()).done;)s.push(n.value)}catch(e){i={error:e}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return s}function ce(e,t,r){if(r||2===arguments.length)for(var n,i=0,o=t.length;i<o;i++)!n&&i in t||(n||(n=Array.prototype.slice.call(t,0,i)),n[i]=t[i]);return e.concat(n||Array.prototype.slice.call(t))}function ue(e){return this instanceof ue?(this.v=e,this):new ue(e)}function le(e){var t=e((function(e){Error.call(e),e.stack=(new Error).stack}));return t.prototype=Object.create(Error.prototype),t.prototype.constructor=t,t}Object.create,Object.create,"function"==typeof SuppressedError&&SuppressedError;var he=le((function(e){return function(t){e(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(e,t){return t+1+") "+e.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t}}));function de(e,t){if(e){var r=e.indexOf(t);0<=r&&e.splice(r,1)}}var fe=function(){function e(e){this.initialTeardown=e,this.closed=!1,this._parentage=null,this._finalizers=null}return e.prototype.unsubscribe=function(){var e,t,r,n,i;if(!this.closed){this.closed=!0;var o=this._parentage;if(o)if(this._parentage=null,Array.isArray(o))try{for(var s=se(o),a=s.next();!a.done;a=s.next())a.value.remove(this)}catch(t){e={error:t}}finally{try{a&&!a.done&&(t=s.return)&&t.call(s)}finally{if(e)throw e.error}}else o.remove(this);var c=this.initialTeardown;if(te(c))try{c()}catch(e){i=e instanceof he?e.errors:[e]}var u=this._finalizers;if(u){this._finalizers=null;try{for(var l=se(u),h=l.next();!h.done;h=l.next()){var d=h.value;try{ye(d)}catch(e){i=null!=i?i:[],e instanceof he?i=ce(ce([],ae(i)),ae(e.errors)):i.push(e)}}}catch(e){r={error:e}}finally{try{h&&!h.done&&(n=l.return)&&n.call(l)}finally{if(r)throw r.error}}}if(i)throw new he(i)}},e.prototype.add=function(t){var r;if(t&&t!==this)if(this.closed)ye(t);else{if(t instanceof e){if(t.closed||t._hasParent(this))return;t._addParent(this)}(this._finalizers=null!==(r=this._finalizers)&&void 0!==r?r:[]).push(t)}},e.prototype._hasParent=function(e){var t=this._parentage;return t===e||Array.isArray(t)&&t.includes(e)},e.prototype._addParent=function(e){var t=this._parentage;this._parentage=Array.isArray(t)?(t.push(e),t):t?[t,e]:e},e.prototype._removeParent=function(e){var t=this._parentage;t===e?this._parentage=null:Array.isArray(t)&&de(t,e)},e.prototype.remove=function(t){var r=this._finalizers;r&&de(r,t),t instanceof e&&t._removeParent(this)},e.EMPTY=((t=new e).closed=!0,t),e;var t}(),pe=fe.EMPTY;function me(e){return e instanceof fe||e&&"closed"in e&&te(e.remove)&&te(e.add)&&te(e.unsubscribe)}function ye(e){te(e)?e():e.unsubscribe()}var ve={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1},ge={setTimeout:function(e,t){for(var r=[],n=2;n<arguments.length;n++)r[n-2]=arguments[n];var i=ge.delegate;return(null==i?void 0:i.setTimeout)?i.setTimeout.apply(i,ce([e,t],ae(r))):setTimeout.apply(void 0,ce([e,t],ae(r)))},clearTimeout:function(e){var t=ge.delegate;return((null==t?void 0:t.clearTimeout)||clearTimeout)(e)},delegate:void 0};function be(e){ge.setTimeout((function(){var t=ve.onUnhandledError;if(!t)throw e;t(e)}))}function we(){}var _e=Ee("C",void 0,void 0);function Ee(e,t,r){return{kind:e,value:t,error:r}}var Se=null;function Ce(e){if(ve.useDeprecatedSynchronousErrorHandling){var t=!Se;if(t&&(Se={errorThrown:!1,error:null}),e(),t){var r=Se,n=r.errorThrown,i=r.error;if(Se=null,n)throw i}}else e()}var ke=function(e){function t(t){var r=e.call(this)||this;return r.isStopped=!1,t?(r.destination=t,me(t)&&t.add(r)):r.destination=Ie,r}return ie(t,e),t.create=function(e,t,r){return new Re(e,t,r)},t.prototype.next=function(e){this.isStopped?De(function(e){return Ee("N",e,void 0)}(e),this):this._next(e)},t.prototype.error=function(e){this.isStopped?De(Ee("E",void 0,e),this):(this.isStopped=!0,this._error(e))},t.prototype.complete=function(){this.isStopped?De(_e,this):(this.isStopped=!0,this._complete())},t.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,e.prototype.unsubscribe.call(this),this.destination=null)},t.prototype._next=function(e){this.destination.next(e)},t.prototype._error=function(e){try{this.destination.error(e)}finally{this.unsubscribe()}},t.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},t}(fe),xe=Function.prototype.bind;function Oe(e,t){return xe.call(e,t)}var Pe=function(){function e(e){this.partialObserver=e}return e.prototype.next=function(e){var t=this.partialObserver;if(t.next)try{t.next(e)}catch(e){$e(e)}},e.prototype.error=function(e){var t=this.partialObserver;if(t.error)try{t.error(e)}catch(e){$e(e)}else $e(e)},e.prototype.complete=function(){var e=this.partialObserver;if(e.complete)try{e.complete()}catch(e){$e(e)}},e}(),Re=function(e){function t(t,r,n){var i,o,s=e.call(this)||this;return te(t)||!t?i={next:null!=t?t:void 0,error:null!=r?r:void 0,complete:null!=n?n:void 0}:s&&ve.useDeprecatedNextContext?((o=Object.create(t)).unsubscribe=function(){return s.unsubscribe()},i={next:t.next&&Oe(t.next,o),error:t.error&&Oe(t.error,o),complete:t.complete&&Oe(t.complete,o)}):i=t,s.destination=new Pe(i),s}return ie(t,e),t}(ke);function $e(e){var t;ve.useDeprecatedSynchronousErrorHandling?(t=e,ve.useDeprecatedSynchronousErrorHandling&&Se&&(Se.errorThrown=!0,Se.error=t)):be(e)}function De(e,t){var r=ve.onStoppedNotification;r&&ge.setTimeout((function(){return r(e,t)}))}var Ie={closed:!0,next:we,error:function(e){throw e},complete:we};function je(e,t,r,n,i){return new Te(e,t,r,n,i)}var Te=function(e){function t(t,r,n,i,o,s){var a=e.call(this,t)||this;return a.onFinalize=o,a.shouldUnsubscribe=s,a._next=r?function(e){try{r(e)}catch(e){t.error(e)}}:e.prototype._next,a._error=i?function(e){try{i(e)}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._error,a._complete=n?function(){try{n()}catch(e){t.error(e)}finally{this.unsubscribe()}}:e.prototype._complete,a}return ie(t,e),t.prototype.unsubscribe=function(){var t;if(!this.shouldUnsubscribe||this.shouldUnsubscribe()){var r=this.closed;e.prototype.unsubscribe.call(this),!r&&(null===(t=this.onFinalize)||void 0===t||t.call(this))}},t}(ke);function Ae(e,t){return re((function(r,n){var i=0;r.subscribe(je(n,(function(r){n.next(e.call(t,r,i++))})))}))}function Ne(e,t){return re((function(r,n){var i=0;r.subscribe(je(n,(function(r){return e.call(t,r,i++)&&n.next(r)})))}))}var Me=function(e){return e&&"number"==typeof e.length&&"function"!=typeof e};function Le(e){return te(null==e?void 0:e.then)}var Be="function"==typeof Symbol&&Symbol.observable||"@@observable";function Fe(e){return e}var qe=function(){function e(e){e&&(this._subscribe=e)}return e.prototype.lift=function(t){var r=new e;return r.source=this,r.operator=t,r},e.prototype.subscribe=function(e,t,r){var n,i=this,o=(n=e)&&n instanceof ke||function(e){return e&&te(e.next)&&te(e.error)&&te(e.complete)}(n)&&me(n)?e:new Re(e,t,r);return Ce((function(){var e=i,t=e.operator,r=e.source;o.add(t?t.call(o,r):r?i._subscribe(o):i._trySubscribe(o))})),o},e.prototype._trySubscribe=function(e){try{return this._subscribe(e)}catch(t){e.error(t)}},e.prototype.forEach=function(e,t){var r=this;return new(t=Ue(t))((function(t,n){var i=new Re({next:function(t){try{e(t)}catch(e){n(e),i.unsubscribe()}},error:n,complete:t});r.subscribe(i)}))},e.prototype._subscribe=function(e){var t;return null===(t=this.source)||void 0===t?void 0:t.subscribe(e)},e.prototype[Be]=function(){return this},e.prototype.pipe=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return(0===(r=e).length?Fe:1===r.length?r[0]:function(e){return r.reduce((function(e,t){return t(e)}),e)})(this);var r},e.prototype.toPromise=function(e){var t=this;return new(e=Ue(e))((function(e,r){var n;t.subscribe((function(e){return n=e}),(function(e){return r(e)}),(function(){return e(n)}))}))},e.create=function(t){return new e(t)},e}();function Ue(e){var t;return null!==(t=null!=e?e:ve.Promise)&&void 0!==t?t:Promise}function Ke(e){return te(e[Be])}function Ve(e){return Symbol.asyncIterator&&te(null==e?void 0:e[Symbol.asyncIterator])}function He(e){return new TypeError("You provided "+(null!==e&&"object"==typeof e?"an invalid object":"'"+e+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}var ze="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function We(e){return te(null==e?void 0:e[ze])}function Qe(e){return function(e,t,r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,i=r.apply(e,t||[]),o=[];return n={},s("next"),s("throw"),s("return"),n[Symbol.asyncIterator]=function(){return this},n;function s(e){i[e]&&(n[e]=function(t){return new Promise((function(r,n){o.push([e,t,r,n])>1||a(e,t)}))})}function a(e,t){try{!function(e){e.value instanceof ue?Promise.resolve(e.value.v).then(c,u):l(o[0][2],e)}(i[e](t))}catch(e){l(o[0][3],e)}}function c(e){a("next",e)}function u(e){a("throw",e)}function l(e,t){e(t),o.shift(),o.length&&a(o[0][0],o[0][1])}}(this,arguments,(function(){var t,r,n;return oe(this,(function(i){switch(i.label){case 0:t=e.getReader(),i.label=1;case 1:i.trys.push([1,,9,10]),i.label=2;case 2:return[4,ue(t.read())];case 3:return r=i.sent(),n=r.value,r.done?[4,ue(void 0)]:[3,5];case 4:return[2,i.sent()];case 5:return[4,ue(n)];case 6:return[4,i.sent()];case 7:return i.sent(),[3,2];case 8:return[3,10];case 9:return t.releaseLock(),[7];case 10:return[2]}}))}))}function Ge(e){return te(null==e?void 0:e.getReader)}function Je(e){if(e instanceof qe)return e;if(null!=e){if(Ke(e))return i=e,new qe((function(e){var t=i[Be]();if(te(t.subscribe))return t.subscribe(e);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if(Me(e))return n=e,new qe((function(e){for(var t=0;t<n.length&&!e.closed;t++)e.next(n[t]);e.complete()}));if(Le(e))return r=e,new qe((function(e){r.then((function(t){e.closed||(e.next(t),e.complete())}),(function(t){return e.error(t)})).then(null,be)}));if(Ve(e))return Ye(e);if(We(e))return t=e,new qe((function(e){var r,n;try{for(var i=se(t),o=i.next();!o.done;o=i.next()){var s=o.value;if(e.next(s),e.closed)return}}catch(e){r={error:e}}finally{try{o&&!o.done&&(n=i.return)&&n.call(i)}finally{if(r)throw r.error}}e.complete()}));if(Ge(e))return Ye(Qe(e))}var t,r,n,i;throw He(e)}function Ye(e){return new qe((function(t){(function(e,t){var r,n,i,o;return function(e,t,r,n){return new(r||(r=Promise))((function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))}(this,void 0,void 0,(function(){var s,a;return oe(this,(function(c){switch(c.label){case 0:c.trys.push([0,5,6,11]),r=function(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,r=e[Symbol.asyncIterator];return r?r.call(e):(e=se(e),t={},n("next"),n("throw"),n("return"),t[Symbol.asyncIterator]=function(){return this},t);function n(r){t[r]=e[r]&&function(t){return new Promise((function(n,i){!function(e,t,r,n){Promise.resolve(n).then((function(t){e({value:t,done:r})}),t)}(n,i,(t=e[r](t)).done,t.value)}))}}}(e),c.label=1;case 1:return[4,r.next()];case 2:if((n=c.sent()).done)return[3,4];if(s=n.value,t.next(s),t.closed)return[2];c.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return a=c.sent(),i={error:a},[3,11];case 6:return c.trys.push([6,,9,10]),n&&!n.done&&(o=r.return)?[4,o.call(r)]:[3,8];case 7:c.sent(),c.label=8;case 8:return[3,10];case 9:if(i)throw i.error;return[7];case 10:return[7];case 11:return t.complete(),[2]}}))}))})(e,t).catch((function(e){return t.error(e)}))}))}function Xe(e,t,r,n,i){void 0===n&&(n=0),void 0===i&&(i=!1);var o=t.schedule((function(){r(),i?e.add(this.schedule(null,n)):this.unsubscribe()}),n);if(e.add(o),!i)return o}function Ze(e,t,r){return void 0===r&&(r=1/0),te(t)?Ze((function(r,n){return Ae((function(e,i){return t(r,e,n,i)}))(Je(e(r,n)))}),r):("number"==typeof t&&(r=t),re((function(t,n){return function(e,t,r,n,i,o,s,a){var c=[],u=0,l=0,h=!1,d=function(){!h||c.length||u||t.complete()},f=function(e){return u<n?p(e):c.push(e)},p=function(e){u++;var i=!1;Je(r(e,l++)).subscribe(je(t,(function(e){t.next(e)}),(function(){i=!0}),void 0,(function(){if(i)try{u--;for(;c.length&&u<n;)e=void 0,e=c.shift(),p(e);d()}catch(e){t.error(e)}var e})))};return e.subscribe(je(t,f,(function(){h=!0,d()}))),function(){}}(t,n,e,r)})))}function et(e){return void 0===e&&(e=1/0),Ze(Fe,e)}function tt(e){return e[e.length-1]}function rt(e){return(t=tt(e))&&te(t.schedule)?e.pop():void 0;var t}function nt(e,t){return"number"==typeof tt(e)?e.pop():t}function it(e,t){return void 0===t&&(t=0),re((function(r,n){r.subscribe(je(n,(function(r){return Xe(n,e,(function(){return n.next(r)}),t)}),(function(){return Xe(n,e,(function(){return n.complete()}),t)}),(function(r){return Xe(n,e,(function(){return n.error(r)}),t)})))}))}function ot(e,t){return void 0===t&&(t=0),re((function(r,n){n.add(e.schedule((function(){return r.subscribe(n)}),t))}))}function st(e,t){if(!e)throw new Error("Iterable cannot be null");return new qe((function(r){Xe(r,t,(function(){var n=e[Symbol.asyncIterator]();Xe(r,t,(function(){n.next().then((function(e){e.done?r.complete():r.next(e.value)}))}),0,!0)}))}))}function at(e,t){return t?function(e,t){if(null!=e){if(Ke(e))return function(e,t){return Je(e).pipe(ot(t),it(t))}(e,t);if(Me(e))return function(e,t){return new qe((function(r){var n=0;return t.schedule((function(){n===e.length?r.complete():(r.next(e[n++]),r.closed||this.schedule())}))}))}(e,t);if(Le(e))return function(e,t){return Je(e).pipe(ot(t),it(t))}(e,t);if(Ve(e))return st(e,t);if(We(e))return function(e,t){return new qe((function(r){var n;return Xe(r,t,(function(){n=e[ze](),Xe(r,t,(function(){var e,t,i;try{t=(e=n.next()).value,i=e.done}catch(e){return void r.error(e)}i?r.complete():r.next(t)}),0,!0)})),function(){return te(null==n?void 0:n.return)&&n.return()}}))}(e,t);if(Ge(e))return function(e,t){return st(Qe(e),t)}(e,t)}throw He(e)}(e,t):Je(e)}function ct(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return et(1)(at(e,rt(e)))}function ut(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=rt(e);return re((function(t,n){(r?ct(e,t,r):ct(e,t)).subscribe(n)}))}function lt(e,t){return void 0===t&&(t=Fe),e=null!=e?e:ht,re((function(r,n){var i,o=!0;r.subscribe(je(n,(function(r){var s=t(r);!o&&e(i,s)||(o=!1,i=s,n.next(r))})))}))}function ht(e,t){return e===t}var dt=le((function(e){return function(){e(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}})),ft=function(e){function t(){var t=e.call(this)||this;return t.closed=!1,t.currentObservers=null,t.observers=[],t.isStopped=!1,t.hasError=!1,t.thrownError=null,t}return ie(t,e),t.prototype.lift=function(e){var t=new pt(this,this);return t.operator=e,t},t.prototype._throwIfClosed=function(){if(this.closed)throw new dt},t.prototype.next=function(e){var t=this;Ce((function(){var r,n;if(t._throwIfClosed(),!t.isStopped){t.currentObservers||(t.currentObservers=Array.from(t.observers));try{for(var i=se(t.currentObservers),o=i.next();!o.done;o=i.next())o.value.next(e)}catch(e){r={error:e}}finally{try{o&&!o.done&&(n=i.return)&&n.call(i)}finally{if(r)throw r.error}}}}))},t.prototype.error=function(e){var t=this;Ce((function(){if(t._throwIfClosed(),!t.isStopped){t.hasError=t.isStopped=!0,t.thrownError=e;for(var r=t.observers;r.length;)r.shift().error(e)}}))},t.prototype.complete=function(){var e=this;Ce((function(){if(e._throwIfClosed(),!e.isStopped){e.isStopped=!0;for(var t=e.observers;t.length;)t.shift().complete()}}))},t.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=this.currentObservers=null},Object.defineProperty(t.prototype,"observed",{get:function(){var e;return(null===(e=this.observers)||void 0===e?void 0:e.length)>0},enumerable:!1,configurable:!0}),t.prototype._trySubscribe=function(t){return this._throwIfClosed(),e.prototype._trySubscribe.call(this,t)},t.prototype._subscribe=function(e){return this._throwIfClosed(),this._checkFinalizedStatuses(e),this._innerSubscribe(e)},t.prototype._innerSubscribe=function(e){var t=this,r=this,n=r.hasError,i=r.isStopped,o=r.observers;return n||i?pe:(this.currentObservers=null,o.push(e),new fe((function(){t.currentObservers=null,de(o,e)})))},t.prototype._checkFinalizedStatuses=function(e){var t=this,r=t.hasError,n=t.thrownError,i=t.isStopped;r?e.error(n):i&&e.complete()},t.prototype.asObservable=function(){var e=new qe;return e.source=this,e},t.create=function(e,t){return new pt(e,t)},t}(qe),pt=function(e){function t(t,r){var n=e.call(this)||this;return n.destination=t,n.source=r,n}return ie(t,e),t.prototype.next=function(e){var t,r;null===(r=null===(t=this.destination)||void 0===t?void 0:t.next)||void 0===r||r.call(t,e)},t.prototype.error=function(e){var t,r;null===(r=null===(t=this.destination)||void 0===t?void 0:t.error)||void 0===r||r.call(t,e)},t.prototype.complete=function(){var e,t;null===(t=null===(e=this.destination)||void 0===e?void 0:e.complete)||void 0===t||t.call(e)},t.prototype._subscribe=function(e){var t,r;return null!==(r=null===(t=this.source)||void 0===t?void 0:t.subscribe(e))&&void 0!==r?r:pe},t}(ft),mt={now:function(){return(mt.delegate||Date).now()},delegate:void 0},yt=function(e){function t(t,r,n){void 0===t&&(t=1/0),void 0===r&&(r=1/0),void 0===n&&(n=mt);var i=e.call(this)||this;return i._bufferSize=t,i._windowTime=r,i._timestampProvider=n,i._buffer=[],i._infiniteTimeWindow=!0,i._infiniteTimeWindow=r===1/0,i._bufferSize=Math.max(1,t),i._windowTime=Math.max(1,r),i}return ie(t,e),t.prototype.next=function(t){var r=this,n=r.isStopped,i=r._buffer,o=r._infiniteTimeWindow,s=r._timestampProvider,a=r._windowTime;n||(i.push(t),!o&&i.push(s.now()+a)),this._trimBuffer(),e.prototype.next.call(this,t)},t.prototype._subscribe=function(e){this._throwIfClosed(),this._trimBuffer();for(var t=this._innerSubscribe(e),r=this._infiniteTimeWindow,n=this._buffer.slice(),i=0;i<n.length&&!e.closed;i+=r?1:2)e.next(n[i]);return this._checkFinalizedStatuses(e),t},t.prototype._trimBuffer=function(){var e=this,t=e._bufferSize,r=e._timestampProvider,n=e._buffer,i=e._infiniteTimeWindow,o=(i?1:2)*t;if(t<1/0&&o<n.length&&n.splice(0,n.length-o),!i){for(var s=r.now(),a=0,c=1;c<n.length&&n[c]<=s;c+=2)a=c;a&&n.splice(0,a+1)}},t}(ft);function vt(e,t){for(var r=[],n=2;n<arguments.length;n++)r[n-2]=arguments[n];if(!0!==t){if(!1!==t){var i=new Re({next:function(){i.unsubscribe(),e()}});return Je(t.apply(void 0,ce([],ae(r)))).subscribe(i)}}else e()}function gt(e,t,r){var n,i,o,s,a=!1;return e&&"object"==typeof e?(n=e.bufferSize,s=void 0===n?1/0:n,i=e.windowTime,t=void 0===i?1/0:i,a=void 0!==(o=e.refCount)&&o,r=e.scheduler):s=null!=e?e:1/0,function(e){void 0===e&&(e={});var t=e.connector,r=void 0===t?function(){return new ft}:t,n=e.resetOnError,i=void 0===n||n,o=e.resetOnComplete,s=void 0===o||o,a=e.resetOnRefCountZero,c=void 0===a||a;return function(e){var t,n,o,a=0,u=!1,l=!1,h=function(){null==n||n.unsubscribe(),n=void 0},d=function(){h(),t=o=void 0,u=l=!1},f=function(){var e=t;d(),null==e||e.unsubscribe()};return re((function(e,p){a++,l||u||h();var m=o=null!=o?o:r();p.add((function(){0!=--a||l||u||(n=vt(f,c))})),m.subscribe(p),!t&&a>0&&(t=new Re({next:function(e){return m.next(e)},error:function(e){l=!0,h(),n=vt(d,i,e),m.error(e)},complete:function(){u=!0,h(),n=vt(d,s),m.complete()}}),Je(e).subscribe(t))}))(e)}}({connector:function(){return new yt(s,t,r)},resetOnError:!0,resetOnComplete:!1,resetOnRefCountZero:a})}function bt(e=0){return new Promise((t=>setTimeout(t,e)))}var wt=Promise.resolve(!0),_t=Promise.resolve(!1),Et=Promise.resolve(null),St=Promise.resolve();function Ct(e=1e4){return"function"==typeof requestIdleCallback?new Promise((t=>{requestIdleCallback((()=>t()),{timeout:e})})):bt(0)}var kt=St;function xt(e,t){var r=e.get(t);if(void 0===r)throw new Error("missing value from map "+t);return r}function Ot(e,t,r,n){var i=e.get(t);return void 0===i?(i=r(),e.set(t,i)):n&&n(i),i}function Pt(e){var t=e.split("-"),r="RxDB";return t.forEach((e=>{r+=o(e)})),r+="Plugin",new Error("You are using a function which must be overwritten by a plugin.\n        You should either prevent the usage of this function or add the plugin via:\n            import { "+r+" } from 'rxdb/plugins/"+e+"';\n            addRxPlugin("+r+");\n        ")}function Rt(e){return{name:e.name,message:e.message,rxdb:e.rxdb,parameters:e.parameters,code:e.code,stack:e.stack?e.stack.replace(/\n/g," \n "):void 0}}function $t(e){return e.documentData?e.documentData:e.previousDocumentData}var Dt=0;function It(){var e=Date.now();(e+=.01)<=Dt&&(e=Dt+.01);var t=parseFloat(e.toFixed(2));return Dt=t,t}function jt(e){var t=e.split("-");if(2!==t.length)throw new Error("malformatted revision: "+e);return{height:parseInt(t[0],10),hash:t[1]}}function Tt(e){return parseInt(e.split("-")[0],10)}function At(e,t){var r=t?t._rev:null;return(r?jt(r).height:0)+1+"-"+e}var Nt="_rxdb_internal";async function Mt(e,t){return(await e.findDocumentsById([t],!1))[0]||void 0}async function Lt(e,t,r){var n=await e.bulkWrite([t],r);if(n.error.length>0)throw n.error[0];return n.success[0]}function Bt(e){return Object.assign({},...e)}function Ft(e,t,r,n){if(n)throw 409===n.status?I("CONFLICT",{collection:e.name,id:t,writeError:n,data:r}):422===n.status?I("VD2",{collection:e.name,id:t,writeError:n,data:r}):n}function qt(e){return{previous:e.previous,document:Ut(e.document)}}function Ut(e){if(!e._attachments||0===Object.keys(e._attachments).length)return e;var t=p(e);return t._attachments={},Object.entries(e._attachments).forEach((([e,r])=>{var n,i,o;t._attachments[e]=(o=(n=r).data)?{length:(i=o,atob(i).length),digest:n.digest,type:n.type}:n})),t}function Kt(e){var t=p(e);return t._meta=p(e._meta),t}function Vt(t,r,n){P.deepFreezeWhenDevMode(n);var i=G(n.primaryKey),o={originalStorageInstance:r,schema:r.schema,internals:r.internals,collectionName:r.collectionName,databaseName:r.databaseName,options:r.options,bulkWrite(o,s){var a=o.map((e=>function(e){var o=p(e.document);if(o._meta=p(o._meta),P.isDevMode()){o=Q(i,n,o);try{"function"==typeof structuredClone?structuredClone(e):JSON.parse(JSON.stringify(e))}catch(t){throw I("DOC24",{collection:r.collectionName,document:e.document})}e.previous,e.previous&&Object.keys(e.previous._meta).forEach((t=>{if(!e.document._meta.hasOwnProperty(t))throw I("SNH",{dataBefore:e.previous,dataAfter:e.document})}))}return o._meta.lwt=It(),o._rev=At(t.token,e.previous),{document:o,previous:e.previous}}(e)));return t.lockedRun((()=>r.bulkWrite(a,s))).then((n=>{var i={error:[],success:n.success.slice(0)},o=n.error.filter((t=>!(409!==t.status||t.writeRow.previous||t.writeRow.document._deleted||!e(t.documentInDb)._deleted)||(i.error.push(t),!1)));if(o.length>0){var a=o.map((e=>({previous:e.documentInDb,document:Object.assign({},e.writeRow.document,{_rev:At(t.token,e.documentInDb)})})));return t.lockedRun((()=>r.bulkWrite(a,s))).then((e=>(E(i.error,e.error),E(i.success,e.success),i)))}return n}))},query:e=>t.lockedRun((()=>r.query(e))),count:e=>t.lockedRun((()=>r.count(e))),info:()=>t.lockedRun((()=>r.info())),findDocumentsById:(e,n)=>t.lockedRun((()=>r.findDocumentsById(e,n))),getAttachmentData:(e,n,i)=>t.lockedRun((()=>r.getAttachmentData(e,n,i))),getChangedDocumentsSince:(n,i)=>t.lockedRun((()=>r.getChangedDocumentsSince(e(n),i))),cleanup:e=>t.lockedRun((()=>r.cleanup(e))),remove:()=>(t.storageInstances.delete(o),t.lockedRun((()=>r.remove()))),close:()=>(t.storageInstances.delete(o),t.lockedRun((()=>r.close()))),changeStream:()=>r.changeStream(),conflictResultionTasks:()=>r.conflictResultionTasks(),resolveConflictResultionTask(e){if(e.output.isEqual)return r.resolveConflictResultionTask(e);var t=p(Object.assign({},e.output.documentData,{_meta:z(),_rev:"",_attachments:{}}));return delete t._meta,delete t._rev,delete t._attachments,r.resolveConflictResultionTask({id:e.id,output:{isEqual:!1,documentData:t}})}};return t.storageInstances.add(o),o}function Ht(e){return!!(e.encrypted&&e.encrypted.length>0||e.attachments&&e.attachments.encrypted)}var zt=function(){function t(e,t,r,n){this.queueByDocId=new Map,this.isRunning=!1,this.storageInstance=e,this.primaryPath=t,this.preWrite=r,this.postWrite=n}var r=t.prototype;return r.addWrite=function(t,r){var n=t[this.primaryPath],i=Ot(this.queueByDocId,n,(()=>[]));return new Promise(((n,o)=>{var s={lastKnownDocumentState:t,modifier:r,resolve:n,reject:o};e(i).push(s),this.triggerRun()}))},r.triggerRun=async function(){if(!0!==this.isRunning&&0!==this.queueByDocId.size){this.isRunning=!0;var t=[],r=this.queueByDocId;this.queueByDocId=new Map,await Promise.all(Array.from(r.entries()).map((async([e,r])=>{var n,i,o,s=(n=r.map((e=>e.lastKnownDocumentState)),i=n[0],o=jt(i._rev).height,n.forEach((e=>{var t=jt(e._rev).height;t>o&&(i=e,o=t)})),i),a=s;for(var c of r)try{a=await c.modifier(y(a))}catch(e){c.reject(e),c.reject=()=>{},c.resolve=()=>{}}try{await this.preWrite(a,s)}catch(e){return void r.forEach((t=>t.reject(e)))}t.push({previous:s,document:a})})));var n=t.length>0?await this.storageInstance.bulkWrite(t,"incremental-write"):{error:[],success:[]};return await Promise.all(n.success.map((e=>{var t=e[this.primaryPath];this.postWrite(e),xt(r,t).forEach((t=>t.resolve(e)))}))),n.error.forEach((t=>{var n,i=t.documentId,o=xt(r,i),s=T(t);if(s){var a=Ot(this.queueByDocId,i,(()=>[]));o.reverse().forEach((t=>{t.lastKnownDocumentState=e(s.documentInDb),e(a).unshift(t)}))}else{var c=I("COL20",{name:A[(n=t).status],document:n.documentId,writeError:n});o.forEach((e=>e.reject(c)))}})),this.isRunning=!1,this.triggerRun()}},t}();function Wt(e){return async t=>{var r=function(e){return Object.assign({},e,{_meta:void 0,_deleted:void 0,_rev:void 0})}(t);r._deleted=t._deleted;var n=await e(r),i=Object.assign({},n,{_meta:t._meta,_attachments:t._attachments,_rev:t._rev,_deleted:void 0!==n._deleted?n._deleted:t._deleted});return void 0===i._deleted&&(i._deleted=!1),i}}var Qt={get primaryPath(){if(this.isInstanceOfRxDocument)return this.collection.schema.primaryPath},get primary(){var e=this;if(e.isInstanceOfRxDocument)return e._data[e.primaryPath]},get revision(){if(this.isInstanceOfRxDocument)return this._data._rev},get deleted$(){if(this.isInstanceOfRxDocument)return this.$.pipe(Ae((e=>e._data._deleted)))},get deleted(){if(this.isInstanceOfRxDocument)return this._data._deleted},getLatest(){var e=this.collection._docCache.getLatestDocumentData(this.primary);return this.collection._docCache.getCachedRxDocument(e)},get $(){return this.collection.$.pipe(Ne((e=>!e.isLocal)),Ne((e=>e.documentId===this.primary)),Ae((e=>$t(e))),ut(this.collection._docCache.getLatestDocumentData(this.primary)),lt(((e,t)=>e._rev===t._rev)),Ae((e=>this.collection._docCache.getCachedRxDocument(e))),gt(t))},get$(e){if(P.isDevMode()){if(e.includes(".item."))throw I("DOC1",{path:e});if(e===this.primaryPath)throw I("DOC2");if(this.collection.schema.finalFields.includes(e))throw I("DOC3",{path:e});if(!W(this.collection.schema.jsonSchema,e))throw I("DOC4",{path:e})}return this.$.pipe(Ae((t=>V(t,e))),lt())},populate(e){var t=W(this.collection.schema.jsonSchema,e),r=this.get(e);if(!r)return Et;if(!t)throw I("DOC5",{path:e});if(!t.ref)throw I("DOC6",{path:e,schemaObj:t});var n=this.collection.database.collections[t.ref];if(!n)throw I("DOC7",{ref:t.ref,path:e,schemaObj:t});return"array"===t.type?n.findByIds(r).exec().then((e=>{var t=e.values();return Array.from(t)})):n.findOne(r).exec()},get(e){return Ot(this._propertyCache,e,(()=>{var t=V(this._data,e);if("object"!=typeof t||null===t||Array.isArray(t))return P.deepFreezeWhenDevMode(t);var r=this;return new Proxy(p(t),{get(t,n){if("string"!=typeof n)return t[n];var i=n.charAt(n.length-1);if("$"===i){var o=n.slice(0,-1);return r.get$(s(e+"."+o))}if("_"===i){var a=n.slice(0,-1);return r.populate(s(e+"."+a))}return r.get(s(e+"."+n))}})}))},toJSON(e=!1){if(e)return P.deepFreezeWhenDevMode(this._data);var t=p(this._data);return delete t._rev,delete t._attachments,delete t._deleted,delete t._meta,P.deepFreezeWhenDevMode(t)},toMutableJSON(e=!1){return y(this.toJSON(e))},update(e){throw Pt("update")},incrementalUpdate(e){throw Pt("update")},updateCRDT(e){throw Pt("crdt")},putAttachment(){throw Pt("attachments")},getAttachment(){throw Pt("attachments")},allAttachments(){throw Pt("attachments")},get allAttachments$(){throw Pt("attachments")},async modify(e,t){var r=this._data,n=await Wt(e)(r);return this._saveData(n,r)},incrementalModify(e,t){return this.collection.incrementalWriteQueue.addWrite(this._data,Wt(e)).then((e=>this.collection._docCache.getCachedRxDocument(e)))},patch(e){var t=this._data,r=y(t);return Object.entries(e).forEach((([e,t])=>{r[e]=t})),this._saveData(r,t)},incrementalPatch(e){return this.incrementalModify((t=>(Object.entries(e).forEach((([e,r])=>{t[e]=r})),t)))},async _saveData(e,t){if(e=p(e),this._data._deleted)throw I("DOC11",{id:this.primary,document:this});await Jt(this.collection,e,t);var r=await this.collection.storageInstance.bulkWrite([{previous:t,document:e}],"rx-document-save-data"),n=r.error[0];return Ft(this.collection,this.primary,e,n),await this.collection._runHooks("post","save",e,this),this.collection._docCache.getCachedRxDocument(r.success[0])},remove(){var e=this.collection;if(this.deleted)return Promise.reject(I("DOC13",{document:this,id:this.primary}));var t,r=p(this._data);return e._runHooks("pre","remove",r,this).then((async()=>{r._deleted=!0;var t=await e.storageInstance.bulkWrite([{previous:this._data,document:r}],"rx-document-remove"),n=t.error[0];return Ft(e,this.primary,r,n),t.success[0]})).then((e=>(t=e,this.collection._runHooks("post","remove",r,this)))).then((()=>this.collection._docCache.getCachedRxDocument(t)))},incrementalRemove(){return this.incrementalModify((async e=>(await this.collection._runHooks("pre","remove",e,this),e._deleted=!0,e))).then((async e=>(await this.collection._runHooks("post","remove",e._data,e),e)))},destroy(){throw I("DOC14")}};function Gt(e=Qt){var t=function(e,t){this.collection=e,this._data=t,this._propertyCache=new Map,this.isInstanceOfRxDocument=!0};return t.prototype=e,t}function Jt(e,t,r){return t._meta=Object.assign({},r._meta,t._meta),P.isDevMode()&&e.schema.validateChange(r,t),e._runHooks("pre","save",t,r)}var Yt=function(e){function t(t){var r=e.call(this)||this;return r._value=t,r}return ie(t,e),Object.defineProperty(t.prototype,"value",{get:function(){return this.getValue()},enumerable:!1,configurable:!0}),t.prototype._subscribe=function(t){var r=e.prototype._subscribe.call(this,t);return!r.closed&&t.next(this._value),r},t.prototype.getValue=function(){var e=this,t=e.hasError,r=e.thrownError,n=e._value;if(t)throw r;return this._throwIfClosed(),n},t.prototype.next=function(t){e.prototype.next.call(this,this._value=t)},t}(ft),Xt=le((function(e){return function(){e(this),this.name="EmptyError",this.message="no elements in sequence"}}));function Zt(e,t){var r="object"==typeof t;return new Promise((function(n,i){var o=new Re({next:function(e){n(e),o.unsubscribe()},error:i,complete:function(){r?n(t.defaultValue):i(new Xt)}});e.subscribe(o)}))}var er=new qe((function(e){return e.complete()}));const tr=e=>{e.previousResults.unshift(e.changeEvent.doc),e.keyDocumentMap&&e.keyDocumentMap.set(e.changeEvent.id,e.changeEvent.doc)},rr=e=>{e.previousResults.push(e.changeEvent.doc),e.keyDocumentMap&&e.keyDocumentMap.set(e.changeEvent.id,e.changeEvent.doc)},nr=e=>{const t=e.previousResults.shift();e.keyDocumentMap&&t&&e.keyDocumentMap.delete(t[e.queryParams.primaryKey])},ir=e=>{const t=e.previousResults.pop();e.keyDocumentMap&&t&&e.keyDocumentMap.delete(t[e.queryParams.primaryKey])},or=e=>{e.keyDocumentMap&&e.keyDocumentMap.delete(e.changeEvent.id);const t=e.queryParams.primaryKey,r=e.previousResults;for(let n=0;n<r.length;n++)if(r[n][t]===e.changeEvent.id){r.splice(n,1);break}},sr=e=>{const t=e.changeEvent.id,r=e.changeEvent.doc;if(e.keyDocumentMap){if(e.keyDocumentMap.has(t))return;e.keyDocumentMap.set(t,r)}else{const r=e.previousResults.find((r=>r[e.queryParams.primaryKey]===t));if(r)return}!function(e,t,r,n){var i,o=e.length,s=o-1,a=0;if(0===o)return e.push(t),0;for(;n<=s;)r(i=e[a=n+(s-n>>1)],t)<=0?n=a+1:s=a-1;r(i,t)<=0&&a++,e.splice(a,0,t)}(e.previousResults,r,e.queryParams.sortComparator,0)},ar=["doNothing","insertFirst","insertLast","removeFirstItem","removeLastItem","removeFirstInsertLast","removeLastInsertFirst","removeFirstInsertFirst","removeLastInsertLast","removeExisting","replaceExisting","alwaysWrong","insertAtSortPosition","removeExistingAndInsertAtSortPosition","runFullQueryAgain","unknownAction"],cr={doNothing:e=>{},insertFirst:tr,insertLast:rr,removeFirstItem:nr,removeLastItem:ir,removeFirstInsertLast:e=>{nr(e),rr(e)},removeLastInsertFirst:e=>{ir(e),tr(e)},removeFirstInsertFirst:e=>{nr(e),tr(e)},removeLastInsertLast:e=>{ir(e),rr(e)},removeExisting:or,replaceExisting:e=>{const t=e.changeEvent.doc,r=e.queryParams.primaryKey,n=e.previousResults;for(let i=0;i<n.length;i++)if(n[i][r]===e.changeEvent.id){n[i]=t,e.keyDocumentMap&&e.keyDocumentMap.set(e.changeEvent.id,t);break}},alwaysWrong:e=>{const t={_id:"wrongHuman"+(new Date).getTime()};e.previousResults.length=0,e.previousResults.push(t),e.keyDocumentMap&&(e.keyDocumentMap.clear(),e.keyDocumentMap.set(t._id,t))},insertAtSortPosition:sr,removeExistingAndInsertAtSortPosition:e=>{or(e),sr(e)},runFullQueryAgain:e=>{throw new Error("Action runFullQueryAgain must be implemented by yourself")},unknownAction:e=>{throw new Error("Action unknownAction should never be called")}};function ur(e){return e?"1":"0"}function lr(e,t){const r=[];for(let n=0,i=e.length;n<i;n+=t)r.push(e.substring(n,n+t));return r}!function(e=6){let t="";for(let r=0;r<e;r++)t+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".charAt(Math.floor(62*Math.random()))}(4);const hr=40;function dr(e){return e.charCodeAt(0)-hr}function fr(e){return e[e.length-1]}function pr(e,t,r){if(Array.isArray(t)&&(t=t.join(".")),!function(e){const t=typeof e;return null!==e&&("object"===t||"function"===t)}(e)||"string"!=typeof t)return void 0===r?e:r;const n=t.split(".");if(0===n.length)return r;for(let t=0;t<n.length;t++){const i=n[t];if(null==(e=mr(e,i)?t===n.length-1?void 0:null:e[i])){if(t!==n.length-1)return r;break}}return void 0===e?r:e}function mr(e,t){if("number"!=typeof t&&Array.isArray(e)){const r=Number.parseInt(t,10);return Number.isInteger(r)&&e[r]===e[t]}return!1}const yr=e=>!!e.queryParams.limit,vr={0:e=>"INSERT"===e.changeEvent.operation,1:e=>"UPDATE"===e.changeEvent.operation,2:e=>"DELETE"===e.changeEvent.operation,3:yr,4:e=>1===e.queryParams.limit,5:e=>!!(e.queryParams.skip&&e.queryParams.skip>0),6:e=>0===e.previousResults.length,7:e=>yr(e)&&e.previousResults.length>=e.queryParams.limit,8:e=>{const t=e.previousResults[0];return!(!t||t[e.queryParams.primaryKey]!==e.changeEvent.id)},9:e=>{const t=fr(e.previousResults);return!(!t||t[e.queryParams.primaryKey]!==e.changeEvent.id)},10:e=>{const t=e.queryParams.sortFields,r=e.changeEvent.previous,n=e.changeEvent.doc;if(!n)return!1;if(!r)return!0;for(let e=0;e<t.length;e++){const i=t[e];if(pr(r,i)!==pr(n,i))return!0}return!1},11:e=>{const t=e.changeEvent.id;if(e.keyDocumentMap)return e.keyDocumentMap.has(t);{const r=e.queryParams.primaryKey,n=e.previousResults;for(let e=0;e<n.length;e++)if(n[e][r]===t)return!0;return!1}},12:e=>{const t=e.changeEvent.previous;if(!t)return!1;const r=e.previousResults[0];return!!r&&(r[e.queryParams.primaryKey]===e.changeEvent.id||e.queryParams.sortComparator(t,r)<0)},13:e=>{const t=e.changeEvent.previous;if(!t)return!1;const r=fr(e.previousResults);return!!r&&(r[e.queryParams.primaryKey]===e.changeEvent.id||e.queryParams.sortComparator(t,r)>0)},14:e=>{const t=e.changeEvent.doc;if(!t)return!1;const r=e.previousResults[0];return!!r&&(r[e.queryParams.primaryKey]===e.changeEvent.id||e.queryParams.sortComparator(t,r)<0)},15:e=>{const t=e.changeEvent.doc;if(!t)return!1;const r=fr(e.previousResults);return!!r&&(r[e.queryParams.primaryKey]===e.changeEvent.id||e.queryParams.sortComparator(t,r)>0)},16:e=>{const t=e.changeEvent.previous;return!!t&&e.queryParams.queryMatcher(t)},17:e=>{const t=e.changeEvent.doc;return!!t&&e.queryParams.queryMatcher(t)}};let gr;const br=e=>function(e,t,r){let n=e,i=e.l;for(;;){if(n=n[ur(t[i](r))],"number"==typeof n||"string"==typeof n)return n;i=n.l}}((gr||(gr=function(e){const t=new Map,r=2+2*parseInt(e.charAt(0)+e.charAt(1),10),n=lr(e.substring(2,r),2);for(let e=0;e<n.length;e++){const r=n[e],i=r.charAt(0),o=dr(r.charAt(1));t.set(i,o)}const i=lr(e.substring(r,662),4);for(let e=0;e<i.length;e++){const r=i[e],n=r.charAt(0),o=r.charAt(1),s=r.charAt(2),a=dr(r.charAt(3));if(!t.has(o))throw new Error("missing node with id "+o);if(!t.has(s))throw new Error("missing node with id "+s);const c={l:a,0:t.get(o),1:t.get(s)};t.set(n,c)}const o=e.slice(-3),s=o.charAt(0),a=o.charAt(1);return{l:dr(o.charAt(2)),0:t.get(s),1:t.get(a)}}("14a1b,c+d2e5f0g/h.i4j*k-l)m(n6obh9pce9qnh9rad9scm9tae9uan9vbf9wbe9xbn9ycg9zck9{cn9|nd9}ne9~nf9ng9¡nm9¢nk9£mh9¤mi9¥mj9¦mk9§ml9¨mn9©mc8ª¤{8«¥z8¬¨s8­¨n8®mn8¯¨¡8°¨m8±pz7²ª«7³{z7´­®7µ}n7¶¤¥7·¨m7¸wo6¹µ}6ºnq6»²¬6¼tu6½wx6¾´¯6¿µn6À®¯6Á¶§6Â·£6Ã¶¨6Ä·¨6Åm¦6Æm¨6Ç¤¥5È¨m5Ém©4Êm®4ËÇ§4ÌÈ£4ÍÇ¬4ÎÃ»4ÏÈ¯4ÐÄ¾4Ñm¦4Òm¯4ÓÆÀ4Ôma3Õmn3ÖÉa3×Ên3ØËr3ÙÁt3ÚÌ|3ÛÂ¹3ÜÍr3ÝÎ¼3ÞÏ|3ßÐ¿3àØÙ2áv¸2ây±2ãÚÛ2ä~º2åµ2æÜÝ2çv½2èy³2éz{2êÞß2ë~n2ìn2íÑÅ2îÒÓ2ï¢n2ðÔb1ñÕn1òÖb1ó×n1ôàá1õâz1öãä1÷æç1øèé1ùêë1úðc0ûñn0üòc0ýón0þmn0ÿÊn0Āôõ0āöå0Ă÷ø0ăùì0Ąíï0ąîï0Ćúû/ćüý/ĈĀā/ĉĂă/ĊÁÂ/ċÃÄ/Čúm.čüm.ĎĆm.ďćm.Đþm.đÿm.ĒĀ§.ēĂ°.ĔĈ§.ĕĉ°.ĖĄ§.ėą°.ĘÁ§.ęÃ¨.ĚĊ§.ěċ¨.ĜÅ§.ĝÆ¨.ĞČč-ğĎď-ĠĐđ-ġĒē-ĢĔĕ-ģĖė-ĤĘę-ĥĚě-ĦĜĝ-ħğĠ,ĨĢģ,ĩĥĦ,ĪĞħ+īġĨ+ĬĤĩ+ĭĪī)ĭĬ(")),gr),vr,e);var wr=String.fromCharCode(65535),_r=Number.MIN_VALUE;function Er(e,t){var r=G(e.primaryKey),n=t.selector,i=e.indexes?e.indexes.slice(0):[];t.index?i=[t.index]:i.push([r]);var o,s=t.sort.map((e=>Object.keys(e)[0])).join(","),a=!!t.sort.find((e=>"desc"===Object.values(e)[0])),c=-1;return i.forEach((e=>{var r=!0,i=!0,u=e.map((e=>{var t=n[e],o=t?Object.keys(t):[],s={};return t&&o.length?o.forEach((e=>{if(Sr.has(e)){var r=function(e,t){switch(e){case"$eq":return{startKey:t,endKey:t};case"$lte":return{endKey:t};case"$gte":return{startKey:t};case"$lt":return{endKey:t,inclusiveEnd:!1};case"$gt":return{startKey:t,inclusiveStart:!1};default:throw new Error("SNH")}}(e,t[e]);s=Object.assign(s,r)}})):s={startKey:i?_r:wr,endKey:r?wr:_r,inclusiveStart:!0,inclusiveEnd:!0},void 0===s.startKey&&(s.startKey=_r),void 0===s.endKey&&(s.endKey=wr),void 0===s.inclusiveStart&&(s.inclusiveStart=!0),void 0===s.inclusiveEnd&&(s.inclusiveEnd=!0),i&&!s.inclusiveStart&&(i=!1),r&&!s.inclusiveEnd&&(r=!1),s})),l={index:e,startKeys:u.map((e=>e.startKey)),endKeys:u.map((e=>e.endKey)),inclusiveEnd:r,inclusiveStart:i,sortFieldsSameAsIndexFields:!a&&s===e.join(","),selectorSatisfiedByIndex:xr(e,t.selector)},h=function(e,t,r){var n=0,i=e=>{e>0&&(n+=e)};return i(10*_(r.startKeys,(e=>e!==_r&&e!==wr))),i(10*_(r.startKeys,(e=>e!==wr&&e!==_r))),i(10*_(r.startKeys,((e,t)=>e===r.endKeys[t]))*1.5),i(r.sortFieldsSameAsIndexFields?5:0),n}(0,0,l);(h>0&&h>c||t.index)&&(c=h,o=l)})),o||(o={index:[r],startKeys:[_r],endKeys:[wr],inclusiveEnd:!0,inclusiveStart:!0,sortFieldsSameAsIndexFields:!a&&s===r,selectorSatisfiedByIndex:xr([r],t.selector)}),o}var Sr=new Set(["$eq","$gt","$gte","$lt","$lte"]),Cr=new Set(["$eq","$gt","$gte"]),kr=new Set(["$eq","$lt","$lte"]);function xr(e,t){var r,n=Object.entries(t).find((([t,r])=>!e.includes(t)||Object.entries(r).find((([e,t])=>!Sr.has(e)))));if(n)return!1;var i,o=e.find((e=>{var n=t[e];if(!n)return!1;var i=Object.keys(n).find((e=>Cr.has(e)));return!(!r||!i)||("$eq"!==i&&(r=i),!1)}));if(o)return!1;var s=e.find((e=>{var r=t[e];if(!r)return!1;var n=Object.keys(r).find((e=>kr.has(e)));return!(!i||!n)||("$eq"!==n&&(i=n),!1)}));if(s)return!1;var a=new Set(Object.keys(t));for(var c of e){if(0===a.size)break;if(!a.has(c))return!1;a.delete(c)}return!0}const Or=Number.MAX_SAFE_INTEGER,Pr=Number.MIN_SAFE_INTEGER,Rr=Symbol("missing"),$r=Object.freeze(new Error("mingo: cycle detected while processing object/array")),Dr=Object.getPrototypeOf([]),Ir=Object.getPrototypeOf({}),jr=/^\[object ([a-zA-Z0-9]+)\]$/;class Tr{}class Ar{}const Nr=e=>null===e?Tr:void 0===e?Ar:e.constructor,Mr=e=>{const t=function(e){const t=new Set,r=e=>{const n=Nr(e);if(Ur.has(n))return Ur.get(n)(e);const i=n===Object?"":n.name;if(rn(e.toJSON))return`${i}(${JSON.stringify(e)})`;if(t.has(e))throw $r;t.add(e);try{if(n===Array)return"["+e.map(r).join(",")+"]";if(n!==Object){const[t,n]=yn(e);if(Yr(e))return`${i}${r([...e,t])}`;e=t}const t=Object.keys(e);return t.sort(),`${i}{`+t.map((t=>`${t}:${r(e[t])}`)).join(",")+"}"}finally{t.delete(e)}};return r(e)}(e);let r=0,n=t.length;for(;n;)r=(r<<5)-r^t.charCodeAt(--n);return r>>>0},Lr=new Set(["null","undefined","boolean","number","string","date","regexp"]),Br=new Set([Ar,Tr,Boolean,String,Number]),Fr=e=>e.toString(),qr=e=>`${Nr(e).name}[${e.toString()}]`,Ur=new Map([[Number,Fr],[Boolean,Fr],[RegExp,Fr],[Function,Fr],[Symbol,Fr],[BigInt,e=>"0x"+e.toString(16)],[Date,e=>e.toISOString()],[String,JSON.stringify],[Tr,e=>"null"],[Ar,e=>"undefined"],[Int8Array,qr],[Uint8Array,qr],[Uint8ClampedArray,qr],[Int16Array,qr],[Uint16Array,qr],[Int32Array,qr],[Uint32Array,qr],[Float32Array,qr],[Float64Array,qr],[BigInt64Array,qr],[BigUint64Array,qr]]),Kr={null:0,undefined:0,number:1,string:2,object:3,array:4,boolean:5,date:6,regexp:7,function:8},Vr=(e,t)=>{e===Rr&&(e=void 0),t===Rr&&(t=void 0);const[r,n]=[e,t].map((e=>Kr[Wr(e).toLowerCase()]));return r!==n?r-n:1===r||2===r||6===r?e<t?-1:e>t?1:0:vn(e,t)?0:e<t?-1:e>t?1:0};function Hr(e,t){if(!e)throw new Error(t)}const zr=e=>{if(Br.has(Nr(e)))return e;const t=new Set,r=e=>{if(t.has(e))throw $r;const n=Nr(e);if(Br.has(n))return e;try{if(Yr(e))return t.add(e),e.map(r);if(Xr(e)){t.add(e);const n={};for(const t in e)n[t]=r(e[t]);return n}}finally{t.delete(e)}return n===Date||n===RegExp||(e=>{const t=Object.getPrototypeOf(Nr(e));return t&&"TypedArray"===t.name})(e)?new n(e):e};return r(e)},Wr=e=>jr.exec(Object.prototype.toString.call(e))[1],Qr=e=>"boolean"==typeof e,Gr=e=>"string"==typeof e,Jr=e=>!isNaN(e)&&"number"==typeof e,Yr=Array.isArray,Xr=e=>{if(!e)return!1;const t=Object.getPrototypeOf(e);return(t===Ir||null===t)&&"[object Object]"===Object.prototype.toString.call(e)},Zr=e=>e===Object(e),en=e=>e instanceof Date,tn=e=>e instanceof RegExp,rn=e=>"function"==typeof e,nn=e=>null==e,on=(e,t)=>e.includes(t),sn=(e,t)=>!on(e,t),an=e=>nn(e)||Gr(e)&&!e||e instanceof Array&&0===e.length||Xr(e)&&0===Object.keys(e).length,cn=e=>e===Rr,un=e=>e instanceof Array?e:[e],ln=(e,t)=>!!e&&Object.prototype.hasOwnProperty.call(e,t),hn=(e,t)=>Xr(e)&&Xr(t)||Yr(e)&&Yr(t);function dn(e,t,r){if(r=r||{flatten:!1},cn(e)||nn(e))return t;if(cn(t)||nn(t))return e;if(!hn(e,t)){if(r.skipValidation)return t||e;throw Error("mismatched types. must both be array or object")}if(r.skipValidation=!0,Yr(e)){const n=e,i=t;if(r.flatten){let e=0,o=0;for(;e<n.length&&o<i.length;)n[e]=dn(n[e++],i[o++],r);for(;o<i.length;)n.push(t[o++])}else _n(n,i)}else for(const n in t)e[n]=dn(e[n],t[n],r);return e}function fn(e,t=Mr){const r=new Map;return e.forEach(((n,i)=>{const o=gn(n,t);r.has(o)?r.get(o).some((t=>vn(e[t],n)))||r.get(o).push(i):r.set(o,[i])})),r}function pn(e,t=Mr){if(e.some((e=>0==e.length)))return[];if(1===e.length)return Array.from(e);const r=function(e,t,r=Vr){if(an(e))return e;const n=new Array,i=new Array;for(let r=0;r<e.length;r++){const o=e[r],s=t(o,r);nn(s)?i.push(o):n.push([s,o])}return n.sort(((e,t)=>r(e[0],t[0]))),_n(i,n.map((e=>e[1])))}(e.map(((e,t)=>[t,e.length])),(e=>e[1])),n=e[r[0][0]],i=fn(n,t),o=new Map,s=new Array;return i.forEach(((t,i)=>{const a=t.map((e=>n[e])),c=a.map((e=>0)),u=a.map((e=>[r[0][0],0]));let l=!1;for(let t=1;t<e.length;t++){const[n,s]=r[t],h=e[n];if(o.has(t)||o.set(t,fn(h)),o.get(t).has(i)){const e=o.get(t).get(i).map((e=>h[e]));l=a.map(((r,s)=>e.some(((e,a)=>{const l=c[s];return vn(r,e)&&(c[s]++,n<u[s][0]&&(u[s]=[n,o.get(t).get(i)[a]])),l<c[s]})))).some(Boolean)}if(!l)return}l&&_n(s,c.map(((t,r)=>t===e.length-1?[a[r],u[r]]:Rr)).filter((e=>e!==Rr)))})),s.sort(((e,t)=>{const[r,[n,i]]=e,[o,[s,a]]=t,c=Vr(n,s);return 0!==c?c:Vr(i,a)})).map((e=>e[0]))}function mn(e,t=0){const r=new Array;return function e(t,n){for(let i=0,o=t.length;i<o;i++)Yr(t[i])&&(n>0||n<0)?e(t[i],Math.max(-1,n-1)):r.push(t[i])}(e,t),r}const yn=e=>{let[t,r]=[Object.getPrototypeOf(e),Object.getOwnPropertyNames(e)],n=t;for(;!r.length&&t!==Ir&&t!==Dr;)n=t,r=Object.getOwnPropertyNames(t),t=Object.getPrototypeOf(t);const i={};return r.forEach((t=>i[t]=e[t])),[i,n]};function vn(e,t){const r=[[e,t]];for(;r.length>0;){if([e,t]=r.pop(),e===t)continue;const n=Nr(e);if(n!==Nr(t)||rn(e))return!1;if(Ur.has(n)){const r=Ur.get(n);if(r(e)!==r(t))return!1}else{if(n!==Array&&n!==Object)return!1;{const n=Object.keys(e),i=Object.keys(t);if(n.length!==i.length)return!1;if(new Set(n.concat(i)).size!=n.length)return!1;for(const i of n)r.push([e[i],t[i]])}}}return!r.length}function gn(e,t){return t=t||Mr,nn(e)?null:t(e).toString()}function bn(e,t,r=Mr){if(e.length<1)return new Map;const n=new Map,i=new Map;for(let o=0;o<e.length;o++){const s=e[o],a=t(s,o),c=gn(a,r);if(null===c)i.has(null)?i.get(null).push(s):i.set(null,[s]);else{const e=n.has(c)?n.get(c).find((e=>vn(e,a))):null;nn(e)?(i.set(a,[s]),n.has(c)?n.get(c).push(a):n.set(c,[a])):i.get(e).push(s)}}return i}const wn=5e4;function _n(e,...t){return e instanceof Array?t.reduce(((e,t)=>{let r=Math.ceil(t.length/wn),n=0;for(;r-- >0;)Array.prototype.push.apply(e,t.slice(n,n+wn)),n+=wn;return e}),e):t.filter(Zr).reduce(((e,t)=>(Object.assign(e,t),e)),e)}function En(e,t){return Zr(e)?e[t]:void 0}function Sn(e,t,r){let n=0;const i=Lr.has(Wr(e).toLowerCase())?e:function e(t,r){let i=t;for(let t=0;t<r.length;t++){const o=r[t];if(null===/^\d+$/.exec(o)&&i instanceof Array){if(0===t&&n>0)break;n+=1;const o=r.slice(t);i=i.reduce(((t,r)=>{const n=e(r,o);return void 0!==n&&t.push(n),t}),[]);break}if(i=En(i,o),void 0===i)break}return i}(e,t.split("."));return i instanceof Array&&(null==r?void 0:r.unwrapArray)?function(e,t){if(t<1)return e;for(;t--&&1===e.length;)e=e[0];return e}(i,n):i}function Cn(e,t,r){const n=t.split("."),i=n[0],o=n.slice(1).join("."),s=null!==/^\d+$/.exec(i),a=n.length>1;let c,u;if(e instanceof Array)if(s)c=En(e,Number(i)),a&&(c=Cn(c,o,r)),c=[c];else{c=[];for(const n of e)u=Cn(n,t,r),(null==r?void 0:r.preserveMissing)?(void 0===u&&(u=Rr),c.push(u)):void 0!==u&&c.push(u)}else{if(u=En(e,i),a&&(u=Cn(u,o,r)),void 0===u)return;c=(null==r?void 0:r.preserveKeys)?Object.assign({},e):{},c[i]=u}return c}function kn(e){if(e instanceof Array)for(let t=e.length-1;t>=0;t--)e[t]===Rr?e.splice(t,1):kn(e[t]);else if(Xr(e))for(const t in e)ln(e,t)&&kn(e[t])}const xn=/^\d+$/;function On(e,t,r,n){const i=t.split("."),o=i[0],s=i.slice(1).join(".");if(1===i.length)(Xr(e)||Yr(e)&&xn.test(o))&&r(e,o);else{(null==n?void 0:n.buildGraph)&&nn(e[o])&&(e[o]={});const t=e[o];if(!t)return;const a=!!(i.length>1&&xn.test(i[1]));t instanceof Array&&(null==n?void 0:n.descendArray)&&!a?t.forEach((e=>On(e,s,r,n))):On(t,s,r,n)}}function Pn(e,t,r){On(e,t,((e,t)=>{e[t]=rn(r)?r(e[t]):r}),{buildGraph:!0})}function Rn(e,t,r){On(e,t,((e,t)=>{if(e instanceof Array){if(/^\d+$/.test(t))e.splice(parseInt(t),1);else if(r&&r.descendArray)for(const r of e)Xr(r)&&delete r[t]}else Xr(e)&&delete e[t]}),r)}const $n=/^\$[a-zA-Z0-9_]+$/;function Dn(e){return $n.test(e)}function In(e){if(Lr.has(Wr(e).toLowerCase()))return tn(e)?{$regex:e}:{$eq:e};if(Zr(e)){const t=e;if(!Object.keys(t).some(Dn))return{$eq:e};if(ln(e,"$regex")){const t=Object.assign({},e);return t.$regex=new RegExp(e.$regex,e.$options),delete t.$options,t}}return e}var jn,Tn,An,Nn;(An=jn||(jn={})).CLONE_ALL="CLONE_ALL",An.CLONE_INPUT="CLONE_INPUT",An.CLONE_OUTPUT="CLONE_OUTPUT",An.CLONE_OFF="CLONE_OFF";class Mn{constructor(e,t,r,n=Date.now()){this._opts=e,this._root=t,this._local=r,this.timestamp=n,this.update(t,r)}static init(e,t,r){return e instanceof Mn?new Mn(e._opts,nn(e.root)?t:e.root,Object.assign({},e.local,r)):new Mn(e,t,r)}update(e,t){var r;return this._root=e,this._local=t?Object.assign({},t,{variables:Object.assign({},null===(r=this._local)||void 0===r?void 0:r.variables,null==t?void 0:t.variables)}):t,this}getOptions(){return Object.freeze(Object.assign(Object.assign({},this._opts),{context:Bn.from(this._opts.context)}))}get root(){return this._root}get local(){return this._local}get idKey(){return this._opts.idKey}get collation(){var e;return null===(e=this._opts)||void 0===e?void 0:e.collation}get processingMode(){var e;return(null===(e=this._opts)||void 0===e?void 0:e.processingMode)||jn.CLONE_OFF}get useStrictMode(){var e;return null===(e=this._opts)||void 0===e?void 0:e.useStrictMode}get scriptEnabled(){var e;return null===(e=this._opts)||void 0===e?void 0:e.scriptEnabled}get useGlobalContext(){var e;return null===(e=this._opts)||void 0===e?void 0:e.useGlobalContext}get hashFunction(){var e;return null===(e=this._opts)||void 0===e?void 0:e.hashFunction}get collectionResolver(){var e;return null===(e=this._opts)||void 0===e?void 0:e.collectionResolver}get jsonSchemaValidator(){var e;return null===(e=this._opts)||void 0===e?void 0:e.jsonSchemaValidator}get variables(){var e;return null===(e=this._opts)||void 0===e?void 0:e.variables}get context(){var e;return null===(e=this._opts)||void 0===e?void 0:e.context}}function Ln(e){return e instanceof Mn?e.getOptions():Object.freeze(Object.assign(Object.assign({idKey:"_id",scriptEnabled:!0,useStrictMode:!0,useGlobalContext:!0,processingMode:jn.CLONE_OFF},e),{context:(null==e?void 0:e.context)?Bn.from(null==e?void 0:e.context):Bn.init({})}))}(Nn=Tn||(Tn={})).ACCUMULATOR="accumulator",Nn.EXPRESSION="expression",Nn.PIPELINE="pipeline",Nn.PROJECTION="projection",Nn.QUERY="query",Nn.WINDOW="window";class Bn{constructor(e){this.operators={[Tn.ACCUMULATOR]:{},[Tn.EXPRESSION]:{},[Tn.PIPELINE]:{},[Tn.PROJECTION]:{},[Tn.QUERY]:{},[Tn.WINDOW]:{}};for(const[t,r]of Object.entries(e))this.addOperators(t,r)}static init(e={}){return new Bn(e)}static from(e){return new Bn(e.operators)}addOperators(e,t){for(const[r,n]of Object.entries(t))this.getOperator(e,r)||(this.operators[e][r]=n);return this}addAccumulatorOps(e){return this.addOperators(Tn.ACCUMULATOR,e)}addExpressionOps(e){return this.addOperators(Tn.EXPRESSION,e)}addQueryOps(e){return this.addOperators(Tn.QUERY,e)}addPipelineOps(e){return this.addOperators(Tn.PIPELINE,e)}addProjectionOps(e){return this.addOperators(Tn.PROJECTION,e)}addWindowOps(e){return this.addOperators(Tn.WINDOW,e)}getOperator(e,t){return e in this.operators&&this.operators[e][t]||null}}const Fn=Bn.init();function qn(e,t){for(const[r,n]of Object.entries(t)){Hr(rn(n)&&Dn(r),`'${r}' is not a valid operator`);const t=Un(e,r,null);Hr(!t||n===t,`${r} already exists for '${e}' operators. Cannot change operator function once registered.`)}switch(e){case Tn.ACCUMULATOR:Fn.addAccumulatorOps(t);break;case Tn.EXPRESSION:Fn.addExpressionOps(t);break;case Tn.PIPELINE:Fn.addPipelineOps(t);break;case Tn.PROJECTION:Fn.addProjectionOps(t);break;case Tn.QUERY:Fn.addQueryOps(t);break;case Tn.WINDOW:Fn.addWindowOps(t)}}function Un(e,t,r){const{context:n,useGlobalContext:i}=r||{},o=n?n.getOperator(e,t):null;return!o&&i?Fn.getOperator(e,t):o}const Kn={$$ROOT:(e,t,r)=>r.root,$$CURRENT:(e,t,r)=>e,$$REMOVE(e,t,r){},$$NOW:(e,t,r)=>new Date(r.timestamp)},Vn={$$KEEP:(e,t,r)=>e,$$PRUNE(e,t,r){},$$DESCEND(e,t,r){if(!ln(t,"$cond"))return e;let n;for(const[i,o]of Object.entries(e))if(Zr(o)){if(o instanceof Array){const e=[];for(let n of o)Xr(n)&&(n=zn(n,t,r.update(n))),nn(n)||e.push(n);n=e}else n=zn(o,t,r.update(o));nn(n)?delete e[i]:e[i]=n}return e}};function Hn(e,t,r,n){var i;const o=Mn.init(n,e);if(Dn(r=r||"")){const i=Un(Tn.EXPRESSION,r,n);if(i)return i(e,t,o);const s=Un(Tn.ACCUMULATOR,r,n);if(s)return e instanceof Array||(e=Hn(e,t,null,o),t=null),Hr(e instanceof Array,`'${r}' target must be an array.`),s(e,t,o.update(null,o.local));throw new Error(`operator '${r}' is not registered`)}if(Gr(t)&&t.length>0&&"$"===t[0]){if(ln(Vn,t))return t;let r=o.root;const n=t.split(".");if(ln(Kn,n[0]))r=Kn[n[0]](e,null,o),t=t.slice(n[0].length+1);else if("$$"===n[0].slice(0,2)){r=Object.assign({},o.variables,{this:e},null===(i=o.local)||void 0===i?void 0:i.variables);const s=n[0].slice(2);Hr(ln(r,s),`Use of undefined variable: ${s}`),t=t.slice(2)}else t=t.slice(1);return""===t?r:Sn(r,t)}if(Yr(t))return t.map((t=>Hn(e,t,null,o)));if(Xr(t)){const r={};for(const[i,s]of Object.entries(t))if(r[i]=Hn(e,s,i,o),[Tn.EXPRESSION,Tn.ACCUMULATOR].some((e=>!!Un(e,i,n))))return Hr(1===Object.keys(t).length,"Invalid aggregation expression '"+JSON.stringify(t)+"'"),r[i];return r}return t}function zn(e,t,r){const n=Hn(e,t,null,r);return ln(Vn,n)?Vn[n](e,t,r):n}function Wn(e){return e instanceof Yn?e:new Yn(e)}function Qn(e,t){const r=e.slice(t+1);e.splice(t),Array.prototype.push.apply(e,r)}const Gn=new Error;var Jn;!function(e){e[e.MAP=0]="MAP",e[e.FILTER=1]="FILTER",e[e.TAKE=2]="TAKE",e[e.DROP=3]="DROP"}(Jn||(Jn={}));class Yn{constructor(e){let t;if(this.iteratees=[],this.yieldedValues=[],this.isDone=!1,e instanceof Function&&(e={next:e}),function(e){return!!e&&"object"==typeof e&&(null==e?void 0:e.next)instanceof Function}(e)){const r=e;t=()=>{const e=r.next();if(e.done)throw Gn;return e.value}}else if(e instanceof Array){const r=e,n=r.length;let i=0;t=()=>{if(i<n)return r[i++];throw Gn}}else if(!(e instanceof Function))throw new Error("Lazy must be initialized with an array, generator, or function.");this.getNext=function(e,t,r){let n=!1,i=-1,o=0;return function(s){try{e:for(;!n;){let a=e();i++;let c=-1;const u=t.length;let l=!1;for(;++c<u;){const e=t[c];switch(e.action){case Jn.MAP:a=e.func(a,i);break;case Jn.FILTER:if(!e.func(a,i))continue e;break;case Jn.TAKE:--e.count,e.count||(l=!0);break;case Jn.DROP:--e.count,e.count||Qn(t,c);continue e;default:break e}}if(n=l,!s)return{value:a,done:!1};r[o++]=a}}catch(e){if(e!==Gn)throw e}return n=!0,{done:n}}}(t,this.iteratees,this.yieldedValues)}push(e,t){return"function"==typeof t?this.iteratees.push({action:e,func:t}):"number"==typeof t&&this.iteratees.push({action:e,count:t}),this}next(){return this.getNext()}map(e){return this.push(Jn.MAP,e)}filter(e){return this.push(Jn.FILTER,e)}take(e){return e>0?this.push(Jn.TAKE,e):this}drop(e){return e>0?this.push(Jn.DROP,e):this}transform(e){const t=this;let r;return Wn((()=>(r||(r=Wn(e(t.value()))),r.next())))}value(){return this.isDone||(this.isDone=this.getNext(!0).done),this.yieldedValues}each(e){for(;;){const t=this.next();if(t.done)break;if(!1===e(t.value))return!1}return!0}reduce(e,t){let r=this.next();for(void 0!==t||r.done||(t=r.value,r=this.next());!r.done;)t=e(t,r.value),r=this.next();return t}size(){return this.reduce(((e,t)=>++e),0)}[Symbol.iterator](){return this}}class Xn{constructor(e,t){this.pipeline=e,this.options=Ln(t)}stream(e){let t=Wn(e);const r=this.options.processingMode;r!=jn.CLONE_ALL&&r!=jn.CLONE_INPUT||t.map(zr);const n=new Array;if(!an(this.pipeline))for(const e of this.pipeline){const r=Object.keys(e),i=r[0],o=Un(Tn.PIPELINE,i,this.options);Hr(1===r.length&&!!o,`invalid pipeline operator ${i}`),n.push(i),t=o(t,e[i],this.options)}return(r==jn.CLONE_OUTPUT||r==jn.CLONE_ALL&&pn([["$group","$unwind"],n]).length)&&t.map(zr),t}run(e){return this.stream(e).value()}}class Zn{constructor(e,t,r,n){this.source=e,this.predicate=t,this.projection=r,this.options=n,this.operators=[],this.result=null,this.buffer=[]}fetch(){return this.result||(Xr(this.projection)&&this.operators.push({$project:this.projection}),this.result=Wn(this.source).filter(this.predicate),this.operators.length>0&&(this.result=new Xn(this.operators,this.options).stream(this.result))),this.result}fetchAll(){const e=Wn([...this.buffer]);return this.buffer=[],function(...e){let t=0;return Wn((()=>{for(;t<e.length;){const r=e[t].next();if(!r.done)return r;t++}return{done:!0}}))}(e,this.fetch())}all(){return this.fetchAll().value()}count(){return this.all().length}skip(e){return this.operators.push({$skip:e}),this}limit(e){return this.operators.push({$limit:e}),this}sort(e){return this.operators.push({$sort:e}),this}collation(e){return this.options=Object.assign(Object.assign({},this.options),{collation:e}),this}next(){if(this.buffer.length>0)return this.buffer.pop();const e=this.fetch().next();return e.done?void 0:e.value}hasNext(){if(this.buffer.length>0)return!0;const e=this.fetch().next();return!e.done&&(this.buffer.push(e.value),!0)}map(e){return this.all().map(e)}forEach(e){this.all().forEach(e)}[Symbol.iterator](){return this.fetchAll()}}class ei{constructor(e,t){this.condition=e,this.options=Ln(t),this.compiled=[],this.compile()}compile(){Hr(Xr(this.condition),`query criteria must be an object: ${JSON.stringify(this.condition)}`);const e={};for(const[t,r]of Object.entries(this.condition)){if("$where"===t)Object.assign(e,{field:t,expr:r});else if(on(["$and","$or","$nor","$expr","$jsonSchema"],t))this.processOperator(t,t,r);else{Hr(!Dn(t),`unknown top level operator: ${t}`);for(const[e,n]of Object.entries(In(r)))this.processOperator(t,e,n)}e.field&&this.processOperator(e.field,e.field,e.expr)}}processOperator(e,t,r){const n=Un(Tn.QUERY,t,this.options);if(!n)throw new Error(`unknown operator ${t}`);const i=n(e,r,this.options);this.compiled.push(i)}test(e){for(let t=0,r=this.compiled.length;t<r;t++)if(!this.compiled[t](e))return!1;return!0}find(e,t){return new Zn(e,(e=>this.test(e)),t||{},this.options)}remove(e){return e.reduce(((e,t)=>(this.test(t)||e.push(t),e)),[])}}new WeakMap;const ti=(e,t,r)=>{if(an(t)||!Xr(t))return e;let n=Vr;const i=r.collation;return Xr(i)&&Gr(i.locale)&&(n=function(e){const t={sensitivity:ri[e.strength||3],caseFirst:"off"===e.caseFirst?"false":e.caseFirst||"false",numeric:e.numericOrdering||!1,ignorePunctuation:"shifted"===e.alternate};!0===(e.caseLevel||!1)&&("base"===t.sensitivity&&(t.sensitivity="case"),"accent"===t.sensitivity&&(t.sensitivity="variant"));const r=new Intl.Collator(e.locale,t);return(e,t)=>{if(!Gr(e)||!Gr(t))return Vr(e,t);const n=r.compare(e,t);return n<0?-1:n>0?1:0}}(i)),e.transform((e=>{const i=Object.keys(t);for(const o of i.reverse()){const i=bn(e,(e=>Sn(e,o)),r.hashFunction),s=Array.from(i.keys()).sort(n);-1===t[o]&&s.reverse(),e=[],s.reduce(((e,t)=>_n(e,i.get(t))),e)}return e}))},ri={1:"base",2:"accent",3:"variant"};function ni(e){const t=(t,r,n)=>{const i={unwrapArray:!0},o=Math.max(1,t.split(".").length-1);return s=>{const a=Sn(s,t,i);return e(a,r,Object.assign(Object.assign({},n),{depth:o}))}};return t.op="query",t}function ii(e){return(t,r,n)=>{const i=Hn(t,r,null,n);return e(...i)}}function oi(e,t,r){if(vn(e,t))return!0;if(nn(e)&&nn(t))return!0;if(e instanceof Array){const n=vn.bind(null,t);return e.some(n)||mn(e,null==r?void 0:r.depth).some(n)}return!1}function si(e,t,r){return!oi(e,t,r)}function ai(e,t,r){return nn(e)?t.some((e=>null===e)):pn([un(e),t],null==r?void 0:r.hashFunction).length>0}function ci(e,t,r){return!ai(e,t,r)}function ui(e,t,r){return wi(e,t,((e,t)=>Vr(e,t)<0))}function li(e,t,r){return wi(e,t,((e,t)=>Vr(e,t)<=0))}function hi(e,t,r){return wi(e,t,((e,t)=>Vr(e,t)>0))}function di(e,t,r){return wi(e,t,((e,t)=>Vr(e,t)>=0))}function fi(e){return Dn(e)&&-1===["$and","$or","$nor"].indexOf(e)}function pi(e,t,r){if(Yr(e)&&!an(e)){let n=e=>e,i=t;Object.keys(t).every(fi)&&(i={temp:t},n=e=>({temp:e}));const o=new ei(i,r);for(let t=0,r=e.length;t<r;t++)if(o.test(n(e[t])))return!0}return!1}new Set(["$denseRank","$documentNumber","$first","$last","$linearFill","$rank","$shift"]),new Set(["$denseRank","$expMovingAvg","$linearFill","$locf","$rank","$shift"]);const mi=e=>null===e,yi=e=>Jr(e)&&e>=-2147483648&&e<=2147483647&&-1===e.toString().indexOf("."),vi=e=>Jr(e)&&e>=Pr&&e<=Or&&-1===e.toString().indexOf("."),gi={array:Yr,bool:Qr,boolean:Qr,date:en,decimal:Jr,double:Jr,int:yi,long:vi,number:Jr,null:mi,object:Xr,regex:tn,regexp:tn,string:Gr,undefined:nn,function:e=>{throw new Error("unsupported type key `function`.")},1:Jr,2:Gr,3:Xr,4:Yr,6:nn,8:Qr,9:en,10:mi,11:tn,16:yi,18:vi,19:Jr};function bi(e,t,r){const n=gi[t];return!!n&&n(e)}function wi(e,t,r){return un(e).some((e=>Wr(e)===Wr(t)&&r(e,t)))}ii(ci);const _i=(e,t)=>(r,n,i)=>{Hr(Yr(n),`${e}: expression must be an array.`);const o=Hn(r,n,null,i);return o.some(nn)?null:(Hr(o.every(Jr),`${e}: expression must evalue to array of numbers.`),t(o))};_i("$bitAnd",(e=>e.reduce(((e,t)=>e&t),-1))),_i("$bitOr",(e=>e.reduce(((e,t)=>e|t),0))),_i("$bitXor",(e=>e.reduce(((e,t)=>e^t),0))),ii(oi),ii(hi),ii(di),ii(ui),ii(li),ii(si);const Ei=(e,t)=>{const r={};return e.split("").forEach(((e,n)=>r[e]=t*(n+1))),r};Object.assign(Object.assign(Object.assign({},Ei("ABCDEFGHIKLM",1)),Ei("NOPQRSTUVWXY",-1)),{Z:0});const Si={undefined:null,null:null,NaN:NaN,Infinity:new Error,"-Infinity":new Error};function Ci(e,t=Si){const r=Object.assign({},Si,t),n=new Set(Object.keys(r));return(t,i,o)=>{const s=Hn(t,i,null,o);if(n.has(`${s}`)){const t=r[`${s}`];if(t instanceof Error)throw new Error(`cannot apply $${e.name} to -inf, value must in (-inf,inf)`);return t}return e(s)}}Ci(Math.acos,{Infinity:1/0,0:new Error}),Ci(Math.acosh,{Infinity:1/0,0:new Error}),Ci(Math.asin),Ci(Math.asinh,{Infinity:1/0,"-Infinity":-1/0}),Ci(Math.atan),Ci(Math.atanh,{1:1/0,"-1":-1/0}),Ci(Math.cos),Ci(Math.cosh,{"-Infinity":1/0,Infinity:1/0});const ki=Math.PI/180,xi=(Ci((e=>e*ki),{Infinity:1/0,"-Infinity":1/0}),180/Math.PI);Ci((e=>e*xi),{Infinity:1/0,"-Infinity":-1/0}),Ci(Math.sin),Ci(Math.sinh,{"-Infinity":-1/0,Infinity:1/0}),Ci(Math.tan);const Oi=(e,t,r)=>{if(an(t))return e;let n=Object.keys(t),i=!1;Ri(t,r);const o=r.idKey;if(on(n,o)){const e=t[o];0!==e&&!1!==e||(n=n.filter(sn.bind(null,[o])),i=0==n.length)}else n.push(o);const s=Mn.init(r);return e.map((e=>Pi(e,t,s.update(e),n,i)))};function Pi(e,t,r,n,i){let o={},s=!1,a=!1;const c=[];i&&c.push(r.idKey);for(const i of n){let n;const u=t[i];if(i!==r.idKey&&on([0,!1],u)&&(a=!0),i===r.idKey&&an(u))n=e[i];else if(Gr(u))n=Hn(e,u,i,r);else if(on([1,!0],u));else if(u instanceof Array)n=u.map((t=>{const n=Hn(e,t,null,r);return nn(n)?null:n}));else{if(!Xr(u)){c.push(i);continue}{const t=u,o=Object.keys(u),a=1==o.length?o[0]:"",c=Un(Tn.PROJECTION,a,r);if(c)"$slice"===a?un(t[a]).every(Jr)?(n=c(e,t[a],i,r),s=!0):n=Hn(e,t,i,r):n=c(e,t[a],i,r);else if(Dn(a))n=Hn(e,t[a],a,r);else if(ln(e,i)){Ri(t,r);let s=e[i];s instanceof Array?n=s.map((e=>Pi(e,t,r,o,!1))):(s=Xr(s)?s:e,n=Pi(s,t,r,o,!1))}else n=Hn(e,u,null,r)}}const l=Cn(e,i,{preserveMissing:!0});void 0!==l&&dn(o,l,{flatten:!0}),sn([0,1,!1,!0],u)&&(void 0===n?Rn(o,i,{descendArray:!0}):Pn(o,i,n))}if(kn(o),(s||a||i)&&(o=_n({},e,o),c.length>0))for(const e of c)Rn(o,e,{descendArray:!0});return o}function Ri(e,t){const r=[!1,!1];for(const[n,i]of Object.entries(e)){if(n===(null==t?void 0:t.idKey))return;0===i||!1===i?r[0]=!0:1!==i&&!0!==i||(r[1]=!0),Hr(!(r[0]&&r[1]),"Projection cannot have a mix of inclusion and exclusion.")}}const $i=(e,t,r)=>{Hr(Yr(t),"Invalid expression: $and expects value to be an Array.");const n=t.map((e=>new ei(e,r)));return e=>n.every((t=>t.test(e)))},Di=(e,t,r)=>{Hr(Yr(t),"Invalid expression. $or expects value to be an Array");const n=t.map((e=>new ei(e,r)));return e=>n.some((t=>t.test(e)))},Ii=(e,t,r)=>{Hr(Yr(t),"Invalid expression. $nor expects value to be an array.");const n=Di("$or",t,r);return e=>!n(e)},ji=(e,t,r)=>{const n={};n[e]=In(t);const i=new ei(n,r);return e=>!i.test(e)},Ti=ni(oi),Ai=ni(hi),Ni=ni(di),Mi=ni(ai),Li=ni(ui),Bi=ni(li),Fi=ni(si),qi=ni(ci),Ui=ni((function(e,t,r){return un(e).some((e=>2===t.length&&e%t[0]===t[1]))})),Ki=ni((function(e,t,r){const n=un(e),i=e=>Gr(e)&&((e,t=!0)=>!!e||t&&""===e)(t.exec(e),null==r?void 0:r.useStrictMode);return n.some(i)||mn(n,1).some(i)}));ni((function(e,t,r){if(!(Yr(e)&&Yr(t)&&e.length&&t.length))return!1;let n=!0;for(const i of t){if(!n)break;n=Xr(i)&&on(Object.keys(i),"$elemMatch")?pi(e,i.$elemMatch,r):i instanceof RegExp?e.some((e=>"string"==typeof e&&i.test(e))):e.some((e=>vn(i,e)))}return n}));const Vi=ni(pi),Hi=ni((function(e,t,r){return Array.isArray(e)&&e.length===t})),zi=ni((function(e,t,r){return(!1===t||0===t)&&void 0===e||(!0===t||1===t)&&void 0!==e})),Wi=ni((function(e,t,r){return Array.isArray(t)?t.findIndex((t=>bi(e,t)))>=0:bi(e,t)}));var Qi=!1;function Gi(e,t){var r=G(e.primaryKey);t=p(t);var n=y(t);if("number"!=typeof n.skip&&(n.skip=0),n.selector?(n.selector=n.selector,Object.entries(n.selector).forEach((([e,t])=>{"object"==typeof t&&null!==t||(n.selector[e]={$eq:t})}))):n.selector={},n.index){var i=g(n.index);i.includes(r)||i.push(r),n.index=i}if(n.sort)n.sort.find((e=>{return t=e,Object.keys(t)[0]===r;var t}))||(n.sort=n.sort.slice(0),n.sort.push({[r]:"asc"}));else if(n.index)n.sort=n.index.map((e=>({[e]:"asc"})));else{if(e.indexes){var o=new Set;Object.entries(n.selector).forEach((([e,t])=>{("object"!=typeof t||null===t||Object.keys(t).find((e=>Sr.has(e))))&&o.add(e)}));var s,a=-1;e.indexes.forEach((e=>{var t=b(e)?e:[e],r=t.findIndex((e=>!o.has(e)));r>0&&r>a&&(a=r,s=t)})),s&&(n.sort=s.map((e=>({[e]:"asc"}))))}n.sort||(n.sort=[{[r]:"asc"}])}return n}function Ji(e,t){if(!t.sort)throw I("SNH",{query:t});var r=[];return t.sort.forEach((e=>{var t,n,i,o=Object.keys(e)[0],s=Object.values(e)[0];r.push({key:o,direction:s,getValueFn:(t=o,n=t.split("."),i=n.length,1===i?e=>e[t]:e=>{for(var t=e,r=0;r<i;++r)if(void 0===(t=t[n[r]]))return t;return t})})})),(e,t)=>{for(var n=0;n<r.length;++n){var i=r[n],o=i.getValueFn(e),s=i.getValueFn(t);if(o!==s)return"asc"===i.direction?Vr(o,s):Vr(s,o)}}}function Yi(e,t){if(!t.sort)throw I("SNH",{query:t});var r,n=(r=t.selector,Qi||(qn(Tn.PIPELINE,{$sort:ti,$project:Oi}),qn(Tn.QUERY,{$and:$i,$eq:Ti,$elemMatch:Vi,$exists:zi,$gt:Ai,$gte:Ni,$in:Mi,$lt:Li,$lte:Bi,$ne:Fi,$nin:qi,$mod:Ui,$nor:Ii,$not:ji,$or:Di,$regex:Ki,$size:Hi,$type:Wi}),Qi=!0),new ei(r));return e=>!e._deleted&&n.test(e)}function Xi(e,t){return t.sort&&0!==t.sort.length?t.sort.map((e=>Object.keys(e)[0])):[e]}var Zi=new WeakMap;function eo(t,r){if(!t.collection.database.eventReduce)return{runFullQueryAgain:!0};var n=function(e){return Ot(Zi,e,(()=>{var t=e.collection,r=Gi(t.storageInstance.schema,y(e.mangoQuery)),n=t.schema.primaryPath,i=Ji(t.schema.jsonSchema,r),o=Yi(t.schema.jsonSchema,r);return{primaryKey:e.collection.schema.primaryPath,skip:r.skip,limit:r.limit,sortFields:Xi(n,r),sortComparator:(t,r)=>{var n={docA:t,docB:r,rxQuery:e};return i(n.docA,n.docB)},queryMatcher:t=>o({doc:t,rxQuery:e}.doc)}}))}(t),i=e(t._result).docsData.slice(0),o=e(t._result).docsDataMap,s=!1,a=r.map((e=>function(e){switch(e.operation){case"INSERT":return{operation:e.operation,id:e.documentId,doc:e.documentData,previous:null};case"UPDATE":return{operation:e.operation,id:e.documentId,doc:P.deepFreezeWhenDevMode(e.documentData),previous:e.previousDocumentData?e.previousDocumentData:"UNKNOWN"};case"DELETE":return{operation:e.operation,id:e.documentId,doc:null,previous:e.previousDocumentData}}}(e))).filter(w).find((e=>{var t=function(e){const t=br(e);return ar[t]}({queryParams:n,changeEvent:e,previousResults:i,keyDocumentMap:o});return"runFullQueryAgain"===t||("doNothing"!==t?(s=!0,function(e,t,r,n,i){(0,cr[e])({queryParams:t,changeEvent:r,previousResults:n,keyDocumentMap:i})}(t,n,e,i,o),!1):void 0)}));return a?{runFullQueryAgain:!0}:{runFullQueryAgain:!1,changed:s,newResults:i}}var to=function(){function e(){this._map=new Map}return e.prototype.getByQuery=function(e){var t=e.toString();return Ot(this._map,t,(()=>e))},e}();function ro(e,t){t.uncached=!0;var r=t.toString();e._map.delete(r)}function no(e){return e.refCount$.observers.length}var io=(100,3e4,(e,t)=>{if(!(t._map.size<100)){var r=It()-3e4,n=[],i=Array.from(t._map.values());for(var o of i)no(o)>0||(0===o._lastEnsureEqual&&o._creationTime<r?ro(t,o):n.push(o));var s=n.length-100;if(!(s<=0)){var a=n.sort(((e,t)=>e._lastEnsureEqual-t._lastEnsureEqual));a.slice(0,s).forEach((e=>ro(t,e)))}}}),oo=new WeakSet;var so=function(){function e(e,t,r){this.cacheItemByDocId=new Map,this.registry="function"==typeof FinalizationRegistry?new FinalizationRegistry((e=>{var t=e.docId,r=this.cacheItemByDocId.get(t);r&&(r.byRev.delete(e.revisionHeight),0===r.byRev.size&&this.cacheItemByDocId.delete(t))})):void 0,this.registerIdleTasks=[],this.primaryPath=e,this.changes$=t,this.documentCreator=r,t.subscribe((e=>{var t=e.documentId,r=this.cacheItemByDocId.get(t);if(r){var n=$t(e);r.last=n}}))}var t=e.prototype;return t.getLatestDocumentData=function(e){return xt(this.cacheItemByDocId,e).last},t.getLatestDocumentDataIfExists=function(e){var t=this.cacheItemByDocId.get(e);if(t)return t.last},l(e,[{key:"getCachedRxDocument",get:function(){var e,t,r,n,i,o;return v(this,"getCachedRxDocument",(t=(e=this).primaryPath,r=e.cacheItemByDocId,n=e.registry,i=P.deepFreezeWhenDevMode,o=e.documentCreator,s=>{var a=s[t],c=Tt(s._rev),u=Ot(r,a,(()=>function(e){return{byRev:new Map,last:e}}(s))),l=u.byRev,h=l.get(c),d=h?h.deref():void 0;return d||(s=i(s),d=o(s),l.set(c,co(d)),n&&(e.registerIdleTasks.push(d),e.registerIdlePromise||(e.registerIdlePromise=Ct().then((()=>{e.registerIdlePromise=void 0;var t=e.registerIdleTasks;0!==t.length&&(e.registerIdleTasks=[],t.forEach((e=>{n.register(e,{docId:e.primary,revisionHeight:Tt(e.revision)})})))}))))),d}))}}]),e}();function ao(e,t){for(var r=e.getCachedRxDocument,n=[],i=0;i<t.length;i++){var o=r(t[i]);n.push(o)}return n}var co="function"==typeof WeakRef?function(e){return new WeakRef(e)}:function(e){return{deref:()=>e}},uo=function(){function e(e,t,r){this.time=It(),this.collection=e,this.count=r,this.documents=ao(this.collection._docCache,t)}return l(e,[{key:"docsData",get:function(){return v(this,"docsData",this.documents.map((e=>e._data)))}},{key:"docsDataMap",get:function(){var e=new Map;return this.documents.forEach((t=>{e.set(t.primary,t._data)})),v(this,"docsDataMap",e)}},{key:"docsMap",get:function(){for(var e=new Map,t=this.documents,r=0;r<t.length;r++){var n=t[r];e.set(n.primary,n)}return v(this,"docsMap",e)}}]),e}(),lo=0,ho=function(){function r(e,t,r,n={}){this.id=++lo,this._execOverDatabaseCount=0,this._creationTime=It(),this._lastEnsureEqual=0,this.uncached=!1,this.refCount$=new Yt(null),this._result=null,this._latestChangeEvent=-1,this._lastExecStart=0,this._lastExecEnd=0,this._ensureEqualQueue=_t,this.op=e,this.mangoQuery=t,this.collection=r,this.other=n,t||(this.mangoQuery={selector:{}}),this.isFindOneByIdQuery=function(e,t){if(!t.skip&&t.selector&&1===Object.keys(t.selector).length&&t.selector[e]){var r=t.selector[e];if("string"==typeof r)return r;if(1===Object.keys(r).length&&"string"==typeof r.$eq)return r.$eq;if(1===Object.keys(r).length&&Array.isArray(r.$eq)&&!r.$eq.find((e=>"string"!=typeof e)))return r.$eq}return!1}(this.collection.schema.primaryPath,t)}var n=r.prototype;return n._setResultData=function(e){if("number"!=typeof e){e instanceof Map&&(e=Array.from(e.values()));var t=new uo(this.collection,e,e.length);this._result=t}else this._result=new uo(this.collection,[],e)},n._execOverDatabase=async function(){if(this._execOverDatabaseCount=this._execOverDatabaseCount+1,this._lastExecStart=It(),"count"===this.op){var t=this.getPreparedQuery(),r=await this.collection.storageInstance.count(t);if("slow"!==r.mode||this.collection.database.allowSlowCount)return r.count;throw I("QU14",{collection:this.collection,queryObj:this.mangoQuery})}if("findByIds"===this.op){var n=e(this.mangoQuery.selector)[this.collection.schema.primaryPath].$in,i=new Map,o=[];return n.forEach((e=>{var t=this.collection._docCache.getLatestDocumentDataIfExists(e);if(t){if(!t._deleted){var r=this.collection._docCache.getCachedRxDocument(t);i.set(e,r)}}else o.push(e)})),o.length>0&&(await this.collection.storageInstance.findDocumentsById(o,!1)).forEach((e=>{var t=this.collection._docCache.getCachedRxDocument(e);i.set(t.primary,t)})),i}var s=async function(e){var t=[],r=e.collection;if(e.isFindOneByIdQuery)if(Array.isArray(e.isFindOneByIdQuery)){var n=e.isFindOneByIdQuery;if(n=n.filter((r=>{var n=e.collection._docCache.getLatestDocumentDataIfExists(r);return!n||(n._deleted||t.push(n),!1)})),n.length>0){var i=await r.storageInstance.findDocumentsById(n,!1);E(t,i)}}else{var o=e.isFindOneByIdQuery,s=e.collection._docCache.getLatestDocumentDataIfExists(o);if(!s){var a=await r.storageInstance.findDocumentsById([o],!1);a[0]&&(s=a[0])}s&&!s._deleted&&t.push(s)}else{var c=e.getPreparedQuery(),u=await r.storageInstance.query(c);t=u.documents}return t}(this);return s.then((e=>(this._lastExecEnd=It(),e)))},n.exec=function(e){if(e&&"findOne"!==this.op)throw I("QU9",{collection:this.collection.name,query:this.mangoQuery,op:this.op});return mo(this).then((()=>Zt(this.$))).then((t=>{if(!t&&e)throw I("QU10",{collection:this.collection.name,query:this.mangoQuery,op:this.op});return t}))},n.toString=function(){var e=m({op:this.op,query:this.mangoQuery,other:this.other},!0),t=JSON.stringify(e);return this.toString=()=>t,t},n.getPreparedQuery=function(){var e={rxQuery:this,mangoQuery:Gi(this.collection.schema.jsonSchema,this.mangoQuery)};M("prePrepareQuery",e);var t=this.collection.database.storage.statics.prepareQuery(this.collection.schema.jsonSchema,e.mangoQuery);return this.getPreparedQuery=()=>t,t},n.doesDocumentDataMatch=function(e){return!e._deleted&&this.queryMatcher(e)},n.remove=function(){return this.exec().then((e=>Array.isArray(e)?Promise.all(e.map((e=>e.remove()))):e.remove()))},n.update=function(e){throw Pt("update")},n.where=function(e){throw Pt("query-builder")},n.sort=function(e){throw Pt("query-builder")},n.skip=function(e){throw Pt("query-builder")},n.limit=function(e){throw Pt("query-builder")},l(r,[{key:"$",get:function(){if(!this._$){var r=this.collection.$.pipe(Ne((e=>!e.isLocal)),ut(null),Ze((()=>mo(this))),Ae((()=>this._result)),gt(t),lt(((t,r)=>!(!t||t.time!==e(r).time))),Ne((e=>!!e)),Ae((t=>{var r=e(t);return"count"===this.op?r.count:"findOne"===this.op?0===r.documents.length?null:r.documents[0]:"findByIds"===this.op?r.docsMap:r.documents.slice(0)})));this._$=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=rt(e),n=nt(e,1/0),i=e;return i.length?1===i.length?Je(i[0]):et(n)(at(i,r)):er}(r,this.refCount$.pipe(Ne((()=>!1))))}return this._$}},{key:"queryMatcher",get:function(){return this.collection.schema.jsonSchema,v(this,"queryMatcher",Yi(0,Gi(this.collection.schema.jsonSchema,this.mangoQuery)))}},{key:"asRxQuery",get:function(){return this}}]),r}();function fo(e,t,r,n){M("preCreateRxQuery",{op:e,queryObj:t,collection:r,other:n});var i,o,s=new ho(e,t,r,n);return s=(i=s).collection._queryCache.getByQuery(i),o=r,oo.has(o)||(oo.add(o),new Promise((e=>setTimeout(e,0))).then((()=>kt=kt.then((()=>Ct(200))))).then((()=>{o.destroyed||o.cacheReplacementPolicy(o,o._queryCache),oo.delete(o)}))),s}function po(e){var t=e.asRxQuery.collection._changeEventBuffer.counter;return e._latestChangeEvent>=t}function mo(t){return t.collection.database.destroyed||po(t)?_t:(t._ensureEqualQueue=t._ensureEqualQueue.then((()=>function(t){if(t._lastEnsureEqual=It(),t.collection.database.destroyed||po(t))return _t;var r=!1,n=!1;if(-1===t._latestChangeEvent&&(n=!0),!n){var i=t.asRxQuery.collection._changeEventBuffer.getFrom(t._latestChangeEvent+1);if(null===i)n=!0;else{t._latestChangeEvent=t.asRxQuery.collection._changeEventBuffer.counter;var o=t.asRxQuery.collection._changeEventBuffer.reduceByLastOfDoc(i);if("count"===t.op){var s=e(t._result).count,a=s;o.forEach((e=>{var r=e.previousDocumentData&&t.doesDocumentDataMatch(e.previousDocumentData),n=t.doesDocumentDataMatch(e.documentData);!r&&n&&a++,r&&!n&&a--})),a!==s&&(r=!0,t._setResultData(a))}else{var c=eo(t,o);c.runFullQueryAgain?n=!0:c.changed&&(r=!0,t._setResultData(c.newResults))}}}return n?t._execOverDatabase().then((e=>(t._latestChangeEvent=t.collection._changeEventBuffer.counter,"number"==typeof e?(t._result&&e===t._result.count||(r=!0,t._setResultData(e)),r):(t._result&&function(e,t,r){if(t.length!==r.length)return!1;for(var n=0,i=t.length;n<i;){var o=t[n],s=r[n];if(n++,o._rev!==s._rev||o[e]!==s[e])return!1}return!0}(t.collection.schema.primaryPath,e,t._result.docsData)||(r=!0,t._setResultData(e)),r)))):Promise.resolve(r)}(t))),t._ensureEqualQueue)}var yo="collection",vo="storage-token",go=Y({version:0,title:"RxInternalDocument",primaryKey:{key:"id",fields:["context","key"],separator:"|"},type:"object",properties:{id:{type:"string",maxLength:200},key:{type:"string"},context:{type:"string",enum:[yo,vo,"rx-migration-status","OTHER"]},data:{type:"object",additionalProperties:!0}},indexes:[],required:["key","context","data"],additionalProperties:!1,sharding:{shards:1,mode:"collection"}});function bo(e,t){return J(go,{key:e,context:t})}async function wo(e,t){var r=e.prepareQuery(t.schema,{selector:{context:yo},sort:[{id:"asc"}],skip:0});return(await t.query(r)).documents}var _o="storageToken",Eo=bo(_o,vo);async function So(t,r,n){if(t.schema.version!==n.version)throw I("SNH",{schema:n,version:t.schema.version,name:t.name,collection:t,args:{storageCollectionName:r}});for(var i=bo(Co(t.name,t.schema.jsonSchema),yo);;){var o=await Mt(t.database.internalStore,i),s=y(e(o));if(s.data.connectedStorages.find((e=>e.collectionName===r&&e.schema.version===n.version)))return;s.data.connectedStorages.push({collectionName:r,schema:n});try{await Lt(t.database.internalStore,{previous:e(o),document:s},"add-connected-storage-to-collection")}catch(e){if(!T(e))throw e}}}function Co(e,t){return e+"-"+t.version}function ko(e,t){return t=function(e,t){for(var r=Object.keys(e.defaultValues),n=0;n<r.length;++n){var i=r[n];t.hasOwnProperty(i)&&void 0!==t[i]||(t[i]=e.defaultValues[i])}return t}(e,t=p(t)),(t=Q(e.primaryPath,e.jsonSchema,t))._meta=z(),t.hasOwnProperty("_deleted")||(t._deleted=!1),t.hasOwnProperty("_attachments")||(t._attachments={}),t.hasOwnProperty("_rev")||(t._rev=""),t}async function xo(e,t,r,n,i,o,s){var a=(await wo(e.statics,t)).filter((e=>e.data.name===i)),c=[];a.forEach((e=>{c.push({collectionName:e.data.name,schema:e.data.schema,isCollection:!0}),e.data.connectedStorages.forEach((e=>c.push({collectionName:e.collectionName,isCollection:!1,schema:e.schema})))}));var u=new Set;if(c=c.filter((e=>{var t=e.collectionName+"||"+e.schema.version;return!u.has(t)&&(u.add(t),!0)})),await Promise.all(c.map((async t=>{var s=await e.createStorageInstance({collectionName:t.collectionName,databaseInstanceToken:r,databaseName:n,multiInstance:!1,options:{},schema:t.schema,password:o,devMode:P.isDevMode()});await s.remove(),t.isCollection&&await L("postRemoveRxCollection",{storage:e,databaseName:n,collectionName:i})}))),s){var l=a.map((e=>{var t=Kt(e);return t._deleted=!0,t._meta.lwt=It(),t._rev=At(r,e),{previous:e,document:t}}));await t.bulkWrite(l,"rx-database-remove-collection-all")}}var Oo=function(){function e(e){this.subs=[],this.limit=100,this.counter=0,this.eventCounterMap=new WeakMap,this.buffer=[],this.collection=e,this.subs.push(this.collection.$.pipe(Ne((e=>!e.isLocal))).subscribe((e=>this._handleChangeEvent(e))))}var t=e.prototype;return t._handleChangeEvent=function(e){for(this.counter++,this.buffer.push(e),this.eventCounterMap.set(e,this.counter);this.buffer.length>this.limit;)this.buffer.shift()},t.getArrayIndexByPointer=function(e){var t=this.buffer[0],r=this.eventCounterMap.get(t);return e<r?null:e-r},t.getFrom=function(e){var t=[],r=this.getArrayIndexByPointer(e);if(null===r)return null;for(;;){var n=this.buffer[r];if(r++,!n)return t;t.push(n)}},t.runFrom=function(e,t){var r=this.getFrom(e);if(null===r)throw new Error("out of bounds");r.forEach((e=>t(e)))},t.reduceByLastOfDoc=function(e){return e.slice(0)},t.destroy=function(){this.subs.forEach((e=>e.unsubscribe()))},e}(),Po=new WeakMap;function Ro(e,t){var r=function(e,t,r){var n=new e(t,r);return M("createRxDocument",n),n}(function(e){return Ot(Po,e,(()=>Gt(function(e){var t=e.schema.getDocumentPrototype(),r=function(e){var t={};return Object.entries(e.methods).forEach((([e,r])=>{t[e]=r})),t}(e),n={};return[t,r,Qt].forEach((e=>{Object.getOwnPropertyNames(e).forEach((t=>{var r=Object.getOwnPropertyDescriptor(e,t),i=!0;(t.startsWith("_")||t.endsWith("_")||t.startsWith("$")||t.endsWith("$"))&&(i=!1),"function"==typeof r.value?Object.defineProperty(n,t,{get(){return r.value.bind(this)},enumerable:i,configurable:!1}):(r.enumerable=i,r.configurable=!1,r.writable&&(r.writable=!1),Object.defineProperty(n,t,r))}))})),n}(e))))}(e),e,P.deepFreezeWhenDevMode(t));return e._runHooksSync("post","create",t,r),M("postCreateRxDocument",r),r}var $o=function(e,t){return h(Ut(e.newDocumentState),Ut(e.realMasterState))?Promise.resolve({isEqual:!0}):Promise.resolve({isEqual:!1,documentData:e.realMasterState})},Do=["pre","post"],Io=["insert","save","remove","create"],jo=!1,To=function(){function t(e,t,r,n,i={},s={},a={},c={},u={},l=io,h={},d=$o){this.storageInstance={},this.timeouts=new Set,this.incrementalWriteQueue={},this._incrementalUpsertQueues=new Map,this.synced=!1,this.hooks={},this._subs=[],this._docCache={},this._queryCache=new to,this.$={},this.checkpoint$={},this._changeEventBuffer={},this.onDestroy=[],this.destroyed=!1,this.database=e,this.name=t,this.schema=r,this.internalStorageInstance=n,this.instanceCreationOptions=i,this.migrationStrategies=s,this.methods=a,this.attachments=c,this.options=u,this.cacheReplacementPolicy=l,this.statics=h,this.conflictHandler=d,function(e){if(!jo){jo=!0;var t=Object.getPrototypeOf(e);Io.forEach((e=>{Do.map((r=>{var n=r+o(e);t[n]=function(t,n){return this.addHook(r,e,t,n)}}))}))}}(this.asRxCollection)}var r=t.prototype;return r.prepare=async function(){this.storageInstance=Vt(this.database,this.internalStorageInstance,this.schema.jsonSchema),this.incrementalWriteQueue=new zt(this.storageInstance,this.schema.primaryPath,((e,t)=>Jt(this,e,t)),(e=>this._runHooks("post","save",e)));var e,t=this.database.eventBulks$.pipe(Ne((e=>e.collectionName===this.name)));this.$=t.pipe(Ze((e=>e.events))),this.checkpoint$=t.pipe(Ae((e=>e.checkpoint))),this._changeEventBuffer=(e=this.asRxCollection,new Oo(e)),this._docCache=new so(this.schema.primaryPath,this.$.pipe(Ne((e=>!e.isLocal))),(e=>Ro(this.asRxCollection,e)));var r=await this.database.storageToken,n=this.storageInstance.changeStream().subscribe((e=>{var t={id:e.id,internal:!1,collectionName:this.name,storageToken:r,events:e.events.map((e=>{return!1,this,r=(t=e).documentData,n=t.previousDocumentData,{documentId:t.documentId,collectionName:this?this.name:void 0,isLocal:false,operation:t.operation,documentData:P.deepFreezeWhenDevMode(r),previousDocumentData:P.deepFreezeWhenDevMode(n)};var t,r,n})),databaseToken:this.database.token,checkpoint:e.checkpoint,context:e.context,endTime:e.endTime,startTime:e.startTime};this.database.$emit(t)}));return this._subs.push(n),this._subs.push(this.storageInstance.conflictResultionTasks().subscribe((e=>{this.conflictHandler(e.input,e.context).then((t=>{this.storageInstance.resolveConflictResultionTask({id:e.id,output:t})}))}))),St},r.cleanup=function(e){throw Pt("cleanup")},r.migrationNeeded=function(){throw Pt("migration")},r.getMigrationState=function(){throw Pt("migration")},r.startMigration=function(e=10){return this.getMigrationState().startMigration(e)},r.migratePromise=function(e=10){return this.getMigrationState().migratePromise(e)},r.insert=async function(t){var r=await this.bulkInsert([t]),n=r.error[0];return Ft(this,t[this.schema.primaryPath],t,n),e(r.success[0])},r.bulkInsert=async function(e){if(0===e.length)return{success:[],error:[]};var t=this.schema.primaryPath,r=e.map((e=>ko(this.schema,e))),n=this.hasHooks("pre","insert")?await Promise.all(r.map((e=>this._runHooks("pre","insert",e).then((()=>e))))):r,i=n.map((e=>({document:e}))),o=await this.storageInstance.bulkWrite(i,"rx-collection-bulk-insert"),s=ao(this._docCache,o.success);if(this.hasHooks("post","insert")){var a=new Map;n.forEach((e=>{a.set(e[t],e)})),await Promise.all(s.map((e=>this._runHooks("post","insert",a.get(e.primary),e))))}return{success:s,error:o.error}},r.bulkRemove=async function(e){var t=this.schema.primaryPath;if(0===e.length)return{success:[],error:[]};var r=await this.findByIds(e).exec(),n=[],i=new Map;Array.from(r.values()).forEach((e=>{var t=e.toMutableJSON(!0);n.push(t),i.set(e.primary,t)})),await Promise.all(n.map((e=>{var t=e[this.schema.primaryPath];return this._runHooks("pre","remove",e,r.get(t))})));var o=n.map((e=>{var t=p(e);return t._deleted=!0,{previous:e,document:t}})),s=await this.storageInstance.bulkWrite(o,"rx-collection-bulk-remove"),a=s.success.map((e=>e[t]));return await Promise.all(a.map((e=>this._runHooks("post","remove",i.get(e),r.get(e))))),{success:a.map((e=>xt(r,e))),error:s.error}},r.bulkUpsert=async function(t){var r=[],n=new Map;t.forEach((e=>{var t=ko(this.schema,e),i=t[this.schema.primaryPath];if(!i)throw I("COL3",{primaryPath:this.schema.primaryPath,data:t,schema:this.schema.jsonSchema});n.set(i,t),r.push(t)}));var i=await this.bulkInsert(r),o=i.success.slice(0),s=[];return await Promise.all(i.error.map((async t=>{if(409!==t.status)s.push(t);else{var r=t.documentId,i=xt(n,r),a=e(t.documentInDb),c=this._docCache.getCachedRxDocument(a),u=await c.incrementalModify((()=>i));o.push(u)}}))),{error:s,success:o}},r.upsert=async function(e){var t=await this.bulkUpsert([e]);return Ft(this.asRxCollection,e[this.schema.primaryPath],e,t.error[0]),t.success[0]},r.incrementalUpsert=function(e){var t=ko(this.schema,e),r=t[this.schema.primaryPath];if(!r)throw I("COL4",{data:e});var n=this._incrementalUpsertQueues.get(r);return n||(n=St),n=n.then((()=>function(e,t,r){var n=e._docCache.getLatestDocumentDataIfExists(t);return n?Promise.resolve({doc:e._docCache.getCachedRxDocument(n),inserted:!1}):e.findOne(t).exec().then((t=>t?{doc:t,inserted:!1}:e.insert(r).then((e=>({doc:e,inserted:!0})))))}(this,r,t))).then((e=>e.inserted?e.doc:function(e,t){return e.incrementalModify((e=>t))}(e.doc,t))),this._incrementalUpsertQueues.set(r,n),n},r.find=function(e){if("string"==typeof e)throw I("COL5",{queryObj:e});return e||(e={selector:{}}),fo("find",e,this)},r.findOne=function(e){if("number"==typeof e||Array.isArray(e))throw j("COL6",{queryObj:e});var t;if("string"==typeof e)t=fo("findOne",{selector:{[this.schema.primaryPath]:e},limit:1},this);else{if(e||(e={selector:{}}),e.limit)throw I("QU6");(e=p(e)).limit=1,t=fo("findOne",e,this)}return t},r.count=function(e){return e||(e={selector:{}}),fo("count",e,this)},r.findByIds=function(e){return fo("findByIds",{selector:{[this.schema.primaryPath]:{$in:e.slice(0)}}},this)},r.exportJSON=function(){throw Pt("json-dump")},r.importJSON=function(e){throw Pt("json-dump")},r.insertCRDT=function(e){throw Pt("crdt")},r.addHook=function(e,t,r,n=!1){if("function"!=typeof r)throw j("COL7",{key:t,when:e});if(!Do.includes(e))throw j("COL8",{key:t,when:e});if(!Io.includes(t))throw I("COL9",{key:t});if("post"===e&&"create"===t&&!0===n)throw I("COL10",{when:e,key:t,parallel:n});var i=r.bind(this),o=n?"parallel":"series";this.hooks[t]=this.hooks[t]||{},this.hooks[t][e]=this.hooks[t][e]||{series:[],parallel:[]},this.hooks[t][e][o].push(i)},r.getHooks=function(e,t){return this.hooks[t]&&this.hooks[t][e]?this.hooks[t][e]:{series:[],parallel:[]}},r.hasHooks=function(e,t){var r=this.getHooks(e,t);return!!r&&(r.series.length>0||r.parallel.length>0)},r._runHooks=function(e,t,r,n){var i,o=this.getHooks(e,t);return o?(i=o.series.map((e=>()=>e(r,n))),i.reduce(((e,t)=>e.then(t)),Promise.resolve(void 0))).then((()=>Promise.all(o.parallel.map((e=>e(r,n)))))):St},r._runHooksSync=function(e,t,r,n){var i=this.getHooks(e,t);i&&i.series.forEach((e=>e(r,n)))},r.promiseWait=function(e){return new Promise((t=>{var r=setTimeout((()=>{this.timeouts.delete(r),t()}),e);this.timeouts.add(r)}))},r.destroy=function(){return this.destroyed?_t:(this.destroyed=!0,Array.from(this.timeouts).forEach((e=>clearTimeout(e))),this._changeEventBuffer&&this._changeEventBuffer.destroy(),this.database.requestIdlePromise().then((()=>Promise.all(this.onDestroy.map((e=>e()))))).then((()=>this.storageInstance.close())).then((()=>(this._subs.forEach((e=>e.unsubscribe())),delete this.database.collections[this.name],L("postDestroyRxCollection",this).then((()=>!0))))))},r.remove=async function(){await this.destroy(),await xo(this.database.storage,this.database.internalStore,this.database.token,this.database.name,this.name,this.database.password,this.database.hashFunction)},l(t,[{key:"insert$",get:function(){return this.$.pipe(Ne((e=>"INSERT"===e.operation)))}},{key:"update$",get:function(){return this.$.pipe(Ne((e=>"UPDATE"===e.operation)))}},{key:"remove$",get:function(){return this.$.pipe(Ne((e=>"DELETE"===e.operation)))}},{key:"asRxCollection",get:function(){return this}}]),t}(),Ao=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:1;this._parallels=e||1,this._qC=0,this._iC=new Set,this._lHN=0,this._hPM=new Map,this._pHM=new Map};function No(e,t){if(t){if(t._timeoutObj&&clearTimeout(t._timeoutObj),e._pHM.has(t)){var r=e._pHM.get(t);e._hPM.delete(r),e._pHM.delete(t)}e._iC.delete(t)}}function Mo(e){e._tryIR||0===e._iC.size||(e._tryIR=!0,setTimeout((function(){e.isIdle()?setTimeout((function(){e.isIdle()?(function(e){0!==e._iC.size&&(e._iC.values().next().value._manRes(),setTimeout((function(){return Mo(e)}),0))}(e),e._tryIR=!1):e._tryIR=!1}),0):e._tryIR=!1}),0))}Ao.prototype={isIdle:function(){return this._qC<this._parallels},lock:function(){this._qC++},unlock:function(){this._qC--,Mo(this)},wrapCall:function(e){var t,r=this;this.lock();try{t=e()}catch(e){throw this.unlock(),e}return t.then&&"function"==typeof t.then?t.then((function(e){return r.unlock(),e})).catch((function(e){throw r.unlock(),e})):(this.unlock(),t)},requestIdlePromise:function(e){var t,r=this;e=e||{};var n=new Promise((function(e){return t=e}));if(n._manRes=function(){No(r,n),t()},e.timeout){var i=setTimeout((function(){n._manRes()}),e.timeout);n._timeoutObj=i}return this._iC.add(n),Mo(this),n},cancelIdlePromise:function(e){No(this,e)},requestIdleCallback:function(e,t){var r=this._lHN++,n=this.requestIdlePromise(t);return this._hPM.set(r,n),this._pHM.set(n,r),n.then((function(){return e()})),r},cancelIdleCallback:function(e){var t=this._hPM.get(e);this.cancelIdlePromise(t)},clear:function(){var e=this;this._iC.forEach((function(t){return No(e,t)})),this._qC=0,this._iC.clear(),this._hPM=new Map,this._pHM=new Map}},Object.freeze({ignoreUnknown:!1,respectType:!1,respectFunctionNames:!1,respectFunctionProperties:!1,unorderedObjects:!0,unorderedArrays:!1,unorderedSets:!1,excludeKeys:void 0,excludeValues:void 0,replacer:void 0}),Object.freeze(["prototype","__proto__","constructor"]);class Lo{constructor(e,t){e=this.words=e||[],this.sigBytes=void 0===t?4*e.length:t}toString(e){return(e||Bo).stringify(this)}concat(e){if(this.clamp(),this.sigBytes%4)for(let t=0;t<e.sigBytes;t++){const r=e.words[t>>>2]>>>24-t%4*8&255;this.words[this.sigBytes+t>>>2]|=r<<24-(this.sigBytes+t)%4*8}else for(let t=0;t<e.sigBytes;t+=4)this.words[this.sigBytes+t>>>2]=e.words[t>>>2];return this.sigBytes+=e.sigBytes,this}clamp(){this.words[this.sigBytes>>>2]&=4294967295<<32-this.sigBytes%4*8,this.words.length=Math.ceil(this.sigBytes/4)}clone(){return new Lo([...this.words])}}const Bo={stringify(e){const t=[];for(let r=0;r<e.sigBytes;r++){const n=e.words[r>>>2]>>>24-r%4*8&255;t.push((n>>>4).toString(16),(15&n).toString(16))}return t.join("")}},Fo={parse(e){const t=e.length,r=[];for(let n=0;n<t;n++)r[n>>>2]|=(255&e.charCodeAt(n))<<24-n%4*8;return new Lo(r,t)}},qo=e=>Fo.parse(unescape(encodeURIComponent(e)));class Uo{constructor(){this._data=new Lo,this._nDataBytes=0,this._minBufferSize=0,this.blockSize=16}reset(){this._data=new Lo,this._nDataBytes=0}_append(e){"string"==typeof e&&(e=qo(e)),this._data.concat(e),this._nDataBytes+=e.sigBytes}_doProcessBlock(e,t){}_process(e){let t,r=this._data.sigBytes/(4*this.blockSize);r=e?Math.ceil(r):Math.max((0|r)-this._minBufferSize,0);const n=r*this.blockSize,i=Math.min(4*n,this._data.sigBytes);if(n){for(let e=0;e<n;e+=this.blockSize)this._doProcessBlock(this._data.words,e);t=this._data.words.splice(0,n),this._data.sigBytes-=i}return new Lo(t,i)}}class Ko extends Uo{update(e){return this._append(e),this._process(),this}finalize(e){e&&this._append(e)}}const Vo=[1779033703,-1150833019,1013904242,-1521486534,1359893119,-1694144372,528734635,1541459225],Ho=[1116352408,1899447441,-1245643825,-373957723,961987163,1508970993,-1841331548,-1424204075,-670586216,310598401,607225278,1426881987,1925078388,-2132889090,-1680079193,-1046744716,-459576895,-272742522,264347078,604807628,770255983,1249150122,1555081692,1996064986,-1740746414,-1473132947,-1341970488,-1084653625,-958395405,-710438585,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,-2117940946,-1838011259,-1564481375,-1474664885,-1035236496,-949202525,-778901479,-694614492,-200395387,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,-2067236844,-1933114872,-1866530822,-1538233109,-1090935817,-965641998],zo=[];class Wo extends Ko{constructor(){super(...arguments),this._hash=new Lo([...Vo])}reset(){super.reset(),this._hash=new Lo([...Vo])}_doProcessBlock(e,t){const r=this._hash.words;let n=r[0],i=r[1],o=r[2],s=r[3],a=r[4],c=r[5],u=r[6],l=r[7];for(let r=0;r<64;r++){if(r<16)zo[r]=0|e[t+r];else{const e=zo[r-15],t=(e<<25|e>>>7)^(e<<14|e>>>18)^e>>>3,n=zo[r-2],i=(n<<15|n>>>17)^(n<<13|n>>>19)^n>>>10;zo[r]=t+zo[r-7]+i+zo[r-16]}const h=n&i^n&o^i&o,d=(n<<30|n>>>2)^(n<<19|n>>>13)^(n<<10|n>>>22),f=l+((a<<26|a>>>6)^(a<<21|a>>>11)^(a<<7|a>>>25))+(a&c^~a&u)+Ho[r]+zo[r];l=u,u=c,c=a,a=s+f|0,s=o,o=i,i=n,n=f+(d+h)|0}r[0]=r[0]+n|0,r[1]=r[1]+i|0,r[2]=r[2]+o|0,r[3]=r[3]+s|0,r[4]=r[4]+a|0,r[5]=r[5]+c|0,r[6]=r[6]+u|0,r[7]=r[7]+l|0}finalize(e){super.finalize(e);const t=8*this._nDataBytes,r=8*this._data.sigBytes;return this._data.words[r>>>5]|=128<<24-r%32,this._data.words[14+(r+64>>>9<<4)]=Math.floor(t/4294967296),this._data.words[15+(r+64>>>9<<4)]=t,this._data.sigBytes=4*this._data.words.length,this._process(),this._hash}}var Qo="undefined"!=typeof crypto&&void 0!==crypto.subtle&&"function"==typeof crypto.subtle.digest?async function(e){var t=(new TextEncoder).encode(e),r=await crypto.subtle.digest("SHA-256",t),n=Array.prototype.map.call(new Uint8Array(r),(e=>("00"+e.toString(16)).slice(-2))).join("");return n}:function(e){return Promise.resolve((t=e,(new Wo).finalize(t).toString()));var t};class Go{ttl;map=new Map;_to=!1;constructor(e){this.ttl=e}has(e){return this.map.has(e)}add(e){this.map.set(e,Jo()),this._to||(this._to=!0,setTimeout((()=>{this._to=!1,function(e){const t=Jo()-e.ttl,r=e.map[Symbol.iterator]();for(;;){const n=r.next().value;if(!n)return;const i=n[0];if(!(n[1]<t))return;e.map.delete(i)}}(this)}),0))}clear(){this.map.clear()}}function Jo(){return Date.now()}var Yo=new Set,Xo=function(){function t(t,r,n,o,s,a,c=!1,u={},l,h,d,f){this.idleQueue=new Ao,this.rxdbVersion="15.0.0-beta.41",this.storageInstances=new Set,this._subs=[],this.startupErrors=[],this.onDestroy=[],this.destroyed=!1,this.collections={},this.eventBulks$=new ft,this.observable$=this.eventBulks$.pipe(Ze((e=>e.events))),this.storageToken=_t,this.storageTokenDocument=_t,this.emittedEventBulkIds=new Go(6e4),this.name=t,this.token=r,this.storage=n,this.instanceCreationOptions=o,this.password=s,this.multiInstance=a,this.eventReduce=c,this.options=u,this.internalStore=l,this.hashFunction=h,this.cleanupPolicy=d,this.allowSlowCount=f,"pseudoInstance"!==this.name&&(this.internalStore=Vt(this.asRxDatabase,l,go),this.storageTokenDocument=async function(t){var r=i(10),n=t.password?await t.hashFunction(JSON.stringify(t.password)):void 0,o={id:Eo,context:vo,key:_o,data:{rxdbVersion:t.rxdbVersion,token:r,instanceToken:t.token,passwordHash:n},_deleted:!1,_meta:z(),_rev:"",_attachments:{}},s=await t.internalStore.bulkWrite([{document:o}],"internal-add-storage-token");if(s.success[0])return s.success[0];var a,c,u=e(s.error[0]);if(u.isError&&T(u)){var l=u;if(a=l.documentInDb.data.rxdbVersion,c=t.rxdbVersion,!a||c.includes("beta")&&c!==a||a.split(".")[0]!==c.split(".")[0])throw I("DM5",{args:{databaseStateVersion:l.documentInDb.data.rxdbVersion,codeVersion:t.rxdbVersion}});if(n&&n!==l.documentInDb.data.passwordHash)throw I("DB1",{passwordHash:n,existingPasswordHash:l.documentInDb.data.passwordHash});return e(l.documentInDb)}throw u}(this.asRxDatabase).catch((e=>this.startupErrors.push(e))),this.storageToken=this.storageTokenDocument.then((e=>e.data.token)).catch((e=>this.startupErrors.push(e))))}var r=t.prototype;return r.$emit=function(e){this.emittedEventBulkIds.has(e.id)||(this.emittedEventBulkIds.add(e.id),this.eventBulks$.next(e))},r.removeCollectionDoc=async function(e,t){var r=await Mt(this.internalStore,bo(Co(e,t),yo));if(!r)throw I("SNH",{name:e,schema:t});var n=Kt(r);n._deleted=!0,await this.internalStore.bulkWrite([{document:n,previous:r}],"rx-database-remove-collection")},r.addCollections=async function(t){var r={},n={},i=[],o={};await Promise.all(Object.entries(t).map((async([e,t])=>{var s=e,a=t.schema;r[s]=a;var c=function(e,t,r=!0){r&&M("preCreateRxSchema",e);var n=Y(e);n=function(e){return m(e,!0)}(n),P.deepFreezeWhenDevMode(n);var i=new ee(n,t);return M("createRxSchema",i),i}(a,this.hashFunction);if(n[s]=c,this.collections[e])throw I("DB3",{name:e});var u=Co(e,a),l={id:bo(u,yo),key:u,context:yo,data:{name:s,schemaHash:await c.hash,schema:c.jsonSchema,version:c.version,connectedStorages:[]},_deleted:!1,_meta:z(),_rev:"",_attachments:{}};i.push({document:l});var h=Object.assign({},t,{name:s,schema:c,database:this}),d=p(t);d.database=this,d.name=e,M("preCreateRxCollection",d),h.conflictHandler=d.conflictHandler,o[s]=h})));var s=await this.internalStore.bulkWrite(i,"rx-database-add-collection");await async function(e){if(await e.storageToken,e.startupErrors[0])throw e.startupErrors[0]}(this),await Promise.all(s.error.map((async t=>{if(409!==t.status)throw I("DB12",{database:this.name,writeError:t});var i=e(t.documentInDb),o=i.data.name,s=n[o];if(i.data.schemaHash!==await s.hash)throw I("DB6",{database:this.name,collection:o,previousSchemaHash:i.data.schemaHash,schemaHash:await s.hash,previousSchema:i.data.schema,schema:e(r[o])})})));var a={};return await Promise.all(Object.keys(t).map((async e=>{var t=o[e],r=await function({database:e,name:t,schema:r,instanceCreationOptions:n={},migrationStrategies:i={},autoMigrate:o=!0,statics:s={},methods:a={},attachments:c={},options:u={},localDocuments:l=!1,cacheReplacementPolicy:h=io,conflictHandler:d=$o}){var f={databaseInstanceToken:e.token,databaseName:e.name,collectionName:t,schema:r.jsonSchema,options:n,multiInstance:e.multiInstance,password:e.password,devMode:P.isDevMode()};return M("preCreateRxStorageInstance",f),async function(e,t){return t.multiInstance=e.multiInstance,await e.storage.createStorageInstance(t)}(e,f).then((f=>{var p=new To(e,t,r,f,n,i,a,c,u,h,s,d);return p.prepare().then((()=>{Object.entries(s).forEach((([e,t])=>{Object.defineProperty(p,e,{get:()=>t.bind(p)})}));var e=St;return o&&0!==p.schema.version&&(e=p.migratePromise()),e})).then((()=>(M("createRxCollection",{collection:p,creator:{name:t,schema:r,storageInstance:f,instanceCreationOptions:n,migrationStrategies:i,methods:a,attachments:c,options:u,cacheReplacementPolicy:h,localDocuments:l,statics:s}}),p))).catch((e=>f.close().then((()=>Promise.reject(e)))))}))}(t);a[e]=r,this.collections[e]=r,this[e]||Object.defineProperty(this,e,{get:()=>this.collections[e]})}))),a},r.lockedRun=function(e){return this.idleQueue.wrapCall(e)},r.requestIdlePromise=function(){return this.idleQueue.requestIdlePromise()},r.exportJSON=function(e){throw Pt("json-dump")},r.importJSON=function(e){throw Pt("json-dump")},r.backup=function(e){throw Pt("backup")},r.leaderElector=function(){throw Pt("leader-election")},r.isLeader=function(){throw Pt("leader-election")},r.waitForLeadership=function(){throw Pt("leader-election")},r.migrationStates=function(){throw Pt("migration")},r.destroy=async function(){return this.destroyed?_t:(this.destroyed=!0,await L("preDestroyRxDatabase",this),this.eventBulks$.complete(),this._subs.map((e=>e.unsubscribe())),"pseudoInstance"===this.name?_t:this.requestIdlePromise().then((()=>Promise.all(this.onDestroy.map((e=>e()))))).then((()=>Promise.all(Object.keys(this.collections).map((e=>this.collections[e])).map((e=>e.destroy()))))).then((()=>this.internalStore.close())).then((()=>Yo.delete(this.name))).then((()=>!0)))},r.remove=function(){return this.destroy().then((()=>async function(e,t,r){var n=i(10),o=await Zo(n,t,e,{},!1,r),s=await wo(t.statics,o),a=new Set;s.forEach((e=>a.add(e.data.name)));var c=Array.from(a);return await Promise.all(c.map((i=>xo(t,o,n,e,i,r)))),await L("postRemoveRxDatabase",{databaseName:e,storage:t}),await o.remove(),c}(this.name,this.storage,this.password)))},l(t,[{key:"$",get:function(){return this.observable$}},{key:"asRxDatabase",get:function(){return this}}]),t}();async function Zo(e,t,r,n,i,o){return await t.createStorageInstance({databaseInstanceToken:e,databaseName:r,collectionName:Nt,schema:go,options:n,multiInstance:i,password:o,devMode:P.isDevMode()})}function es({storage:e,instanceCreationOptions:t,name:r,password:n,multiInstance:o=!0,eventReduce:s=!0,ignoreDuplicate:a=!1,options:c={},cleanupPolicy:u,allowSlowCount:l=!1,localDocuments:h=!1,hashFunction:d=Qo}){M("preCreateRxDatabase",{storage:e,instanceCreationOptions:t,name:r,password:n,multiInstance:o,eventReduce:s,ignoreDuplicate:a,options:c,localDocuments:h}),a||function(e){if(Yo.has(e))throw I("DB8",{name:e,link:"https://pubkey.github.io/rxdb/rx-database.html#ignoreduplicate"})}(r),Yo.add(r);var f=i(10);return Zo(f,e,r,t,o,n).catch((e=>{throw Yo.delete(r),e})).then((i=>{var p=new Xo(r,f,e,t,n,o,s,c,i,d,u,l);return L("createRxDatabase",{database:p,creator:{storage:e,instanceCreationOptions:t,name:r,password:n,multiInstance:o,eventReduce:s,ignoreDuplicate:a,options:c,localDocuments:h}}).then((()=>p))}))}var ts={RxSchema:ee.prototype,RxDocument:Qt,RxQuery:ho.prototype,RxCollection:To.prototype,RxDatabase:Xo.prototype},rs=new Set,ns=new Set;function is(e){if(M("preAddRxPlugin",{plugin:e,plugins:rs}),!rs.has(e)){if(ns.has(e.name))throw I("PL3",{name:e.name,plugin:e});if(rs.add(e),ns.add(e.name),!e.rxdb)throw j("PL1",{plugin:e});e.init&&e.init(),e.prototypes&&Object.entries(e.prototypes).forEach((([e,t])=>t(ts[e]))),e.overwritable&&Object.assign(P,e.overwritable),e.hooks&&Object.entries(e.hooks).forEach((([e,t])=>{t.after&&N[e].push(t.after),t.before&&N[e].unshift(t.before)}))}}const os="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:global,ss=Object.keys,as=Array.isArray;function cs(e,t){return"object"!=typeof t||ss(t).forEach((function(r){e[r]=t[r]})),e}"undefined"==typeof Promise||os.Promise||(os.Promise=Promise);const us=Object.getPrototypeOf,ls={}.hasOwnProperty;function hs(e,t){return ls.call(e,t)}function ds(e,t){"function"==typeof t&&(t=t(us(e))),("undefined"==typeof Reflect?ss:Reflect.ownKeys)(t).forEach((r=>{ps(e,r,t[r])}))}const fs=Object.defineProperty;function ps(e,t,r,n){fs(e,t,cs(r&&hs(r,"get")&&"function"==typeof r.get?{get:r.get,set:r.set,configurable:!0}:{value:r,configurable:!0,writable:!0},n))}function ms(e){return{from:function(t){return e.prototype=Object.create(t.prototype),ps(e.prototype,"constructor",e),{extend:ds.bind(null,e.prototype)}}}}const ys=Object.getOwnPropertyDescriptor;function vs(e,t){let r;return ys(e,t)||(r=us(e))&&vs(r,t)}const gs=[].slice;function bs(e,t,r){return gs.call(e,t,r)}function ws(e,t){return t(e)}function _s(e){if(!e)throw new Error("Assertion Failed")}function Es(e){os.setImmediate?setImmediate(e):setTimeout(e,0)}function Ss(e,t){return e.reduce(((e,r,n)=>{var i=t(r,n);return i&&(e[i[0]]=i[1]),e}),{})}function Cs(e,t){if(hs(e,t))return e[t];if(!t)return e;if("string"!=typeof t){for(var r=[],n=0,i=t.length;n<i;++n){var o=Cs(e,t[n]);r.push(o)}return r}var s=t.indexOf(".");if(-1!==s){var a=e[t.substr(0,s)];return void 0===a?void 0:Cs(a,t.substr(s+1))}}function ks(e,t,r){if(e&&void 0!==t&&(!("isFrozen"in Object)||!Object.isFrozen(e)))if("string"!=typeof t&&"length"in t){_s("string"!=typeof r&&"length"in r);for(var n=0,i=t.length;n<i;++n)ks(e,t[n],r[n])}else{var o=t.indexOf(".");if(-1!==o){var s=t.substr(0,o),a=t.substr(o+1);if(""===a)void 0===r?as(e)&&!isNaN(parseInt(s))?e.splice(s,1):delete e[s]:e[s]=r;else{var c=e[s];c&&hs(e,s)||(c=e[s]={}),ks(c,a,r)}}else void 0===r?as(e)&&!isNaN(parseInt(t))?e.splice(t,1):delete e[t]:e[t]=r}}function xs(e){var t={};for(var r in e)hs(e,r)&&(t[r]=e[r]);return t}const Os=[].concat;function Ps(e){return Os.apply([],e)}const Rs="Boolean,String,Date,RegExp,Blob,File,FileList,FileSystemFileHandle,FileSystemDirectoryHandle,ArrayBuffer,DataView,Uint8ClampedArray,ImageBitmap,ImageData,Map,Set,CryptoKey".split(",").concat(Ps([8,16,32,64].map((e=>["Int","Uint","Float"].map((t=>t+e+"Array")))))).filter((e=>os[e])),$s=Rs.map((e=>os[e]));Ss(Rs,(e=>[e,!0]));let Ds=null;function Is(e){Ds="undefined"!=typeof WeakMap&&new WeakMap;const t=js(e);return Ds=null,t}function js(e){if(!e||"object"!=typeof e)return e;let t=Ds&&Ds.get(e);if(t)return t;if(as(e)){t=[],Ds&&Ds.set(e,t);for(var r=0,n=e.length;r<n;++r)t.push(js(e[r]))}else if($s.indexOf(e.constructor)>=0)t=e;else{const r=us(e);for(var i in t=r===Object.prototype?{}:Object.create(r),Ds&&Ds.set(e,t),e)hs(e,i)&&(t[i]=js(e[i]))}return t}const{toString:Ts}={};function As(e){return Ts.call(e).slice(8,-1)}const Ns="undefined"!=typeof Symbol?Symbol.iterator:"@@iterator",Ms="symbol"==typeof Ns?function(e){var t;return null!=e&&(t=e[Ns])&&t.apply(e)}:function(){return null},Ls={};function Bs(e){var t,r,n,i;if(1===arguments.length){if(as(e))return e.slice();if(this===Ls&&"string"==typeof e)return[e];if(i=Ms(e)){for(r=[];!(n=i.next()).done;)r.push(n.value);return r}if(null==e)return[e];if("number"==typeof(t=e.length)){for(r=new Array(t);t--;)r[t]=e[t];return r}return[e]}for(t=arguments.length,r=new Array(t);t--;)r[t]=arguments[t];return r}const Fs="undefined"!=typeof Symbol?e=>"AsyncFunction"===e[Symbol.toStringTag]:()=>!1;var qs="undefined"!=typeof location&&/^(http|https):\/\/(localhost|127\.0\.0\.1)/.test(location.href);function Us(e,t){qs=e,Ks=t}var Ks=()=>!0;const Vs=!new Error("").stack;function Hs(){if(Vs)try{throw Hs.arguments,new Error}catch(e){return e}return new Error}function zs(e,t){var r=e.stack;return r?(t=t||0,0===r.indexOf(e.name)&&(t+=(e.name+e.message).split("\n").length),r.split("\n").slice(t).filter(Ks).map((e=>"\n"+e)).join("")):""}var Ws=["Unknown","Constraint","Data","TransactionInactive","ReadOnly","Version","NotFound","InvalidState","InvalidAccess","Abort","Timeout","QuotaExceeded","Syntax","DataClone"],Qs=["Modify","Bulk","OpenFailed","VersionChange","Schema","Upgrade","InvalidTable","MissingAPI","NoSuchDatabase","InvalidArgument","SubTransaction","Unsupported","Internal","DatabaseClosed","PrematureCommit","ForeignAwait"].concat(Ws),Gs={VersionChanged:"Database version changed by other database connection",DatabaseClosed:"Database has been closed",Abort:"Transaction aborted",TransactionInactive:"Transaction has already completed or failed",MissingAPI:"IndexedDB API missing. Please visit https://tinyurl.com/y2uuvskb"};function Js(e,t){this._e=Hs(),this.name=e,this.message=t}function Ys(e,t){return e+". Errors: "+Object.keys(t).map((e=>t[e].toString())).filter(((e,t,r)=>r.indexOf(e)===t)).join("\n")}function Xs(e,t,r,n){this._e=Hs(),this.failures=t,this.failedKeys=n,this.successCount=r,this.message=Ys(e,t)}function Zs(e,t){this._e=Hs(),this.name="BulkError",this.failures=Object.keys(t).map((e=>t[e])),this.failuresByPos=t,this.message=Ys(e,t)}ms(Js).from(Error).extend({stack:{get:function(){return this._stack||(this._stack=this.name+": "+this.message+zs(this._e,2))}},toString:function(){return this.name+": "+this.message}}),ms(Xs).from(Js),ms(Zs).from(Js);var ea=Qs.reduce(((e,t)=>(e[t]=t+"Error",e)),{});const ta=Js;var ra=Qs.reduce(((e,t)=>{var r=t+"Error";function n(e,n){this._e=Hs(),this.name=r,e?"string"==typeof e?(this.message=`${e}${n?"\n "+n:""}`,this.inner=n||null):"object"==typeof e&&(this.message=`${e.name} ${e.message}`,this.inner=e):(this.message=Gs[t]||r,this.inner=null)}return ms(n).from(ta),e[t]=n,e}),{});ra.Syntax=SyntaxError,ra.Type=TypeError,ra.Range=RangeError;var na=Ws.reduce(((e,t)=>(e[t+"Error"]=ra[t],e)),{}),ia=Qs.reduce(((e,t)=>(-1===["Syntax","Type","Range"].indexOf(t)&&(e[t+"Error"]=ra[t]),e)),{});function oa(){}function sa(e){return e}function aa(e,t){return null==e||e===sa?t:function(r){return t(e(r))}}function ca(e,t){return function(){e.apply(this,arguments),t.apply(this,arguments)}}function ua(e,t){return e===oa?t:function(){var r=e.apply(this,arguments);void 0!==r&&(arguments[0]=r);var n=this.onsuccess,i=this.onerror;this.onsuccess=null,this.onerror=null;var o=t.apply(this,arguments);return n&&(this.onsuccess=this.onsuccess?ca(n,this.onsuccess):n),i&&(this.onerror=this.onerror?ca(i,this.onerror):i),void 0!==o?o:r}}function la(e,t){return e===oa?t:function(){e.apply(this,arguments);var r=this.onsuccess,n=this.onerror;this.onsuccess=this.onerror=null,t.apply(this,arguments),r&&(this.onsuccess=this.onsuccess?ca(r,this.onsuccess):r),n&&(this.onerror=this.onerror?ca(n,this.onerror):n)}}function ha(e,t){return e===oa?t:function(r){var n=e.apply(this,arguments);cs(r,n);var i=this.onsuccess,o=this.onerror;this.onsuccess=null,this.onerror=null;var s=t.apply(this,arguments);return i&&(this.onsuccess=this.onsuccess?ca(i,this.onsuccess):i),o&&(this.onerror=this.onerror?ca(o,this.onerror):o),void 0===n?void 0===s?void 0:s:cs(n,s)}}function da(e,t){return e===oa?t:function(){return!1!==t.apply(this,arguments)&&e.apply(this,arguments)}}function fa(e,t){return e===oa?t:function(){var r=e.apply(this,arguments);if(r&&"function"==typeof r.then){for(var n=this,i=arguments.length,o=new Array(i);i--;)o[i]=arguments[i];return r.then((function(){return t.apply(n,o)}))}return t.apply(this,arguments)}}ia.ModifyError=Xs,ia.DexieError=Js,ia.BulkError=Zs;var pa={};const[ma,ya,va]="undefined"==typeof Promise?[]:(()=>{let e=Promise.resolve();if("undefined"==typeof crypto||!crypto.subtle)return[e,us(e),e];const t=crypto.subtle.digest("SHA-512",new Uint8Array([0]));return[t,us(t),e]})(),ga=ya&&ya.then,ba=ma&&ma.constructor,wa=!!va;var _a=!1,Ea=va?()=>{va.then(Ha)}:os.setImmediate?setImmediate.bind(null,Ha):os.MutationObserver?()=>{var e=document.createElement("div");new MutationObserver((()=>{Ha(),e=null})).observe(e,{attributes:!0}),e.setAttribute("i","1")}:()=>{setTimeout(Ha,0)},Sa=function(e,t){Ia.push([e,t]),ka&&(Ea(),ka=!1)},Ca=!0,ka=!0,xa=[],Oa=[],Pa=null,Ra=sa,$a={id:"global",global:!0,ref:0,unhandleds:[],onunhandled:mc,pgp:!1,env:{},finalize:function(){this.unhandleds.forEach((e=>{try{mc(e[0],e[1])}catch(e){}}))}},Da=$a,Ia=[],ja=0,Ta=[];function Aa(e){if("object"!=typeof this)throw new TypeError("Promises must be constructed via new");this._listeners=[],this.onuncatched=oa,this._lib=!1;var t=this._PSD=Da;if(qs&&(this._stackHolder=Hs(),this._prev=null,this._numPrev=0),"function"!=typeof e){if(e!==pa)throw new TypeError("Not a function");return this._state=arguments[1],this._value=arguments[2],void(!1===this._state&&Ba(this,this._value))}this._state=null,this._value=null,++t.ref,La(this,e)}const Na={get:function(){var e=Da,t=tc;function r(r,n){var i=!e.global&&(e!==Da||t!==tc);const o=i&&!oc();var s=new Aa(((t,s)=>{qa(this,new Ma(fc(r,e,i,o),fc(n,e,i,o),t,s,e))}));return qs&&Va(s,this),s}return r.prototype=pa,r},set:function(e){ps(this,"then",e&&e.prototype===pa?Na:{get:function(){return e},set:Na.set})}};function Ma(e,t,r,n,i){this.onFulfilled="function"==typeof e?e:null,this.onRejected="function"==typeof t?t:null,this.resolve=r,this.reject=n,this.psd=i}function La(e,t){try{t((t=>{if(null===e._state){if(t===e)throw new TypeError("A promise cannot be resolved with itself.");var r=e._lib&&za();t&&"function"==typeof t.then?La(e,((e,r)=>{t instanceof Aa?t._then(e,r):t.then(e,r)})):(e._state=!0,e._value=t,Fa(e)),r&&Wa()}}),Ba.bind(null,e))}catch(t){Ba(e,t)}}function Ba(e,t){if(Oa.push(t),null===e._state){var r=e._lib&&za();t=Ra(t),e._state=!1,e._value=t,qs&&null!==t&&"object"==typeof t&&!t._promise&&function(e,t,r){try{e.apply(null,void 0)}catch(e){}}((()=>{var r=vs(t,"stack");t._promise=e,ps(t,"stack",{get:()=>_a?r&&(r.get?r.get.apply(t):r.value):e.stack})})),function(e){xa.some((t=>t._value===e._value))||xa.push(e)}(e),Fa(e),r&&Wa()}}function Fa(e){var t=e._listeners;e._listeners=[];for(var r=0,n=t.length;r<n;++r)qa(e,t[r]);var i=e._PSD;--i.ref||i.finalize(),0===ja&&(++ja,Sa((()=>{0==--ja&&Qa()}),[]))}function qa(e,t){if(null!==e._state){var r=e._state?t.onFulfilled:t.onRejected;if(null===r)return(e._state?t.resolve:t.reject)(e._value);++t.psd.ref,++ja,Sa(Ua,[r,e,t])}else e._listeners.push(t)}function Ua(e,t,r){try{Pa=t;var n,i=t._value;t._state?n=e(i):(Oa.length&&(Oa=[]),n=e(i),-1===Oa.indexOf(i)&&function(e){for(var t=xa.length;t;)if(xa[--t]._value===e._value)return void xa.splice(t,1)}(t)),r.resolve(n)}catch(e){r.reject(e)}finally{Pa=null,0==--ja&&Qa(),--r.psd.ref||r.psd.finalize()}}function Ka(e,t,r){if(t.length===r)return t;var n="";if(!1===e._state){var i,o,s=e._value;null!=s?(i=s.name||"Error",o=s.message||s,n=zs(s,0)):(i=s,o=""),t.push(i+(o?": "+o:"")+n)}return qs&&((n=zs(e._stackHolder,2))&&-1===t.indexOf(n)&&t.push(n),e._prev&&Ka(e._prev,t,r)),t}function Va(e,t){var r=t?t._numPrev+1:0;r<100&&(e._prev=t,e._numPrev=r)}function Ha(){za()&&Wa()}function za(){var e=Ca;return Ca=!1,ka=!1,e}function Wa(){var e,t,r;do{for(;Ia.length>0;)for(e=Ia,Ia=[],r=e.length,t=0;t<r;++t){var n=e[t];n[0].apply(null,n[1])}}while(Ia.length>0);Ca=!0,ka=!0}function Qa(){var e=xa;xa=[],e.forEach((e=>{e._PSD.onunhandled.call(null,e._value,e)}));for(var t=Ta.slice(0),r=t.length;r;)t[--r]()}function Ga(e){return new Aa(pa,!1,e)}function Ja(e,t){var r=Da;return function(){var n=za(),i=Da;try{return uc(r,!0),e.apply(this,arguments)}catch(e){t&&t(e)}finally{uc(i,!1),n&&Wa()}}}ds(Aa.prototype,{then:Na,_then:function(e,t){qa(this,new Ma(null,null,e,t,Da))},catch:function(e){if(1===arguments.length)return this.then(null,e);var t=arguments[0],r=arguments[1];return"function"==typeof t?this.then(null,(e=>e instanceof t?r(e):Ga(e))):this.then(null,(e=>e&&e.name===t?r(e):Ga(e)))},finally:function(e){return this.then((t=>(e(),t)),(t=>(e(),Ga(t))))},stack:{get:function(){if(this._stack)return this._stack;try{_a=!0;var e=Ka(this,[],20).join("\nFrom previous: ");return null!==this._state&&(this._stack=e),e}finally{_a=!1}}},timeout:function(e,t){return e<1/0?new Aa(((r,n)=>{var i=setTimeout((()=>n(new ra.Timeout(t))),e);this.then(r,n).finally(clearTimeout.bind(null,i))})):this}}),"undefined"!=typeof Symbol&&Symbol.toStringTag&&ps(Aa.prototype,Symbol.toStringTag,"Dexie.Promise"),$a.env=lc(),ds(Aa,{all:function(){var e=Bs.apply(null,arguments).map(sc);return new Aa((function(t,r){0===e.length&&t([]);var n=e.length;e.forEach(((i,o)=>Aa.resolve(i).then((r=>{e[o]=r,--n||t(e)}),r)))}))},resolve:e=>{if(e instanceof Aa)return e;if(e&&"function"==typeof e.then)return new Aa(((t,r)=>{e.then(t,r)}));var t=new Aa(pa,!0,e);return Va(t,Pa),t},reject:Ga,race:function(){var e=Bs.apply(null,arguments).map(sc);return new Aa(((t,r)=>{e.map((e=>Aa.resolve(e).then(t,r)))}))},PSD:{get:()=>Da,set:e=>Da=e},totalEchoes:{get:()=>tc},newPSD:nc,usePSD:hc,scheduler:{get:()=>Sa,set:e=>{Sa=e}},rejectionMapper:{get:()=>Ra,set:e=>{Ra=e}},follow:(e,t)=>new Aa(((r,n)=>nc(((t,r)=>{var n=Da;n.unhandleds=[],n.onunhandled=r,n.finalize=ca((function(){!function(e){Ta.push((function t(){e(),Ta.splice(Ta.indexOf(t),1)})),++ja,Sa((()=>{0==--ja&&Qa()}),[])}((()=>{0===this.unhandleds.length?t():r(this.unhandleds[0])}))}),n.finalize),e()}),t,r,n)))}),ba&&(ba.allSettled&&ps(Aa,"allSettled",(function(){const e=Bs.apply(null,arguments).map(sc);return new Aa((t=>{0===e.length&&t([]);let r=e.length;const n=new Array(r);e.forEach(((e,i)=>Aa.resolve(e).then((e=>n[i]={status:"fulfilled",value:e}),(e=>n[i]={status:"rejected",reason:e})).then((()=>--r||t(n)))))}))})),ba.any&&"undefined"!=typeof AggregateError&&ps(Aa,"any",(function(){const e=Bs.apply(null,arguments).map(sc);return new Aa(((t,r)=>{0===e.length&&r(new AggregateError([]));let n=e.length;const i=new Array(n);e.forEach(((e,o)=>Aa.resolve(e).then((e=>t(e)),(e=>{i[o]=e,--n||r(new AggregateError(i))}))))}))})));const Ya={awaits:0,echoes:0,id:0};var Xa=0,Za=[],ec=0,tc=0,rc=0;function nc(e,t,r,n){var i=Da,o=Object.create(i);o.parent=i,o.ref=0,o.global=!1,o.id=++rc;var s=$a.env;o.env=wa?{Promise:Aa,PromiseProp:{value:Aa,configurable:!0,writable:!0},all:Aa.all,race:Aa.race,allSettled:Aa.allSettled,any:Aa.any,resolve:Aa.resolve,reject:Aa.reject,nthen:pc(s.nthen,o),gthen:pc(s.gthen,o)}:{},t&&cs(o,t),++i.ref,o.finalize=function(){--this.parent.ref||this.parent.finalize()};var a=hc(o,e,r,n);return 0===o.ref&&o.finalize(),a}function ic(){return Ya.id||(Ya.id=++Xa),++Ya.awaits,Ya.echoes+=100,Ya.id}function oc(){return!!Ya.awaits&&(0==--Ya.awaits&&(Ya.id=0),Ya.echoes=100*Ya.awaits,!0)}function sc(e){return Ya.echoes&&e&&e.constructor===ba?(ic(),e.then((e=>(oc(),e)),(e=>(oc(),yc(e))))):e}function ac(e){++tc,Ya.echoes&&0!=--Ya.echoes||(Ya.echoes=Ya.id=0),Za.push(Da),uc(e,!0)}function cc(){var e=Za[Za.length-1];Za.pop(),uc(e,!1)}function uc(e,t){var r=Da;if((t?!Ya.echoes||ec++&&e===Da:!ec||--ec&&e===Da)||dc(t?ac.bind(null,e):cc),e!==Da&&(Da=e,r===$a&&($a.env=lc()),wa)){var n=$a.env.Promise,i=e.env;ya.then=i.nthen,n.prototype.then=i.gthen,(r.global||e.global)&&(Object.defineProperty(os,"Promise",i.PromiseProp),n.all=i.all,n.race=i.race,n.resolve=i.resolve,n.reject=i.reject,i.allSettled&&(n.allSettled=i.allSettled),i.any&&(n.any=i.any))}}function lc(){var e=os.Promise;return wa?{Promise:e,PromiseProp:Object.getOwnPropertyDescriptor(os,"Promise"),all:e.all,race:e.race,allSettled:e.allSettled,any:e.any,resolve:e.resolve,reject:e.reject,nthen:ya.then,gthen:e.prototype.then}:{}}function hc(e,t,r,n,i){var o=Da;try{return uc(e,!0),t(r,n,i)}finally{uc(o,!1)}}function dc(e){ga.call(ma,e)}function fc(e,t,r,n){return"function"!=typeof e?e:function(){var i=Da;r&&ic(),uc(t,!0);try{return e.apply(this,arguments)}finally{uc(i,!1),n&&dc(oc)}}}function pc(e,t){return function(r,n){return e.call(this,fc(r,t),fc(n,t))}}function mc(e,t){var r;try{r=t.onuncatched(e)}catch(e){}if(!1!==r)try{var n,i={promise:t,reason:e};if(os.document&&document.createEvent?((n=document.createEvent("Event")).initEvent("unhandledrejection",!0,!0),cs(n,i)):os.CustomEvent&&cs(n=new CustomEvent("unhandledrejection",{detail:i}),i),n&&os.dispatchEvent&&(dispatchEvent(n),!os.PromiseRejectionEvent&&os.onunhandledrejection))try{os.onunhandledrejection(n)}catch(e){}qs&&n&&!n.defaultPrevented&&console.warn(`Unhandled rejection: ${e.stack||e}`)}catch(e){}}-1===(""+ga).indexOf("[native code]")&&(ic=oc=oa);var yc=Aa.reject;function vc(e,t,r,n){if(e.idbdb&&(e._state.openComplete||Da.letThrough||e._vip)){var i=e._createTransaction(t,r,e._dbSchema);try{i.create(),e._state.PR1398_maxLoop=3}catch(i){return i.name===ea.InvalidState&&e.isOpen()&&--e._state.PR1398_maxLoop>0?(console.warn("Dexie: Need to reopen db"),e._close(),e.open().then((()=>vc(e,t,r,n)))):yc(i)}return i._promise(t,((e,t)=>nc((()=>(Da.trans=i,n(e,t,i)))))).then((e=>i._completion.then((()=>e))))}if(e._state.openComplete)return yc(new ra.DatabaseClosed(e._state.dbOpenError));if(!e._state.isBeingOpened){if(!e._options.autoOpen)return yc(new ra.DatabaseClosed);e.open().catch(oa)}return e._state.dbReadyPromise.then((()=>vc(e,t,r,n)))}const gc=String.fromCharCode(65535),bc="Invalid key provided. Keys must be of type string, number, Date or Array<string | number | Date>.",wc=[],_c="undefined"!=typeof navigator&&/(MSIE|Trident|Edge)/.test(navigator.userAgent),Ec=_c,Sc=_c,Cc=e=>!/(dexie\.js|dexie\.min\.js)/.test(e);function kc(e,t){return e?t?function(){return e.apply(this,arguments)&&t.apply(this,arguments)}:e:t}const xc={type:3,lower:-1/0,lowerOpen:!1,upper:[[]],upperOpen:!1};function Oc(e){return"string"!=typeof e||/\./.test(e)?e=>e:t=>(void 0===t[e]&&e in t&&delete(t=Is(t))[e],t)}function Pc(){throw ra.Type()}class Rc{_trans(e,t,r){const n=this._tx||Da.trans,i=this.name;function o(e,r,n){if(!n.schema[i])throw new ra.NotFound("Table "+i+" not part of transaction");return t(n.idbtrans,n)}const s=za();try{return n&&n.db===this.db?n===Da.trans?n._promise(e,o,r):nc((()=>n._promise(e,o,r)),{trans:n,transless:Da.transless||Da}):vc(this.db,e,[this.name],o)}finally{s&&Wa()}}get(e,t){return e&&e.constructor===Object?this.where(e).first(t):this._trans("readonly",(t=>this.core.get({trans:t,key:e}).then((e=>this.hook.reading.fire(e))))).then(t)}where(e){if("string"==typeof e)return new this.db.WhereClause(this,e);if(as(e))return new this.db.WhereClause(this,`[${e.join("+")}]`);const t=ss(e);if(1===t.length)return this.where(t[0]).equals(e[t[0]]);const r=this.schema.indexes.concat(this.schema.primKey).filter((e=>e.compound&&t.every((t=>e.keyPath.indexOf(t)>=0))&&e.keyPath.every((e=>t.indexOf(e)>=0))))[0];if(r&&this.db._maxKey!==gc)return this.where(r.name).equals(r.keyPath.map((t=>e[t])));!r&&qs&&console.warn(`The query ${JSON.stringify(e)} on ${this.name} would benefit of a compound index [${t.join("+")}]`);const{idxByName:n}=this.schema,i=this.db._deps.indexedDB;function o(e,t){try{return 0===i.cmp(e,t)}catch(e){return!1}}const[s,a]=t.reduce((([t,r],i)=>{const s=n[i],a=e[i];return[t||s,t||!s?kc(r,s&&s.multi?e=>{const t=Cs(e,i);return as(t)&&t.some((e=>o(a,e)))}:e=>o(a,Cs(e,i))):r]}),[null,null]);return s?this.where(s.name).equals(e[s.keyPath]).filter(a):r?this.filter(a):this.where(t).equals("")}filter(e){return this.toCollection().and(e)}count(e){return this.toCollection().count(e)}offset(e){return this.toCollection().offset(e)}limit(e){return this.toCollection().limit(e)}each(e){return this.toCollection().each(e)}toArray(e){return this.toCollection().toArray(e)}toCollection(){return new this.db.Collection(new this.db.WhereClause(this))}orderBy(e){return new this.db.Collection(new this.db.WhereClause(this,as(e)?`[${e.join("+")}]`:e))}reverse(){return this.toCollection().reverse()}mapToClass(e){const{db:t,name:r}=this;this.schema.mappedClass=e,e.prototype instanceof Pc&&(e=class extends e{get db(){return t}table(){return r}});const n=new Set;for(let t=e.prototype;t;t=us(t))Object.getOwnPropertyNames(t).forEach((e=>n.add(e)));const i=t=>{if(!t)return t;const r=Object.create(e.prototype);for(let e in t)if(!n.has(e))try{r[e]=t[e]}catch(e){}return r};return this.schema.readHook&&this.hook.reading.unsubscribe(this.schema.readHook),this.schema.readHook=i,this.hook("reading",i),e}defineClass(){return this.mapToClass((function(e){cs(this,e)}))}add(e,t){const{auto:r,keyPath:n}=this.schema.primKey;let i=e;return n&&r&&(i=Oc(n)(e)),this._trans("readwrite",(e=>this.core.mutate({trans:e,type:"add",keys:null!=t?[t]:null,values:[i]}))).then((e=>e.numFailures?Aa.reject(e.failures[0]):e.lastResult)).then((t=>{if(n)try{ks(e,n,t)}catch(e){}return t}))}update(e,t){if("object"!=typeof e||as(e))return this.where(":id").equals(e).modify(t);{const r=Cs(e,this.schema.primKey.keyPath);if(void 0===r)return yc(new ra.InvalidArgument("Given object does not contain its primary key"));try{"function"!=typeof t?ss(t).forEach((r=>{ks(e,r,t[r])})):t(e,{value:e,primKey:r})}catch(e){}return this.where(":id").equals(r).modify(t)}}put(e,t){const{auto:r,keyPath:n}=this.schema.primKey;let i=e;return n&&r&&(i=Oc(n)(e)),this._trans("readwrite",(e=>this.core.mutate({trans:e,type:"put",values:[i],keys:null!=t?[t]:null}))).then((e=>e.numFailures?Aa.reject(e.failures[0]):e.lastResult)).then((t=>{if(n)try{ks(e,n,t)}catch(e){}return t}))}delete(e){return this._trans("readwrite",(t=>this.core.mutate({trans:t,type:"delete",keys:[e]}))).then((e=>e.numFailures?Aa.reject(e.failures[0]):void 0))}clear(){return this._trans("readwrite",(e=>this.core.mutate({trans:e,type:"deleteRange",range:xc}))).then((e=>e.numFailures?Aa.reject(e.failures[0]):void 0))}bulkGet(e){return this._trans("readonly",(t=>this.core.getMany({keys:e,trans:t}).then((e=>e.map((e=>this.hook.reading.fire(e)))))))}bulkAdd(e,t,r){const n=Array.isArray(t)?t:void 0,i=(r=r||(n?void 0:t))?r.allKeys:void 0;return this._trans("readwrite",(t=>{const{auto:r,keyPath:o}=this.schema.primKey;if(o&&n)throw new ra.InvalidArgument("bulkAdd(): keys argument invalid on tables with inbound keys");if(n&&n.length!==e.length)throw new ra.InvalidArgument("Arguments objects and keys must have the same length");const s=e.length;let a=o&&r?e.map(Oc(o)):e;return this.core.mutate({trans:t,type:"add",keys:n,values:a,wantResults:i}).then((({numFailures:e,results:t,lastResult:r,failures:n})=>{if(0===e)return i?t:r;throw new Zs(`${this.name}.bulkAdd(): ${e} of ${s} operations failed`,n)}))}))}bulkPut(e,t,r){const n=Array.isArray(t)?t:void 0,i=(r=r||(n?void 0:t))?r.allKeys:void 0;return this._trans("readwrite",(t=>{const{auto:r,keyPath:o}=this.schema.primKey;if(o&&n)throw new ra.InvalidArgument("bulkPut(): keys argument invalid on tables with inbound keys");if(n&&n.length!==e.length)throw new ra.InvalidArgument("Arguments objects and keys must have the same length");const s=e.length;let a=o&&r?e.map(Oc(o)):e;return this.core.mutate({trans:t,type:"put",keys:n,values:a,wantResults:i}).then((({numFailures:e,results:t,lastResult:r,failures:n})=>{if(0===e)return i?t:r;throw new Zs(`${this.name}.bulkPut(): ${e} of ${s} operations failed`,n)}))}))}bulkDelete(e){const t=e.length;return this._trans("readwrite",(t=>this.core.mutate({trans:t,type:"delete",keys:e}))).then((({numFailures:e,lastResult:r,failures:n})=>{if(0===e)return r;throw new Zs(`${this.name}.bulkDelete(): ${e} of ${t} operations failed`,n)}))}}function $c(e){var t={},r=function(r,n){if(n){for(var i=arguments.length,o=new Array(i-1);--i;)o[i-1]=arguments[i];return t[r].subscribe.apply(null,o),e}if("string"==typeof r)return t[r]};r.addEventType=o;for(var n=1,i=arguments.length;n<i;++n)o(arguments[n]);return r;function o(e,n,i){if("object"==typeof e)return s(e);n||(n=da),i||(i=oa);var o={subscribers:[],fire:i,subscribe:function(e){-1===o.subscribers.indexOf(e)&&(o.subscribers.push(e),o.fire=n(o.fire,e))},unsubscribe:function(e){o.subscribers=o.subscribers.filter((function(t){return t!==e})),o.fire=o.subscribers.reduce(n,i)}};return t[e]=r[e]=o,o}function s(e){ss(e).forEach((function(t){var r=e[t];if(as(r))o(t,e[t][0],e[t][1]);else{if("asap"!==r)throw new ra.InvalidArgument("Invalid event config");var n=o(t,sa,(function(){for(var e=arguments.length,t=new Array(e);e--;)t[e]=arguments[e];n.subscribers.forEach((function(e){Es((function(){e.apply(null,t)}))}))}))}}))}}function Dc(e,t){return ms(t).from({prototype:e}),t}function Ic(e,t){return!(e.filter||e.algorithm||e.or)&&(t?e.justLimit:!e.replayFilter)}function jc(e,t){e.filter=kc(e.filter,t)}function Tc(e,t,r){var n=e.replayFilter;e.replayFilter=n?()=>kc(n(),t()):t,e.justLimit=r&&!n}function Ac(e,t){if(e.isPrimKey)return t.primaryKey;const r=t.getIndexByKeyPath(e.index);if(!r)throw new ra.Schema("KeyPath "+e.index+" on object store "+t.name+" is not indexed");return r}function Nc(e,t,r){const n=Ac(e,t.schema);return t.openCursor({trans:r,values:!e.keysOnly,reverse:"prev"===e.dir,unique:!!e.unique,query:{index:n,range:e.range}})}function Mc(e,t,r,n){const i=e.replayFilter?kc(e.filter,e.replayFilter()):e.filter;if(e.or){const o={},s=(e,r,n)=>{if(!i||i(r,n,(e=>r.stop(e)),(e=>r.fail(e)))){var s=r.primaryKey,a=""+s;"[object ArrayBuffer]"===a&&(a=""+new Uint8Array(s)),hs(o,a)||(o[a]=!0,t(e,r,n))}};return Promise.all([e.or._iterate(s,r),Lc(Nc(e,n,r),e.algorithm,s,!e.keysOnly&&e.valueMapper)])}return Lc(Nc(e,n,r),kc(e.algorithm,i),t,!e.keysOnly&&e.valueMapper)}function Lc(e,t,r,n){var i=Ja(n?(e,t,i)=>r(n(e),t,i):r);return e.then((e=>{if(e)return e.start((()=>{var r=()=>e.continue();t&&!t(e,(e=>r=e),(t=>{e.stop(t),r=oa}),(t=>{e.fail(t),r=oa}))||i(e.value,e,(e=>r=e)),r()}))}))}function Bc(e,t){try{const r=Fc(e),n=Fc(t);if(r!==n)return"Array"===r?1:"Array"===n?-1:"binary"===r?1:"binary"===n?-1:"string"===r?1:"string"===n?-1:"Date"===r?1:"Date"!==n?NaN:-1;switch(r){case"number":case"Date":case"string":return e>t?1:e<t?-1:0;case"binary":return function(e,t){const r=e.length,n=t.length,i=r<n?r:n;for(let r=0;r<i;++r)if(e[r]!==t[r])return e[r]<t[r]?-1:1;return r===n?0:r<n?-1:1}(qc(e),qc(t));case"Array":return function(e,t){const r=e.length,n=t.length,i=r<n?r:n;for(let r=0;r<i;++r){const n=Bc(e[r],t[r]);if(0!==n)return n}return r===n?0:r<n?-1:1}(e,t)}}catch(e){}return NaN}function Fc(e){const t=typeof e;if("object"!==t)return t;if(ArrayBuffer.isView(e))return"binary";const r=As(e);return"ArrayBuffer"===r?"binary":r}function qc(e){return e instanceof Uint8Array?e:ArrayBuffer.isView(e)?new Uint8Array(e.buffer,e.byteOffset,e.byteLength):new Uint8Array(e)}class Uc{_read(e,t){var r=this._ctx;return r.error?r.table._trans(null,yc.bind(null,r.error)):r.table._trans("readonly",e).then(t)}_write(e){var t=this._ctx;return t.error?t.table._trans(null,yc.bind(null,t.error)):t.table._trans("readwrite",e,"locked")}_addAlgorithm(e){var t=this._ctx;t.algorithm=kc(t.algorithm,e)}_iterate(e,t){return Mc(this._ctx,e,t,this._ctx.table.core)}clone(e){var t=Object.create(this.constructor.prototype),r=Object.create(this._ctx);return e&&cs(r,e),t._ctx=r,t}raw(){return this._ctx.valueMapper=null,this}each(e){var t=this._ctx;return this._read((r=>Mc(t,e,r,t.table.core)))}count(e){return this._read((e=>{const t=this._ctx,r=t.table.core;if(Ic(t,!0))return r.count({trans:e,query:{index:Ac(t,r.schema),range:t.range}}).then((e=>Math.min(e,t.limit)));var n=0;return Mc(t,(()=>(++n,!1)),e,r).then((()=>n))})).then(e)}sortBy(e,t){const r=e.split(".").reverse(),n=r[0],i=r.length-1;function o(e,t){return t?o(e[r[t]],t-1):e[n]}var s="next"===this._ctx.dir?1:-1;function a(e,t){var r=o(e,i),n=o(t,i);return r<n?-s:r>n?s:0}return this.toArray((function(e){return e.sort(a)})).then(t)}toArray(e){return this._read((e=>{var t=this._ctx;if("next"===t.dir&&Ic(t,!0)&&t.limit>0){const{valueMapper:r}=t,n=Ac(t,t.table.core.schema);return t.table.core.query({trans:e,limit:t.limit,values:!0,query:{index:n,range:t.range}}).then((({result:e})=>r?e.map(r):e))}{const r=[];return Mc(t,(e=>r.push(e)),e,t.table.core).then((()=>r))}}),e)}offset(e){var t=this._ctx;return e<=0||(t.offset+=e,Ic(t)?Tc(t,(()=>{var t=e;return(e,r)=>0===t||(1===t?(--t,!1):(r((()=>{e.advance(t),t=0})),!1))})):Tc(t,(()=>{var t=e;return()=>--t<0}))),this}limit(e){return this._ctx.limit=Math.min(this._ctx.limit,e),Tc(this._ctx,(()=>{var t=e;return function(e,r,n){return--t<=0&&r(n),t>=0}}),!0),this}until(e,t){return jc(this._ctx,(function(r,n,i){return!e(r.value)||(n(i),t)})),this}first(e){return this.limit(1).toArray((function(e){return e[0]})).then(e)}last(e){return this.reverse().first(e)}filter(e){var t,r;return jc(this._ctx,(function(t){return e(t.value)})),t=this._ctx,r=e,t.isMatch=kc(t.isMatch,r),this}and(e){return this.filter(e)}or(e){return new this.db.WhereClause(this._ctx.table,e,this)}reverse(){return this._ctx.dir="prev"===this._ctx.dir?"next":"prev",this._ondirectionchange&&this._ondirectionchange(this._ctx.dir),this}desc(){return this.reverse()}eachKey(e){var t=this._ctx;return t.keysOnly=!t.isMatch,this.each((function(t,r){e(r.key,r)}))}eachUniqueKey(e){return this._ctx.unique="unique",this.eachKey(e)}eachPrimaryKey(e){var t=this._ctx;return t.keysOnly=!t.isMatch,this.each((function(t,r){e(r.primaryKey,r)}))}keys(e){var t=this._ctx;t.keysOnly=!t.isMatch;var r=[];return this.each((function(e,t){r.push(t.key)})).then((function(){return r})).then(e)}primaryKeys(e){var t=this._ctx;if("next"===t.dir&&Ic(t,!0)&&t.limit>0)return this._read((e=>{var r=Ac(t,t.table.core.schema);return t.table.core.query({trans:e,values:!1,limit:t.limit,query:{index:r,range:t.range}})})).then((({result:e})=>e)).then(e);t.keysOnly=!t.isMatch;var r=[];return this.each((function(e,t){r.push(t.primaryKey)})).then((function(){return r})).then(e)}uniqueKeys(e){return this._ctx.unique="unique",this.keys(e)}firstKey(e){return this.limit(1).keys((function(e){return e[0]})).then(e)}lastKey(e){return this.reverse().firstKey(e)}distinct(){var e=this._ctx,t=e.index&&e.table.schema.idxByName[e.index];if(!t||!t.multi)return this;var r={};return jc(this._ctx,(function(e){var t=e.primaryKey.toString(),n=hs(r,t);return r[t]=!0,!n})),this}modify(e){var t=this._ctx;return this._write((r=>{var n;if("function"==typeof e)n=e;else{var i=ss(e),o=i.length;n=function(t){for(var r=!1,n=0;n<o;++n){var s=i[n],a=e[s];Cs(t,s)!==a&&(ks(t,s,a),r=!0)}return r}}const s=t.table.core,{outbound:a,extractKey:c}=s.schema.primaryKey,u=this.db._options.modifyChunkSize||200,l=[];let h=0;const d=[],f=(e,t)=>{const{failures:r,numFailures:n}=t;h+=e-n;for(let e of ss(r))l.push(r[e])};return this.clone().primaryKeys().then((i=>{const o=l=>{const h=Math.min(u,i.length-l);return s.getMany({trans:r,keys:i.slice(l,l+h),cache:"immutable"}).then((d=>{const p=[],m=[],y=a?[]:null,v=[];for(let e=0;e<h;++e){const t=d[e],r={value:Is(t),primKey:i[l+e]};!1!==n.call(r,r.value,r)&&(null==r.value?v.push(i[l+e]):a||0===Bc(c(t),c(r.value))?(m.push(r.value),a&&y.push(i[l+e])):(v.push(i[l+e]),p.push(r.value)))}const g=Ic(t)&&t.limit===1/0&&("function"!=typeof e||e===Kc)&&{index:t.index,range:t.range};return Promise.resolve(p.length>0&&s.mutate({trans:r,type:"add",values:p}).then((e=>{for(let t in e.failures)v.splice(parseInt(t),1);f(p.length,e)}))).then((()=>(m.length>0||g&&"object"==typeof e)&&s.mutate({trans:r,type:"put",keys:y,values:m,criteria:g,changeSpec:"function"!=typeof e&&e}).then((e=>f(m.length,e))))).then((()=>(v.length>0||g&&e===Kc)&&s.mutate({trans:r,type:"delete",keys:v,criteria:g}).then((e=>f(v.length,e))))).then((()=>i.length>l+h&&o(l+u)))}))};return o(0).then((()=>{if(l.length>0)throw new Xs("Error modifying one or more objects",l,h,d);return i.length}))}))}))}delete(){var e=this._ctx,t=e.range;return Ic(e)&&(e.isPrimKey&&!Sc||3===t.type)?this._write((r=>{const{primaryKey:n}=e.table.core.schema,i=t;return e.table.core.count({trans:r,query:{index:n,range:i}}).then((t=>e.table.core.mutate({trans:r,type:"deleteRange",range:i}).then((({failures:e,lastResult:r,results:n,numFailures:i})=>{if(i)throw new Xs("Could not delete some values",Object.keys(e).map((t=>e[t])),t-i);return t-i}))))})):this.modify(Kc)}}const Kc=(e,t)=>t.value=null;function Vc(e,t){return e<t?-1:e===t?0:1}function Hc(e,t){return e>t?-1:e===t?0:1}function zc(e,t,r){var n=e instanceof Xc?new e.Collection(e):e;return n._ctx.error=r?new r(t):new TypeError(t),n}function Wc(e){return new e.Collection(e,(()=>Yc(""))).limit(0)}function Qc(e,t,r,n,i,o){for(var s=Math.min(e.length,n.length),a=-1,c=0;c<s;++c){var u=t[c];if(u!==n[c])return i(e[c],r[c])<0?e.substr(0,c)+r[c]+r.substr(c+1):i(e[c],n[c])<0?e.substr(0,c)+n[c]+r.substr(c+1):a>=0?e.substr(0,a)+t[a]+r.substr(a+1):null;i(e[c],u)<0&&(a=c)}return s<n.length&&"next"===o?e+r.substr(e.length):s<e.length&&"prev"===o?e.substr(0,r.length):a<0?null:e.substr(0,a)+n[a]+r.substr(a+1)}function Gc(e,t,r,n){var i,o,s,a,c,u,l,h=r.length;if(!r.every((e=>"string"==typeof e)))return zc(e,"String expected.");function d(e){i=function(e){return"next"===e?e=>e.toUpperCase():e=>e.toLowerCase()}(e),o=function(e){return"next"===e?e=>e.toLowerCase():e=>e.toUpperCase()}(e),s="next"===e?Vc:Hc;var t=r.map((function(e){return{lower:o(e),upper:i(e)}})).sort((function(e,t){return s(e.lower,t.lower)}));a=t.map((function(e){return e.upper})),c=t.map((function(e){return e.lower})),u=e,l="next"===e?"":n}d("next");var f=new e.Collection(e,(()=>Jc(a[0],c[h-1]+n)));f._ondirectionchange=function(e){d(e)};var p=0;return f._addAlgorithm((function(e,r,n){var i=e.key;if("string"!=typeof i)return!1;var d=o(i);if(t(d,c,p))return!0;for(var f=null,m=p;m<h;++m){var y=Qc(i,d,a[m],c[m],s,u);null===y&&null===f?p=m+1:(null===f||s(f,y)>0)&&(f=y)}return r(null!==f?function(){e.continue(f+l)}:n),!1})),f}function Jc(e,t,r,n){return{type:2,lower:e,upper:t,lowerOpen:r,upperOpen:n}}function Yc(e){return{type:1,lower:e,upper:e}}class Xc{get Collection(){return this._ctx.table.db.Collection}between(e,t,r,n){r=!1!==r,n=!0===n;try{return this._cmp(e,t)>0||0===this._cmp(e,t)&&(r||n)&&(!r||!n)?Wc(this):new this.Collection(this,(()=>Jc(e,t,!r,!n)))}catch(e){return zc(this,bc)}}equals(e){return null==e?zc(this,bc):new this.Collection(this,(()=>Yc(e)))}above(e){return null==e?zc(this,bc):new this.Collection(this,(()=>Jc(e,void 0,!0)))}aboveOrEqual(e){return null==e?zc(this,bc):new this.Collection(this,(()=>Jc(e,void 0,!1)))}below(e){return null==e?zc(this,bc):new this.Collection(this,(()=>Jc(void 0,e,!1,!0)))}belowOrEqual(e){return null==e?zc(this,bc):new this.Collection(this,(()=>Jc(void 0,e)))}startsWith(e){return"string"!=typeof e?zc(this,"String expected."):this.between(e,e+gc,!0,!0)}startsWithIgnoreCase(e){return""===e?this.startsWith(e):Gc(this,((e,t)=>0===e.indexOf(t[0])),[e],gc)}equalsIgnoreCase(e){return Gc(this,((e,t)=>e===t[0]),[e],"")}anyOfIgnoreCase(){var e=Bs.apply(Ls,arguments);return 0===e.length?Wc(this):Gc(this,((e,t)=>-1!==t.indexOf(e)),e,"")}startsWithAnyOfIgnoreCase(){var e=Bs.apply(Ls,arguments);return 0===e.length?Wc(this):Gc(this,((e,t)=>t.some((t=>0===e.indexOf(t)))),e,gc)}anyOf(){const e=Bs.apply(Ls,arguments);let t=this._cmp;try{e.sort(t)}catch(e){return zc(this,bc)}if(0===e.length)return Wc(this);const r=new this.Collection(this,(()=>Jc(e[0],e[e.length-1])));r._ondirectionchange=r=>{t="next"===r?this._ascending:this._descending,e.sort(t)};let n=0;return r._addAlgorithm(((r,i,o)=>{const s=r.key;for(;t(s,e[n])>0;)if(++n,n===e.length)return i(o),!1;return 0===t(s,e[n])||(i((()=>{r.continue(e[n])})),!1)})),r}notEqual(e){return this.inAnyRange([[-1/0,e],[e,this.db._maxKey]],{includeLowers:!1,includeUppers:!1})}noneOf(){const e=Bs.apply(Ls,arguments);if(0===e.length)return new this.Collection(this);try{e.sort(this._ascending)}catch(e){return zc(this,bc)}const t=e.reduce(((e,t)=>e?e.concat([[e[e.length-1][1],t]]):[[-1/0,t]]),null);return t.push([e[e.length-1],this.db._maxKey]),this.inAnyRange(t,{includeLowers:!1,includeUppers:!1})}inAnyRange(e,t){const r=this._cmp,n=this._ascending,i=this._descending,o=this._min,s=this._max;if(0===e.length)return Wc(this);if(!e.every((e=>void 0!==e[0]&&void 0!==e[1]&&n(e[0],e[1])<=0)))return zc(this,"First argument to inAnyRange() must be an Array of two-value Arrays [lower,upper] where upper must not be lower than lower",ra.InvalidArgument);const a=!t||!1!==t.includeLowers,c=t&&!0===t.includeUppers;let u,l=n;function h(e,t){return l(e[0],t[0])}try{u=e.reduce((function(e,t){let n=0,i=e.length;for(;n<i;++n){const i=e[n];if(r(t[0],i[1])<0&&r(t[1],i[0])>0){i[0]=o(i[0],t[0]),i[1]=s(i[1],t[1]);break}}return n===i&&e.push(t),e}),[]),u.sort(h)}catch(e){return zc(this,bc)}let d=0;const f=c?e=>n(e,u[d][1])>0:e=>n(e,u[d][1])>=0,p=a?e=>i(e,u[d][0])>0:e=>i(e,u[d][0])>=0;let m=f;const y=new this.Collection(this,(()=>Jc(u[0][0],u[u.length-1][1],!a,!c)));return y._ondirectionchange=e=>{"next"===e?(m=f,l=n):(m=p,l=i),u.sort(h)},y._addAlgorithm(((e,t,r)=>{for(var i=e.key;m(i);)if(++d,d===u.length)return t(r),!1;return!!function(e){return!f(e)&&!p(e)}(i)||(0===this._cmp(i,u[d][1])||0===this._cmp(i,u[d][0])||t((()=>{l===n?e.continue(u[d][0]):e.continue(u[d][1])})),!1)})),y}startsWithAnyOf(){const e=Bs.apply(Ls,arguments);return e.every((e=>"string"==typeof e))?0===e.length?Wc(this):this.inAnyRange(e.map((e=>[e,e+gc]))):zc(this,"startsWithAnyOf() only works with strings")}}function Zc(e){return Ja((function(t){return eu(t),e(t.target.error),!1}))}function eu(e){e.stopPropagation&&e.stopPropagation(),e.preventDefault&&e.preventDefault()}const tu=$c(null,"storagemutated");class ru{_lock(){return _s(!Da.global),++this._reculock,1!==this._reculock||Da.global||(Da.lockOwnerFor=this),this}_unlock(){if(_s(!Da.global),0==--this._reculock)for(Da.global||(Da.lockOwnerFor=null);this._blockedFuncs.length>0&&!this._locked();){var e=this._blockedFuncs.shift();try{hc(e[1],e[0])}catch(e){}}return this}_locked(){return this._reculock&&Da.lockOwnerFor!==this}create(e){if(!this.mode)return this;const t=this.db.idbdb,r=this.db._state.dbOpenError;if(_s(!this.idbtrans),!e&&!t)switch(r&&r.name){case"DatabaseClosedError":throw new ra.DatabaseClosed(r);case"MissingAPIError":throw new ra.MissingAPI(r.message,r);default:throw new ra.OpenFailed(r)}if(!this.active)throw new ra.TransactionInactive;return _s(null===this._completion._state),(e=this.idbtrans=e||(this.db.core?this.db.core.transaction(this.storeNames,this.mode,{durability:this.chromeTransactionDurability}):t.transaction(this.storeNames,this.mode,{durability:this.chromeTransactionDurability}))).onerror=Ja((t=>{eu(t),this._reject(e.error)})),e.onabort=Ja((t=>{eu(t),this.active&&this._reject(new ra.Abort(e.error)),this.active=!1,this.on("abort").fire(t)})),e.oncomplete=Ja((()=>{this.active=!1,this._resolve(),"mutatedParts"in e&&tu.storagemutated.fire(e.mutatedParts)})),this}_promise(e,t,r){if("readwrite"===e&&"readwrite"!==this.mode)return yc(new ra.ReadOnly("Transaction is readonly"));if(!this.active)return yc(new ra.TransactionInactive);if(this._locked())return new Aa(((n,i)=>{this._blockedFuncs.push([()=>{this._promise(e,t,r).then(n,i)},Da])}));if(r)return nc((()=>{var e=new Aa(((e,r)=>{this._lock();const n=t(e,r,this);n&&n.then&&n.then(e,r)}));return e.finally((()=>this._unlock())),e._lib=!0,e}));var n=new Aa(((e,r)=>{var n=t(e,r,this);n&&n.then&&n.then(e,r)}));return n._lib=!0,n}_root(){return this.parent?this.parent._root():this}waitFor(e){var t=this._root();const r=Aa.resolve(e);if(t._waitingFor)t._waitingFor=t._waitingFor.then((()=>r));else{t._waitingFor=r,t._waitingQueue=[];var n=t.idbtrans.objectStore(t.storeNames[0]);!function e(){for(++t._spinCount;t._waitingQueue.length;)t._waitingQueue.shift()();t._waitingFor&&(n.get(-1/0).onsuccess=e)}()}var i=t._waitingFor;return new Aa(((e,n)=>{r.then((r=>t._waitingQueue.push(Ja(e.bind(null,r)))),(e=>t._waitingQueue.push(Ja(n.bind(null,e))))).finally((()=>{t._waitingFor===i&&(t._waitingFor=null)}))}))}abort(){this.active&&(this.active=!1,this.idbtrans&&this.idbtrans.abort(),this._reject(new ra.Abort))}table(e){const t=this._memoizedTables||(this._memoizedTables={});if(hs(t,e))return t[e];const r=this.schema[e];if(!r)throw new ra.NotFound("Table "+e+" not part of transaction");const n=new this.db.Table(e,r,this);return n.core=this.db.core.table(e),t[e]=n,n}}function nu(e,t,r,n,i,o,s){return{name:e,keyPath:t,unique:r,multi:n,auto:i,compound:o,src:(r&&!s?"&":"")+(n?"*":"")+(i?"++":"")+iu(t)}}function iu(e){return"string"==typeof e?e:e?"["+[].join.call(e,"+")+"]":""}function ou(e,t,r){return{name:e,primKey:t,indexes:r,mappedClass:null,idxByName:Ss(r,(e=>[e.name,e]))}}let su=e=>{try{return e.only([[]]),su=()=>[[]],[[]]}catch(e){return su=()=>gc,gc}};function au(e){return null==e?()=>{}:"string"==typeof e?function(e){return 1===e.split(".").length?t=>t[e]:t=>Cs(t,e)}(e):t=>Cs(t,e)}function cu(e){return[].slice.call(e)}let uu=0;function lu(e){return null==e?":id":"string"==typeof e?e:`[${e.join("+")}]`}function hu(e,t,r){function n(e){if(3===e.type)return null;if(4===e.type)throw new Error("Cannot convert never type to IDBKeyRange");const{lower:r,upper:n,lowerOpen:i,upperOpen:o}=e;return void 0===r?void 0===n?null:t.upperBound(n,!!o):void 0===n?t.lowerBound(r,!!i):t.bound(r,n,!!i,!!o)}const{schema:i,hasGetAll:o}=function(e,t){const r=cu(e.objectStoreNames);return{schema:{name:e.name,tables:r.map((e=>t.objectStore(e))).map((e=>{const{keyPath:t,autoIncrement:r}=e,n=as(t),i=null==t,o={},s={name:e.name,primaryKey:{name:null,isPrimaryKey:!0,outbound:i,compound:n,keyPath:t,autoIncrement:r,unique:!0,extractKey:au(t)},indexes:cu(e.indexNames).map((t=>e.index(t))).map((e=>{const{name:t,unique:r,multiEntry:n,keyPath:i}=e,s={name:t,compound:as(i),keyPath:i,unique:r,multiEntry:n,extractKey:au(i)};return o[lu(i)]=s,s})),getIndexByKeyPath:e=>o[lu(e)]};return o[":id"]=s.primaryKey,null!=t&&(o[lu(t)]=s.primaryKey),s}))},hasGetAll:r.length>0&&"getAll"in t.objectStore(r[0])&&!("undefined"!=typeof navigator&&/Safari/.test(navigator.userAgent)&&!/(Chrome\/|Edge\/)/.test(navigator.userAgent)&&[].concat(navigator.userAgent.match(/Safari\/(\d*)/))[1]<604)}}(e,r),s=i.tables.map((e=>function(e){const t=e.name;return{name:t,schema:e,mutate:function({trans:e,type:r,keys:i,values:o,range:s}){return new Promise(((a,c)=>{a=Ja(a);const u=e.objectStore(t),l=null==u.keyPath,h="put"===r||"add"===r;if(!h&&"delete"!==r&&"deleteRange"!==r)throw new Error("Invalid operation type: "+r);const{length:d}=i||o||{length:1};if(i&&o&&i.length!==o.length)throw new Error("Given keys array must have same length as given values array.");if(0===d)return a({numFailures:0,failures:{},results:[],lastResult:void 0});let f;const p=[],m=[];let y=0;const v=e=>{++y,eu(e)};if("deleteRange"===r){if(4===s.type)return a({numFailures:y,failures:m,results:[],lastResult:void 0});3===s.type?p.push(f=u.clear()):p.push(f=u.delete(n(s)))}else{const[e,t]=h?l?[o,i]:[o,null]:[i,null];if(h)for(let n=0;n<d;++n)p.push(f=t&&void 0!==t[n]?u[r](e[n],t[n]):u[r](e[n])),f.onerror=v;else for(let t=0;t<d;++t)p.push(f=u[r](e[t])),f.onerror=v}const g=e=>{const t=e.target.result;p.forEach(((e,t)=>null!=e.error&&(m[t]=e.error))),a({numFailures:y,failures:m,results:"delete"===r?i:p.map((e=>e.result)),lastResult:t})};f.onerror=e=>{v(e),g(e)},f.onsuccess=g}))},getMany:({trans:e,keys:r})=>new Promise(((n,i)=>{n=Ja(n);const o=e.objectStore(t),s=r.length,a=new Array(s);let c,u=0,l=0;const h=e=>{const t=e.target;a[t._pos]=t.result,++l===u&&n(a)},d=Zc(i);for(let e=0;e<s;++e)null!=r[e]&&(c=o.get(r[e]),c._pos=e,c.onsuccess=h,c.onerror=d,++u);0===u&&n(a)})),get:({trans:e,key:r})=>new Promise(((n,i)=>{n=Ja(n);const o=e.objectStore(t).get(r);o.onsuccess=e=>n(e.target.result),o.onerror=Zc(i)})),query:function(e){return r=>new Promise(((i,o)=>{i=Ja(i);const{trans:s,values:a,limit:c,query:u}=r,l=c===1/0?void 0:c,{index:h,range:d}=u,f=s.objectStore(t),p=h.isPrimaryKey?f:f.index(h.name),m=n(d);if(0===c)return i({result:[]});if(e){const e=a?p.getAll(m,l):p.getAllKeys(m,l);e.onsuccess=e=>i({result:e.target.result}),e.onerror=Zc(o)}else{let e=0;const t=a||!("openKeyCursor"in p)?p.openCursor(m):p.openKeyCursor(m),r=[];t.onsuccess=n=>{const o=t.result;return o?(r.push(a?o.value:o.primaryKey),++e===c?i({result:r}):void o.continue()):i({result:r})},t.onerror=Zc(o)}}))}(o),openCursor:function({trans:e,values:r,query:i,reverse:o,unique:s}){return new Promise(((a,c)=>{a=Ja(a);const{index:u,range:l}=i,h=e.objectStore(t),d=u.isPrimaryKey?h:h.index(u.name),f=o?s?"prevunique":"prev":s?"nextunique":"next",p=r||!("openKeyCursor"in d)?d.openCursor(n(l),f):d.openKeyCursor(n(l),f);p.onerror=Zc(c),p.onsuccess=Ja((t=>{const r=p.result;if(!r)return void a(null);r.___id=++uu,r.done=!1;const n=r.continue.bind(r);let i=r.continuePrimaryKey;i&&(i=i.bind(r));const o=r.advance.bind(r),s=()=>{throw new Error("Cursor not stopped")};r.trans=e,r.stop=r.continue=r.continuePrimaryKey=r.advance=()=>{throw new Error("Cursor not started")},r.fail=Ja(c),r.next=function(){let e=1;return this.start((()=>e--?this.continue():this.stop())).then((()=>this))},r.start=e=>{const t=new Promise(((e,t)=>{e=Ja(e),p.onerror=Zc(t),r.fail=t,r.stop=t=>{r.stop=r.continue=r.continuePrimaryKey=r.advance=s,e(t)}})),a=()=>{if(p.result)try{e()}catch(e){r.fail(e)}else r.done=!0,r.start=()=>{throw new Error("Cursor behind last entry")},r.stop()};return p.onsuccess=Ja((e=>{p.onsuccess=a,a()})),r.continue=n,r.continuePrimaryKey=i,r.advance=o,a(),t},a(r)}),c)}))},count({query:e,trans:r}){const{index:i,range:o}=e;return new Promise(((e,s)=>{const a=r.objectStore(t),c=i.isPrimaryKey?a:a.index(i.name),u=n(o),l=u?c.count(u):c.count();l.onsuccess=Ja((t=>e(t.target.result))),l.onerror=Zc(s)}))}}}(e))),a={};return s.forEach((e=>a[e.name]=e)),{stack:"dbcore",transaction:e.transaction.bind(e),table(e){if(!a[e])throw new Error(`Table '${e}' not found`);return a[e]},MIN_KEY:-1/0,MAX_KEY:su(t),schema:i}}function du({_novip:e},t){const r=t.db,n=function(e,t,{IDBKeyRange:r,indexedDB:n},i){const o=function(e,t){return t.reduce(((e,{create:t})=>({...e,...t(e)})),e)}(hu(t,r,i),e.dbcore);return{dbcore:o}}(e._middlewares,r,e._deps,t);e.core=n.dbcore,e.tables.forEach((t=>{const r=t.name;e.core.schema.tables.some((e=>e.name===r))&&(t.core=e.core.table(r),e[r]instanceof e.Table&&(e[r].core=t.core))}))}function fu({_novip:e},t,r,n){r.forEach((r=>{const i=n[r];t.forEach((t=>{const n=vs(t,r);(!n||"value"in n&&void 0===n.value)&&(t===e.Transaction.prototype||t instanceof e.Transaction?ps(t,r,{get(){return this.table(r)},set(e){fs(this,r,{value:e,writable:!0,configurable:!0,enumerable:!0})}}):t[r]=new e.Table(r,i))}))}))}function pu({_novip:e},t){t.forEach((t=>{for(let r in t)t[r]instanceof e.Table&&delete t[r]}))}function mu(e,t){return e._cfg.version-t._cfg.version}function yu(e,t,r,n){const i=e._dbSchema,o=e._createTransaction("readwrite",e._storeNames,i);o.create(r),o._completion.catch(n);const s=o._reject.bind(o),a=Da.transless||Da;nc((()=>{Da.trans=o,Da.transless=a,0===t?(ss(i).forEach((e=>{gu(r,e,i[e].primKey,i[e].indexes)})),du(e,r),Aa.follow((()=>e.on.populate.fire(o))).catch(s)):function({_novip:e},t,r,n){const i=[],o=e._versions;let s=e._dbSchema=wu(0,e.idbdb,n),a=!1;return o.filter((e=>e._cfg.version>=t)).forEach((o=>{i.push((()=>{const i=s,c=o._cfg.dbschema;_u(e,i,n),_u(e,c,n),s=e._dbSchema=c;const u=vu(i,c);u.add.forEach((e=>{gu(n,e[0],e[1].primKey,e[1].indexes)})),u.change.forEach((e=>{if(e.recreate)throw new ra.Upgrade("Not yet support for changing primary key");{const t=n.objectStore(e.name);e.add.forEach((e=>bu(t,e))),e.change.forEach((e=>{t.deleteIndex(e.name),bu(t,e)})),e.del.forEach((e=>t.deleteIndex(e)))}}));const l=o._cfg.contentUpgrade;if(l&&o._cfg.version>t){du(e,n),r._memoizedTables={},a=!0;let t=xs(c);u.del.forEach((e=>{t[e]=i[e]})),pu(e,[e.Transaction.prototype]),fu(e,[e.Transaction.prototype],ss(t),t),r.schema=t;const o=Fs(l);let s;o&&ic();const h=Aa.follow((()=>{if(s=l(r),s&&o){var e=oc.bind(null,null);s.then(e,e)}}));return s&&"function"==typeof s.then?Aa.resolve(s):h.then((()=>s))}})),i.push((t=>{a&&Ec||function(e,t){[].slice.call(t.db.objectStoreNames).forEach((r=>null==e[r]&&t.db.deleteObjectStore(r)))}(o._cfg.dbschema,t),pu(e,[e.Transaction.prototype]),fu(e,[e.Transaction.prototype],e._storeNames,e._dbSchema),r.schema=e._dbSchema}))})),function e(){return i.length?Aa.resolve(i.shift()(r.idbtrans)).then(e):Aa.resolve()}().then((()=>{var e,t;t=n,ss(e=s).forEach((r=>{t.db.objectStoreNames.contains(r)||gu(t,r,e[r].primKey,e[r].indexes)}))}))}(e,t,o,r).catch(s)}))}function vu(e,t){const r={del:[],add:[],change:[]};let n;for(n in e)t[n]||r.del.push(n);for(n in t){const i=e[n],o=t[n];if(i){const e={name:n,def:o,recreate:!1,del:[],add:[],change:[]};if(""+(i.primKey.keyPath||"")!=""+(o.primKey.keyPath||"")||i.primKey.auto!==o.primKey.auto&&!_c)e.recreate=!0,r.change.push(e);else{const t=i.idxByName,n=o.idxByName;let s;for(s in t)n[s]||e.del.push(s);for(s in n){const r=t[s],i=n[s];r?r.src!==i.src&&e.change.push(i):e.add.push(i)}(e.del.length>0||e.add.length>0||e.change.length>0)&&r.change.push(e)}}else r.add.push([n,o])}return r}function gu(e,t,r,n){const i=e.db.createObjectStore(t,r.keyPath?{keyPath:r.keyPath,autoIncrement:r.auto}:{autoIncrement:r.auto});return n.forEach((e=>bu(i,e))),i}function bu(e,t){e.createIndex(t.name,t.keyPath,{unique:t.unique,multiEntry:t.multi})}function wu(e,t,r){const n={};return bs(t.objectStoreNames,0).forEach((e=>{const t=r.objectStore(e);let i=t.keyPath;const o=nu(iu(i),i||"",!1,!1,!!t.autoIncrement,i&&"string"!=typeof i,!0),s=[];for(let e=0;e<t.indexNames.length;++e){const r=t.index(t.indexNames[e]);i=r.keyPath;var a=nu(r.name,i,!!r.unique,!!r.multiEntry,!1,i&&"string"!=typeof i,!1);s.push(a)}n[e]=ou(e,o,s)})),n}function _u({_novip:e},t,r){const n=r.db.objectStoreNames;for(let i=0;i<n.length;++i){const o=n[i],s=r.objectStore(o);e._hasGetAll="getAll"in s;for(let e=0;e<s.indexNames.length;++e){const r=s.indexNames[e],n=s.index(r).keyPath,i="string"==typeof n?n:"["+bs(n).join("+")+"]";if(t[o]){const e=t[o].idxByName[i];e&&(e.name=r,delete t[o].idxByName[i],t[o].idxByName[r]=e)}}}"undefined"!=typeof navigator&&/Safari/.test(navigator.userAgent)&&!/(Chrome\/|Edge\/)/.test(navigator.userAgent)&&os.WorkerGlobalScope&&os instanceof os.WorkerGlobalScope&&[].concat(navigator.userAgent.match(/Safari\/(\d*)/))[1]<604&&(e._hasGetAll=!1)}class Eu{_parseStoresSpec(e,t){ss(e).forEach((r=>{if(null!==e[r]){var n=e[r].split(",").map(((e,t)=>{const r=(e=e.trim()).replace(/([&*]|\+\+)/g,""),n=/^\[/.test(r)?r.match(/^\[(.*)\]$/)[1].split("+"):r;return nu(r,n||null,/\&/.test(e),/\*/.test(e),/\+\+/.test(e),as(n),0===t)})),i=n.shift();if(i.multi)throw new ra.Schema("Primary key cannot be multi-valued");n.forEach((e=>{if(e.auto)throw new ra.Schema("Only primary key can be marked as autoIncrement (++)");if(!e.keyPath)throw new ra.Schema("Index must have a name and cannot be an empty string")})),t[r]=ou(r,i,n)}}))}stores(e){const t=this.db;this._cfg.storesSource=this._cfg.storesSource?cs(this._cfg.storesSource,e):e;const r=t._versions,n={};let i={};return r.forEach((e=>{cs(n,e._cfg.storesSource),i=e._cfg.dbschema={},e._parseStoresSpec(n,i)})),t._dbSchema=i,pu(t,[t._allTables,t,t.Transaction.prototype]),fu(t,[t._allTables,t,t.Transaction.prototype,this._cfg.tables],ss(i),i),t._storeNames=ss(i),this}upgrade(e){return this._cfg.contentUpgrade=fa(this._cfg.contentUpgrade||oa,e),this}}function Su(e,t){let r=e._dbNamesDB;return r||(r=e._dbNamesDB=new Vu("__dbnames",{addons:[],indexedDB:e,IDBKeyRange:t}),r.version(1).stores({dbnames:"name"})),r.table("dbnames")}function Cu(e){return e&&"function"==typeof e.databases}function ku(e){return nc((function(){return Da.letThrough=!0,e()}))}function xu(){var e;return!navigator.userAgentData&&/Safari\//.test(navigator.userAgent)&&!/Chrom(e|ium)\//.test(navigator.userAgent)&&indexedDB.databases?new Promise((function(t){var r=function(){return indexedDB.databases().finally(t)};e=setInterval(r,100),r()})).finally((function(){return clearInterval(e)})):Promise.resolve()}function Ou(e){var t=t=>e.next(t),r=i(t),n=i((t=>e.throw(t)));function i(e){return t=>{var i=e(t),o=i.value;return i.done?o:o&&"function"==typeof o.then?o.then(r,n):as(o)?Promise.all(o).then(r,n):r(o)}}return i(t)()}function Pu(e,t,r){var n=arguments.length;if(n<2)throw new ra.InvalidArgument("Too few arguments");for(var i=new Array(n-1);--n;)i[n-1]=arguments[n];return r=i.pop(),[e,Ps(i),r]}function Ru(e,t,r,n,i){return Aa.resolve().then((()=>{const o=Da.transless||Da,s=e._createTransaction(t,r,e._dbSchema,n),a={trans:s,transless:o};if(n)s.idbtrans=n.idbtrans;else try{s.create(),e._state.PR1398_maxLoop=3}catch(n){return n.name===ea.InvalidState&&e.isOpen()&&--e._state.PR1398_maxLoop>0?(console.warn("Dexie: Need to reopen db"),e._close(),e.open().then((()=>Ru(e,t,r,null,i)))):yc(n)}const c=Fs(i);let u;c&&ic();const l=Aa.follow((()=>{if(u=i.call(s,s),u)if(c){var e=oc.bind(null,null);u.then(e,e)}else"function"==typeof u.next&&"function"==typeof u.throw&&(u=Ou(u))}),a);return(u&&"function"==typeof u.then?Aa.resolve(u).then((e=>s.active?e:yc(new ra.PrematureCommit("Transaction committed too early. See http://bit.ly/2kdckMn")))):l.then((()=>u))).then((e=>(n&&s._resolve(),s._completion.then((()=>e))))).catch((e=>(s._reject(e),yc(e))))}))}function $u(e,t,r){const n=as(e)?e.slice():[e];for(let e=0;e<r;++e)n.push(t);return n}const Du={stack:"dbcore",name:"VirtualIndexMiddleware",level:1,create:function(e){return{...e,table(t){const r=e.table(t),{schema:n}=r,i={},o=[];function s(e,t,r){const n=lu(e),a=i[n]=i[n]||[],c=null==e?0:"string"==typeof e?1:e.length,u=t>0,l={...r,isVirtual:u,keyTail:t,keyLength:c,extractKey:au(e),unique:!u&&r.unique};return a.push(l),l.isPrimaryKey||o.push(l),c>1&&s(2===c?e[0]:e.slice(0,c-1),t+1,r),a.sort(((e,t)=>e.keyTail-t.keyTail)),l}const a=s(n.primaryKey.keyPath,0,n.primaryKey);i[":id"]=[a];for(const e of n.indexes)s(e.keyPath,0,e);function c(t){const r=t.query.index;return r.isVirtual?{...t,query:{index:r,range:(n=t.query.range,i=r.keyTail,{type:1===n.type?2:n.type,lower:$u(n.lower,n.lowerOpen?e.MAX_KEY:e.MIN_KEY,i),lowerOpen:!0,upper:$u(n.upper,n.upperOpen?e.MIN_KEY:e.MAX_KEY,i),upperOpen:!0})}}:t;var n,i}const u={...r,schema:{...n,primaryKey:a,indexes:o,getIndexByKeyPath:function(e){const t=i[lu(e)];return t&&t[0]}},count:e=>r.count(c(e)),query:e=>r.query(c(e)),openCursor(t){const{keyTail:n,isVirtual:i,keyLength:o}=t.query.index;return i?r.openCursor(c(t)).then((r=>r&&function(r){const i=Object.create(r,{continue:{value:function(i){null!=i?r.continue($u(i,t.reverse?e.MAX_KEY:e.MIN_KEY,n)):t.unique?r.continue(r.key.slice(0,o).concat(t.reverse?e.MIN_KEY:e.MAX_KEY,n)):r.continue()}},continuePrimaryKey:{value(t,i){r.continuePrimaryKey($u(t,e.MAX_KEY,n),i)}},primaryKey:{get:()=>r.primaryKey},key:{get(){const e=r.key;return 1===o?e[0]:e.slice(0,o)}},value:{get:()=>r.value}});return i}(r))):r.openCursor(t)}};return u}}}};function Iu(e,t,r,n){return r=r||{},n=n||"",ss(e).forEach((i=>{if(hs(t,i)){var o=e[i],s=t[i];if("object"==typeof o&&"object"==typeof s&&o&&s){const e=As(o);e!==As(s)?r[n+i]=t[i]:"Object"===e?Iu(o,s,r,n+i+"."):o!==s&&(r[n+i]=t[i])}else o!==s&&(r[n+i]=t[i])}else r[n+i]=void 0})),ss(t).forEach((i=>{hs(e,i)||(r[n+i]=t[i])})),r}const ju={stack:"dbcore",name:"HooksMiddleware",level:2,create:e=>({...e,table(t){const r=e.table(t),{primaryKey:n}=r.schema,i={...r,mutate(e){const i=Da.trans,{deleting:o,creating:s,updating:a}=i.table(t).hook;switch(e.type){case"add":if(s.fire===oa)break;return i._promise("readwrite",(()=>c(e)),!0);case"put":if(s.fire===oa&&a.fire===oa)break;return i._promise("readwrite",(()=>c(e)),!0);case"delete":if(o.fire===oa)break;return i._promise("readwrite",(()=>c(e)),!0);case"deleteRange":if(o.fire===oa)break;return i._promise("readwrite",(()=>function(e){return u(e.trans,e.range,1e4)}(e)),!0)}return r.mutate(e);function c(e){const t=Da.trans,i=e.keys||function(e,t){return"delete"===t.type?t.keys:t.keys||t.values.map(e.extractKey)}(n,e);if(!i)throw new Error("Keys missing");return"delete"!==(e="add"===e.type||"put"===e.type?{...e,keys:i}:{...e}).type&&(e.values=[...e.values]),e.keys&&(e.keys=[...e.keys]),function(e,t,r){return"add"===t.type?Promise.resolve([]):e.getMany({trans:t.trans,keys:r,cache:"immutable"})}(r,e,i).then((c=>{const u=i.map(((r,i)=>{const u=c[i],l={onerror:null,onsuccess:null};if("delete"===e.type)o.fire.call(l,r,u,t);else if("add"===e.type||void 0===u){const o=s.fire.call(l,r,e.values[i],t);null==r&&null!=o&&(r=o,e.keys[i]=r,n.outbound||ks(e.values[i],n.keyPath,r))}else{const n=Iu(u,e.values[i]),o=a.fire.call(l,n,r,u,t);if(o){const t=e.values[i];Object.keys(o).forEach((e=>{hs(t,e)?t[e]=o[e]:ks(t,e,o[e])}))}}return l}));return r.mutate(e).then((({failures:t,results:r,numFailures:n,lastResult:o})=>{for(let n=0;n<i.length;++n){const o=r?r[n]:i[n],s=u[n];null==o?s.onerror&&s.onerror(t[n]):s.onsuccess&&s.onsuccess("put"===e.type&&c[n]?e.values[n]:o)}return{failures:t,results:r,numFailures:n,lastResult:o}})).catch((e=>(u.forEach((t=>t.onerror&&t.onerror(e))),Promise.reject(e))))}))}function u(e,t,i){return r.query({trans:e,values:!1,query:{index:n,range:t},limit:i}).then((({result:r})=>c({type:"delete",keys:r,trans:e}).then((n=>n.numFailures>0?Promise.reject(n.failures[0]):r.length<i?{failures:[],numFailures:0,lastResult:void 0}:u(e,{...t,lower:r[r.length-1],lowerOpen:!0},i)))))}}};return i}})};function Tu(e,t,r){try{if(!t)return null;if(t.keys.length<e.length)return null;const n=[];for(let i=0,o=0;i<t.keys.length&&o<e.length;++i)0===Bc(t.keys[i],e[o])&&(n.push(r?Is(t.values[i]):t.values[i]),++o);return n.length===e.length?n:null}catch(e){return null}}const Au={stack:"dbcore",level:-1,create:e=>({table:t=>{const r=e.table(t);return{...r,getMany:e=>{if(!e.cache)return r.getMany(e);const t=Tu(e.keys,e.trans._cache,"clone"===e.cache);return t?Aa.resolve(t):r.getMany(e).then((t=>(e.trans._cache={keys:e.keys,values:"clone"===e.cache?Is(t):t},t)))},mutate:e=>("add"!==e.type&&(e.trans._cache=null),r.mutate(e))}}})};function Nu(e){return!("from"in e)}const Mu=function(e,t){if(!this){const t=new Mu;return e&&"d"in e&&cs(t,e),t}cs(this,arguments.length?{d:1,from:e,to:arguments.length>1?t:e}:{d:0})};function Lu(e,t,r){const n=Bc(t,r);if(isNaN(n))return;if(n>0)throw RangeError();if(Nu(e))return cs(e,{from:t,to:r,d:1});const i=e.l,o=e.r;if(Bc(r,e.from)<0)return i?Lu(i,t,r):e.l={from:t,to:r,d:1,l:null,r:null},qu(e);if(Bc(t,e.to)>0)return o?Lu(o,t,r):e.r={from:t,to:r,d:1,l:null,r:null},qu(e);Bc(t,e.from)<0&&(e.from=t,e.l=null,e.d=o?o.d+1:1),Bc(r,e.to)>0&&(e.to=r,e.r=null,e.d=e.l?e.l.d+1:1);const s=!e.r;i&&!e.l&&Bu(e,i),o&&s&&Bu(e,o)}function Bu(e,t){Nu(t)||function e(t,{from:r,to:n,l:i,r:o}){Lu(t,r,n),i&&e(t,i),o&&e(t,o)}(e,t)}function Fu(e){let t=Nu(e)?null:{s:0,n:e};return{next(e){const r=arguments.length>0;for(;t;)switch(t.s){case 0:if(t.s=1,r)for(;t.n.l&&Bc(e,t.n.from)<0;)t={up:t,n:t.n.l,s:1};else for(;t.n.l;)t={up:t,n:t.n.l,s:1};case 1:if(t.s=2,!r||Bc(e,t.n.to)<=0)return{value:t.n,done:!1};case 2:if(t.n.r){t.s=3,t={up:t,n:t.n.r,s:0};continue}case 3:t=t.up}return{done:!0}}}}function qu(e){var t,r;const n=((null===(t=e.r)||void 0===t?void 0:t.d)||0)-((null===(r=e.l)||void 0===r?void 0:r.d)||0),i=n>1?"r":n<-1?"l":"";if(i){const t="r"===i?"l":"r",r={...e},n=e[i];e.from=n.from,e.to=n.to,e[i]=n[i],r[i]=n[t],e[t]=r,r.d=Uu(r)}e.d=Uu(e)}function Uu({r:e,l:t}){return(e?t?Math.max(e.d,t.d):e.d:t?t.d:0)+1}ds(Mu.prototype,{add(e){return Bu(this,e),this},addKey(e){return Lu(this,e,e),this},addKeys(e){return e.forEach((e=>Lu(this,e,e))),this},[Ns](){return Fu(this)}});const Ku={stack:"dbcore",level:0,create:e=>{const t=e.schema.name,r=new Mu(e.MIN_KEY,e.MAX_KEY);return{...e,table:n=>{const i=e.table(n),{schema:o}=i,{primaryKey:s}=o,{extractKey:a,outbound:c}=s,u={...i,mutate:e=>{const s=e.trans,a=s.mutatedParts||(s.mutatedParts={}),c=e=>{const r=`idb://${t}/${n}/${e}`;return a[r]||(a[r]=new Mu)},u=c(""),l=c(":dels"),{type:h}=e;let[d,f]="deleteRange"===e.type?[e.range]:"delete"===e.type?[e.keys]:e.values.length<50?[[],e.values]:[];const p=e.trans._cache;return i.mutate(e).then((e=>{if(as(d)){"delete"!==h&&(d=e.results),u.addKeys(d);const t=Tu(d,p);t||"add"===h||l.addKeys(d),(t||f)&&function(e,t,r,n){t.indexes.forEach((function(t){const i=e(t.name||"");function o(e){return null!=e?t.extractKey(e):null}const s=e=>t.multiEntry&&as(e)?e.forEach((e=>i.addKey(e))):i.addKey(e);(r||n).forEach(((e,t)=>{const i=r&&o(r[t]),a=n&&o(n[t]);0!==Bc(i,a)&&(null!=i&&s(i),null!=a&&s(a))}))}))}(c,o,t,f)}else if(d){const e={from:d.lower,to:d.upper};l.add(e),u.add(e)}else u.add(r),l.add(r),o.indexes.forEach((e=>c(e.name).add(r)));return e}))}},l=({query:{index:t,range:r}})=>{var n,i;return[t,new Mu(null!==(n=r.lower)&&void 0!==n?n:e.MIN_KEY,null!==(i=r.upper)&&void 0!==i?i:e.MAX_KEY)]},h={get:e=>[s,new Mu(e.key)],getMany:e=>[s,(new Mu).addKeys(e.keys)],count:l,query:l,openCursor:l};return ss(h).forEach((e=>{u[e]=function(o){const{subscr:s}=Da;if(s){const u=e=>{const r=`idb://${t}/${n}/${e}`;return s[r]||(s[r]=new Mu)},l=u(""),d=u(":dels"),[f,p]=h[e](o);if(u(f.name||"").add(p),!f.isPrimaryKey){if("count"!==e){const t="query"===e&&c&&o.values&&i.query({...o,values:!1});return i[e].apply(this,arguments).then((r=>{if("query"===e){if(c&&o.values)return t.then((({result:e})=>(l.addKeys(e),r)));const e=o.values?r.result.map(a):r.result;o.values?l.addKeys(e):d.addKeys(e)}else if("openCursor"===e){const e=r,t=o.values;return e&&Object.create(e,{key:{get:()=>(d.addKey(e.primaryKey),e.key)},primaryKey:{get(){const t=e.primaryKey;return d.addKey(t),t}},value:{get:()=>(t&&l.addKey(e.primaryKey),e.value)}})}return r}))}d.add(r)}}return i[e].apply(this,arguments)}})),u}}}};class Vu{constructor(e,t){this._middlewares={},this.verno=0;const r=Vu.dependencies;this._options=t={addons:Vu.addons,autoOpen:!0,indexedDB:r.indexedDB,IDBKeyRange:r.IDBKeyRange,...t},this._deps={indexedDB:t.indexedDB,IDBKeyRange:t.IDBKeyRange};const{addons:n}=t;this._dbSchema={},this._versions=[],this._storeNames=[],this._allTables={},this.idbdb=null,this._novip=this;const i={dbOpenError:null,isBeingOpened:!1,onReadyBeingFired:null,openComplete:!1,dbReadyResolve:oa,dbReadyPromise:null,cancelOpen:oa,openCanceller:null,autoSchema:!0,PR1398_maxLoop:3};var o;i.dbReadyPromise=new Aa((e=>{i.dbReadyResolve=e})),i.openCanceller=new Aa(((e,t)=>{i.cancelOpen=t})),this._state=i,this.name=e,this.on=$c(this,"populate","blocked","versionchange","close",{ready:[fa,oa]}),this.on.ready.subscribe=ws(this.on.ready.subscribe,(e=>(t,r)=>{Vu.vip((()=>{const n=this._state;if(n.openComplete)n.dbOpenError||Aa.resolve().then(t),r&&e(t);else if(n.onReadyBeingFired)n.onReadyBeingFired.push(t),r&&e(t);else{e(t);const n=this;r||e((function e(){n.on.ready.unsubscribe(t),n.on.ready.unsubscribe(e)}))}}))})),this.Collection=(o=this,Dc(Uc.prototype,(function(e,t){this.db=o;let r=xc,n=null;if(t)try{r=t()}catch(e){n=e}const i=e._ctx,s=i.table,a=s.hook.reading.fire;this._ctx={table:s,index:i.index,isPrimKey:!i.index||s.schema.primKey.keyPath&&i.index===s.schema.primKey.name,range:r,keysOnly:!1,dir:"next",unique:"",algorithm:null,filter:null,replayFilter:null,justLimit:!0,isMatch:null,offset:0,limit:1/0,error:n,or:i.or,valueMapper:a!==sa?a:null}}))),this.Table=function(e){return Dc(Rc.prototype,(function(t,r,n){this.db=e,this._tx=n,this.name=t,this.schema=r,this.hook=e._allTables[t]?e._allTables[t].hook:$c(null,{creating:[ua,oa],reading:[aa,sa],updating:[ha,oa],deleting:[la,oa]})}))}(this),this.Transaction=function(e){return Dc(ru.prototype,(function(t,r,n,i,o){this.db=e,this.mode=t,this.storeNames=r,this.schema=n,this.chromeTransactionDurability=i,this.idbtrans=null,this.on=$c(this,"complete","error","abort"),this.parent=o||null,this.active=!0,this._reculock=0,this._blockedFuncs=[],this._resolve=null,this._reject=null,this._waitingFor=null,this._waitingQueue=null,this._spinCount=0,this._completion=new Aa(((e,t)=>{this._resolve=e,this._reject=t})),this._completion.then((()=>{this.active=!1,this.on.complete.fire()}),(e=>{var t=this.active;return this.active=!1,this.on.error.fire(e),this.parent?this.parent._reject(e):t&&this.idbtrans&&this.idbtrans.abort(),yc(e)}))}))}(this),this.Version=function(e){return Dc(Eu.prototype,(function(t){this.db=e,this._cfg={version:t,storesSource:null,dbschema:{},tables:{},contentUpgrade:null}}))}(this),this.WhereClause=function(e){return Dc(Xc.prototype,(function(t,r,n){this.db=e,this._ctx={table:t,index:":id"===r?null:r,or:n};const i=e._deps.indexedDB;if(!i)throw new ra.MissingAPI;this._cmp=this._ascending=i.cmp.bind(i),this._descending=(e,t)=>i.cmp(t,e),this._max=(e,t)=>i.cmp(e,t)>0?e:t,this._min=(e,t)=>i.cmp(e,t)<0?e:t,this._IDBKeyRange=e._deps.IDBKeyRange}))}(this),this.on("versionchange",(e=>{e.newVersion>0?console.warn(`Another connection wants to upgrade database '${this.name}'. Closing db now to resume the upgrade.`):console.warn(`Another connection wants to delete database '${this.name}'. Closing db now to resume the delete request.`),this.close()})),this.on("blocked",(e=>{!e.newVersion||e.newVersion<e.oldVersion?console.warn(`Dexie.delete('${this.name}') was blocked`):console.warn(`Upgrade '${this.name}' blocked by other connection holding version ${e.oldVersion/10}`)})),this._maxKey=su(t.IDBKeyRange),this._createTransaction=(e,t,r,n)=>new this.Transaction(e,t,r,this._options.chromeTransactionDurability,n),this._fireOnBlocked=e=>{this.on("blocked").fire(e),wc.filter((e=>e.name===this.name&&e!==this&&!e._state.vcFired)).map((t=>t.on("versionchange").fire(e)))},this.use(Du),this.use(ju),this.use(Ku),this.use(Au),this.vip=Object.create(this,{_vip:{value:!0}}),n.forEach((e=>e(this)))}version(e){if(isNaN(e)||e<.1)throw new ra.Type("Given version is not a positive number");if(e=Math.round(10*e)/10,this.idbdb||this._state.isBeingOpened)throw new ra.Schema("Cannot add version when database is open");this.verno=Math.max(this.verno,e);const t=this._versions;var r=t.filter((t=>t._cfg.version===e))[0];return r||(r=new this.Version(e),t.push(r),t.sort(mu),r.stores({}),this._state.autoSchema=!1,r)}_whenReady(e){return this.idbdb&&(this._state.openComplete||Da.letThrough||this._vip)?e():new Aa(((e,t)=>{if(this._state.openComplete)return t(new ra.DatabaseClosed(this._state.dbOpenError));if(!this._state.isBeingOpened){if(!this._options.autoOpen)return void t(new ra.DatabaseClosed);this.open().catch(oa)}this._state.dbReadyPromise.then(e,t)})).then(e)}use({stack:e,create:t,level:r,name:n}){n&&this.unuse({stack:e,name:n});const i=this._middlewares[e]||(this._middlewares[e]=[]);return i.push({stack:e,create:t,level:null==r?10:r,name:n}),i.sort(((e,t)=>e.level-t.level)),this}unuse({stack:e,name:t,create:r}){return e&&this._middlewares[e]&&(this._middlewares[e]=this._middlewares[e].filter((e=>r?e.create!==r:!!t&&e.name!==t))),this}open(){return function(e){const t=e._state,{indexedDB:r}=e._deps;if(t.isBeingOpened||e.idbdb)return t.dbReadyPromise.then((()=>t.dbOpenError?yc(t.dbOpenError):e));qs&&(t.openCanceller._stackHolder=Hs()),t.isBeingOpened=!0,t.dbOpenError=null,t.openComplete=!1;const n=t.openCanceller;function i(){if(t.openCanceller!==n)throw new ra.DatabaseClosed("db.open() was cancelled")}let o=t.dbReadyResolve,s=null,a=!1;return Aa.race([n,("undefined"==typeof navigator?Aa.resolve():xu()).then((()=>new Aa(((n,o)=>{if(i(),!r)throw new ra.MissingAPI;const c=e.name,u=t.autoSchema?r.open(c):r.open(c,Math.round(10*e.verno));if(!u)throw new ra.MissingAPI;u.onerror=Zc(o),u.onblocked=Ja(e._fireOnBlocked),u.onupgradeneeded=Ja((n=>{if(s=u.transaction,t.autoSchema&&!e._options.allowEmptyDB){u.onerror=eu,s.abort(),u.result.close();const e=r.deleteDatabase(c);e.onsuccess=e.onerror=Ja((()=>{o(new ra.NoSuchDatabase(`Database ${c} doesnt exist`))}))}else{s.onerror=Zc(o);var i=n.oldVersion>Math.pow(2,62)?0:n.oldVersion;a=i<1,e._novip.idbdb=u.result,yu(e,i/10,s,o)}}),o),u.onsuccess=Ja((()=>{s=null;const r=e._novip.idbdb=u.result,i=bs(r.objectStoreNames);if(i.length>0)try{const n=r.transaction(1===(o=i).length?o[0]:o,"readonly");t.autoSchema?function({_novip:e},t,r){e.verno=t.version/10;const n=e._dbSchema=wu(0,t,r);e._storeNames=bs(t.objectStoreNames,0),fu(e,[e._allTables],ss(n),n)}(e,r,n):(_u(e,e._dbSchema,n),function(e,t){const r=vu(wu(0,e.idbdb,t),e._dbSchema);return!(r.add.length||r.change.some((e=>e.add.length||e.change.length)))}(e,n)||console.warn("Dexie SchemaDiff: Schema was extended without increasing the number passed to db.version(). Some queries may fail.")),du(e,n)}catch(e){}var o;wc.push(e),r.onversionchange=Ja((r=>{t.vcFired=!0,e.on("versionchange").fire(r)})),r.onclose=Ja((t=>{e.on("close").fire(t)})),a&&function({indexedDB:e,IDBKeyRange:t},r){!Cu(e)&&"__dbnames"!==r&&Su(e,t).put({name:r}).catch(oa)}(e._deps,c),n()}),o)}))))]).then((()=>(i(),t.onReadyBeingFired=[],Aa.resolve(ku((()=>e.on.ready.fire(e.vip)))).then((function r(){if(t.onReadyBeingFired.length>0){let n=t.onReadyBeingFired.reduce(fa,oa);return t.onReadyBeingFired=[],Aa.resolve(ku((()=>n(e.vip)))).then(r)}}))))).finally((()=>{t.onReadyBeingFired=null,t.isBeingOpened=!1})).then((()=>e)).catch((r=>{t.dbOpenError=r;try{s&&s.abort()}catch(e){}return n===t.openCanceller&&e._close(),yc(r)})).finally((()=>{t.openComplete=!0,o()}))}(this)}_close(){const e=this._state,t=wc.indexOf(this);if(t>=0&&wc.splice(t,1),this.idbdb){try{this.idbdb.close()}catch(e){}this._novip.idbdb=null}e.dbReadyPromise=new Aa((t=>{e.dbReadyResolve=t})),e.openCanceller=new Aa(((t,r)=>{e.cancelOpen=r}))}close(){this._close();const e=this._state;this._options.autoOpen=!1,e.dbOpenError=new ra.DatabaseClosed,e.isBeingOpened&&e.cancelOpen(e.dbOpenError)}delete(){const e=arguments.length>0,t=this._state;return new Aa(((r,n)=>{const i=()=>{this.close();var e=this._deps.indexedDB.deleteDatabase(this.name);e.onsuccess=Ja((()=>{!function({indexedDB:e,IDBKeyRange:t},r){!Cu(e)&&"__dbnames"!==r&&Su(e,t).delete(r).catch(oa)}(this._deps,this.name),r()})),e.onerror=Zc(n),e.onblocked=this._fireOnBlocked};if(e)throw new ra.InvalidArgument("Arguments not allowed in db.delete()");t.isBeingOpened?t.dbReadyPromise.then(i):i()}))}backendDB(){return this.idbdb}isOpen(){return null!==this.idbdb}hasBeenClosed(){const e=this._state.dbOpenError;return e&&"DatabaseClosed"===e.name}hasFailed(){return null!==this._state.dbOpenError}dynamicallyOpened(){return this._state.autoSchema}get tables(){return ss(this._allTables).map((e=>this._allTables[e]))}transaction(){const e=Pu.apply(this,arguments);return this._transaction.apply(this,e)}_transaction(e,t,r){let n=Da.trans;n&&n.db===this&&-1===e.indexOf("!")||(n=null);const i=-1!==e.indexOf("?");let o,s;e=e.replace("!","").replace("?","");try{if(s=t.map((e=>{var t=e instanceof this.Table?e.name:e;if("string"!=typeof t)throw new TypeError("Invalid table argument to Dexie.transaction(). Only Table or String are allowed");return t})),"r"==e||"readonly"===e)o="readonly";else{if("rw"!=e&&"readwrite"!=e)throw new ra.InvalidArgument("Invalid transaction mode: "+e);o="readwrite"}if(n){if("readonly"===n.mode&&"readwrite"===o){if(!i)throw new ra.SubTransaction("Cannot enter a sub-transaction with READWRITE mode when parent transaction is READONLY");n=null}n&&s.forEach((e=>{if(n&&-1===n.storeNames.indexOf(e)){if(!i)throw new ra.SubTransaction("Table "+e+" not included in parent transaction.");n=null}})),i&&n&&!n.active&&(n=null)}}catch(e){return n?n._promise(null,((t,r)=>{r(e)})):yc(e)}const a=Ru.bind(null,this,o,s,n,r);return n?n._promise(o,a,"lock"):Da.trans?hc(Da.transless,(()=>this._whenReady(a))):this._whenReady(a)}table(e){if(!hs(this._allTables,e))throw new ra.InvalidTable(`Table ${e} does not exist`);return this._allTables[e]}}const Hu="undefined"!=typeof Symbol&&"observable"in Symbol?Symbol.observable:"@@observable";class zu{constructor(e){this._subscribe=e}subscribe(e,t,r){return this._subscribe(e&&"function"!=typeof e?e:{next:e,error:t,complete:r})}[Hu](){return this}}function Wu(e,t){return ss(t).forEach((r=>{Bu(e[r]||(e[r]=new Mu),t[r])})),e}let Qu;try{Qu={indexedDB:os.indexedDB||os.mozIndexedDB||os.webkitIndexedDB||os.msIndexedDB,IDBKeyRange:os.IDBKeyRange||os.webkitIDBKeyRange}}catch(os){Qu={indexedDB:null,IDBKeyRange:null}}const Gu=Vu;function Ju(e){let t=Yu;try{Yu=!0,tu.storagemutated.fire(e)}finally{Yu=t}}ds(Gu,{...ia,delete:e=>new Gu(e,{addons:[]}).delete(),exists:e=>new Gu(e,{addons:[]}).open().then((e=>(e.close(),!0))).catch("NoSuchDatabaseError",(()=>!1)),getDatabaseNames(e){try{return function({indexedDB:e,IDBKeyRange:t}){return Cu(e)?Promise.resolve(e.databases()).then((e=>e.map((e=>e.name)).filter((e=>"__dbnames"!==e)))):Su(e,t).toCollection().primaryKeys()}(Gu.dependencies).then(e)}catch(e){return yc(new ra.MissingAPI)}},defineClass:()=>function(e){cs(this,e)},ignoreTransaction:e=>Da.trans?hc(Da.transless,e):e(),vip:ku,async:function(e){return function(){try{var t=Ou(e.apply(this,arguments));return t&&"function"==typeof t.then?t:Aa.resolve(t)}catch(e){return yc(e)}}},spawn:function(e,t,r){try{var n=Ou(e.apply(r,t||[]));return n&&"function"==typeof n.then?n:Aa.resolve(n)}catch(e){return yc(e)}},currentTransaction:{get:()=>Da.trans||null},waitFor:function(e,t){const r=Aa.resolve("function"==typeof e?Gu.ignoreTransaction(e):e).timeout(t||6e4);return Da.trans?Da.trans.waitFor(r):r},Promise:Aa,debug:{get:()=>qs,set:e=>{Us(e,"dexie"===e?()=>!0:Cc)}},derive:ms,extend:cs,props:ds,override:ws,Events:$c,on:tu,liveQuery:function(e){return new zu((t=>{const r=Fs(e);let n=!1,i={},o={};const s={get closed(){return n},unsubscribe:()=>{n=!0,tu.storagemutated.unsubscribe(l)}};t.start&&t.start(s);let a=!1,c=!1;function u(){return ss(o).some((e=>i[e]&&function(e,t){const r=Fu(t);let n=r.next();if(n.done)return!1;let i=n.value;const o=Fu(e);let s=o.next(i.from),a=s.value;for(;!n.done&&!s.done;){if(Bc(a.from,i.to)<=0&&Bc(a.to,i.from)>=0)return!0;Bc(i.from,a.from)<0?i=(n=r.next(a.from)).value:a=(s=o.next(i.from)).value}return!1}(i[e],o[e])))}const l=e=>{Wu(i,e),u()&&h()},h=()=>{if(a||n)return;i={};const d={},f=function(t){r&&ic();const n=()=>nc(e,{subscr:t,trans:null}),i=Da.trans?hc(Da.transless,n):n();return r&&i.then(oc,oc),i}(d);c||(tu("storagemutated",l),c=!0),a=!0,Promise.resolve(f).then((e=>{a=!1,n||(u()?h():(i={},o=d,t.next&&t.next(e)))}),(e=>{["DatabaseClosedError","AbortError"].includes(null==e?void 0:e.name)||(a=!1,t.error&&t.error(e),s.unsubscribe())}))};return h(),s}))},extendObservabilitySet:Wu,getByKeyPath:Cs,setByKeyPath:ks,delByKeyPath:function(e,t){"string"==typeof t?ks(e,t,void 0):"length"in t&&[].map.call(t,(function(t){ks(e,t,void 0)}))},shallowClone:xs,deepClone:Is,getObjectDiff:Iu,cmp:Bc,asap:Es,minKey:-1/0,addons:[],connections:wc,errnames:ea,dependencies:Qu,semVer:"4.0.0-alpha.4",version:"4.0.0-alpha.4".split(".").map((e=>parseInt(e))).reduce(((e,t,r)=>e+t/Math.pow(10,2*r)))}),Gu.maxKey=su(Gu.dependencies.IDBKeyRange),"undefined"!=typeof dispatchEvent&&"undefined"!=typeof addEventListener&&(tu("storagemutated",(e=>{if(!Yu){let t;_c?(t=document.createEvent("CustomEvent"),t.initCustomEvent("x-storagemutated-1",!0,!0,e)):t=new CustomEvent("x-storagemutated-1",{detail:e}),Yu=!0,dispatchEvent(t),Yu=!1}})),addEventListener("x-storagemutated-1",(({detail:e})=>{Yu||Ju(e)})));let Yu=!1;if("undefined"!=typeof BroadcastChannel){const e=new BroadcastChannel("x-storagemutated-1");"function"==typeof e.unref&&e.unref(),tu("storagemutated",(t=>{Yu||e.postMessage(t)})),e.onmessage=e=>{e.data&&Ju(e.data)}}else if("undefined"!=typeof self&&"undefined"!=typeof navigator){tu("storagemutated",(e=>{try{Yu||("undefined"!=typeof localStorage&&localStorage.setItem("x-storagemutated-1",JSON.stringify({trig:Math.random(),changedParts:e})),"object"==typeof self.clients&&[...self.clients.matchAll({includeUncontrolled:!0})].forEach((t=>t.postMessage({type:"x-storagemutated-1",changedParts:e}))))}catch(e){}})),"undefined"!=typeof addEventListener&&addEventListener("storage",(e=>{if("x-storagemutated-1"===e.key){const t=JSON.parse(e.newValue);t&&Ju(t.changedParts)}}));const e=self.document&&navigator.serviceWorker;e&&e.addEventListener("message",(function({data:e}){e&&"x-storagemutated-1"===e.type&&Ju(e.changedParts)}))}Aa.rejectionMapper=function(e,t){if(!e||e instanceof Js||e instanceof TypeError||e instanceof SyntaxError||!e.name||!na[e.name])return e;var r=new na[e.name](t||e.message,e);return"stack"in e&&ps(r,"stack",{get:function(){return this.inner.stack}}),r},Us(qs,Cc);var Xu="docs",Zu="deleted-docs",el="dexie",tl={prepareQuery(e,t){if(!t.sort)throw I("SNH",{query:t});return{query:t,queryPlan:Er(e,t)}},checkpointSchema:{type:"object",properties:{id:{type:"string"},lwt:{type:"number"}},required:["id","lwt"],additionalProperties:!1}},rl=new Map,nl=new Map,il="__";function ol(e){var t=e.split(".");if(t.length>1)return t.map((e=>ol(e))).join(".");if(e.startsWith("|")){var r=e.substring(1);return il+r}return e}function sl(e){var t=e.split(".");return t.length>1?t.map((e=>sl(e))).join("."):e.startsWith(il)?"|"+e.substring(il.length):e}function al(e){if(!e||"string"==typeof e||"number"==typeof e||"boolean"==typeof e)return e;if(Array.isArray(e))return e.map((e=>al(e)));if("object"==typeof e){var t={};return Object.entries(e).forEach((([e,r])=>{"object"==typeof r&&(r=al(r)),t[ol(e)]=r})),t}}function cl(e){if(!e||"string"==typeof e||"number"==typeof e||"boolean"==typeof e)return e;if(Array.isArray(e))return e.map((e=>cl(e)));if("object"==typeof e){var t={};return Object.entries(e).forEach((([r,n])=>{("object"==typeof n||Array.isArray(e))&&(n=cl(n)),t[sl(r)]=n})),t}}async function ul(e,t){var r=await e,[n,i]=await Promise.all([r.dexieTable.bulkGet(t),r.dexieDeletedTable.bulkGet(t)]),o=i.slice(0);return n.forEach(((e,t)=>{e&&(o[t]=e)})),o}function ll(e){return e===_r?-1/0:e}function hl(e,t){if(!t){if("undefined"==typeof window)throw new Error("IDBKeyRange missing");t=window.IDBKeyRange}var r,n=e.startKeys.map(ll),i=e.endKeys.map(ll);if(1===e.index.length){var o=n[0]===i[0];r=t.bound(n[0],i[0],!o&&!e.inclusiveStart,!o&&!e.inclusiveEnd)}else r=t.bound(n,i,!e.inclusiveStart,!e.inclusiveEnd);return r}async function dl(e,t){var r=await e.internals,n=t.query,i=n.skip?n.skip:0,o=i+(n.limit?n.limit:1/0),s=t.queryPlan,a=!1;s.selectorSatisfiedByIndex||(a=Yi(e.schema,t.query));var c=hl(s,r.dexieDb._options.IDBKeyRange),u=s.index,l=[];if(await r.dexieDb.transaction("r",r.dexieTable,(async t=>{var r,n,i=t.idbtrans.objectStore(Xu);1===u.length&&u[0]===e.primaryPath?r=i:(n=1===u.length?ol(u[0]):"["+u.map((e=>ol(e))).join("+")+"]",r=i.index(n));var h=r.openCursor(c);await new Promise((e=>{h.onsuccess=function(t){var r=t.target.result;if(r){var n=cl(r.value);n._deleted||a&&!a(n)||l.push(n),s.sortFieldsSameAsIndexFields&&l.length===o?e():r.continue()}else e()}}))})),!s.sortFieldsSameAsIndexFields){var h=Ji(e.schema,t.query);l=l.sort(h)}return{documents:l=l.slice(i,o)}}var fl=Array.isArray;function pl(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=rt(e),n=nt(e,1/0);return e=function(e){return 1===e.length&&fl(e[0])?e[0]:e}(e),re((function(t,i){et(n)(at(ce([t],ae(e)),r)).subscribe(i)}))}Promise.resolve(!1);var ml=Promise.resolve(!0),yl=Promise.resolve();function vl(e,t){return e||(e=0),new Promise((function(r){return setTimeout((function(){return r(t)}),e)}))}function gl(){return Math.random().toString(36).substring(2)}var bl=0;function wl(){var e=1e3*Date.now();return e<=bl&&(e=bl+1),bl=e,e}var _l={create:function(e){var t={time:wl(),messagesCallback:null,bc:new BroadcastChannel(e),subFns:[]};return t.bc.onmessage=function(e){t.messagesCallback&&t.messagesCallback(e.data)},t},close:function(e){e.bc.close(),e.subFns=[]},onMessage:function(e,t){e.messagesCallback=t},postMessage:function(e,t){try{return e.bc.postMessage(t,!1),yl}catch(e){return Promise.reject(e)}},canBeUsed:function(){if("undefined"!=typeof globalThis&&globalThis.Deno&&globalThis.Deno.args)return!0;if("undefined"==typeof window&&"undefined"==typeof self||"function"!=typeof BroadcastChannel)return!1;if(BroadcastChannel._pubkey)throw new Error("BroadcastChannel: Do not overwrite window.BroadcastChannel with this module, this is not a polyfill");return!0},type:"native",averageResponseTime:function(){return 150},microSeconds:wl};function El(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=JSON.parse(JSON.stringify(e));return void 0===t.webWorkerSupport&&(t.webWorkerSupport=!0),t.idb||(t.idb={}),t.idb.ttl||(t.idb.ttl=45e3),t.idb.fallbackInterval||(t.idb.fallbackInterval=150),e.idb&&"function"==typeof e.idb.onclose&&(t.idb.onclose=e.idb.onclose),t.localstorage||(t.localstorage={}),t.localstorage.removeTimeout||(t.localstorage.removeTimeout=6e4),e.methods&&(t.methods=e.methods),t.node||(t.node={}),t.node.ttl||(t.node.ttl=12e4),t.node.maxParallelWrites||(t.node.maxParallelWrites=2048),void 0===t.node.useFastPath&&(t.node.useFastPath=!0),t}var Sl="messages",Cl={durability:"relaxed"};function kl(){if("undefined"!=typeof indexedDB)return indexedDB;if("undefined"!=typeof window){if(void 0!==window.mozIndexedDB)return window.mozIndexedDB;if(void 0!==window.webkitIndexedDB)return window.webkitIndexedDB;if(void 0!==window.msIndexedDB)return window.msIndexedDB}return!1}function xl(e){e.commit&&e.commit()}function Ol(e){e.closed||Pl(e).then((function(){return vl(e.options.idb.fallbackInterval)})).then((function(){return Ol(e)}))}function Pl(e){return e.closed?yl:e.messagesCallback?function(e,t){var r=e.transaction(Sl,"readonly",Cl),n=r.objectStore(Sl),i=[],o=IDBKeyRange.bound(t+1,1/0);if(n.getAll){var s=n.getAll(o);return new Promise((function(e,t){s.onerror=function(e){return t(e)},s.onsuccess=function(t){e(t.target.result)}}))}return new Promise((function(e,s){var a=function(){try{return o=IDBKeyRange.bound(t+1,1/0),n.openCursor(o)}catch(e){return n.openCursor()}}();a.onerror=function(e){return s(e)},a.onsuccess=function(n){var o=n.target.result;o?o.value.id<t+1?o.continue(t+1):(i.push(o.value),o.continue()):(xl(r),e(i))}}))}(e.db,e.lastCursorId).then((function(t){var r=t.filter((function(e){return!!e})).map((function(t){return t.id>e.lastCursorId&&(e.lastCursorId=t.id),t})).filter((function(t){return function(e,t){return!(e.uuid===t.uuid||t.eMIs.has(e.id)||e.data.time<t.messagesCallbackTime)}(t,e)})).sort((function(e,t){return e.time-t.time}));return r.forEach((function(t){e.messagesCallback&&(e.eMIs.add(t.id),e.messagesCallback(t.data))})),yl})):yl}var Rl={create:function(e,t){return t=El(t),function(e){var t="pubkey.broadcast-channel-0-"+e,r=kl().open(t);return r.onupgradeneeded=function(e){e.target.result.createObjectStore(Sl,{keyPath:"id",autoIncrement:!0})},new Promise((function(e,t){r.onerror=function(e){return t(e)},r.onsuccess=function(){e(r.result)}}))}(e).then((function(r){var n={closed:!1,lastCursorId:0,channelName:e,options:t,uuid:gl(),eMIs:new Go(2*t.idb.ttl),writeBlockPromise:yl,messagesCallback:null,readQueuePromises:[],db:r};return r.onclose=function(){n.closed=!0,t.idb.onclose&&t.idb.onclose()},Ol(n),n}))},close:function(e){e.closed=!0,e.db.close()},onMessage:function(e,t,r){e.messagesCallbackTime=r,e.messagesCallback=t,Pl(e)},postMessage:function(e,t){return e.writeBlockPromise=e.writeBlockPromise.then((function(){return function(e,t,r){var n={uuid:t,time:Date.now(),data:r},i=e.transaction([Sl],"readwrite",Cl);return new Promise((function(e,t){i.oncomplete=function(){return e()},i.onerror=function(e){return t(e)},i.objectStore(Sl).add(n),xl(i)}))}(e.db,e.uuid,t)})).then((function(){0===(0,10,Math.floor(11*Math.random()+0))&&function(e){return(t=e.db,r=e.options.idb.ttl,n=Date.now()-r,i=t.transaction(Sl,"readonly",Cl),o=i.objectStore(Sl),s=[],new Promise((function(e){o.openCursor().onsuccess=function(t){var r=t.target.result;if(r){var o=r.value;o.time<n?(s.push(o),r.continue()):(xl(i),e(s))}else e(s)}}))).then((function(t){return function(e,t){if(e.closed)return Promise.resolve([]);var r=e.db.transaction(Sl,"readwrite",Cl).objectStore(Sl);return Promise.all(t.map((function(e){var t=r.delete(e);return new Promise((function(e){t.onsuccess=function(){return e()}}))})))}(e,t.map((function(e){return e.id})))}));var t,r,n,i,o,s}(e)})),e.writeBlockPromise},canBeUsed:function(){return!!kl()},type:"idb",averageResponseTime:function(e){return 2*e.idb.fallbackInterval},microSeconds:wl};function $l(){var e;if("undefined"==typeof window)return null;try{e=window.localStorage,e=window["ie8-eventlistener/storage"]||window.localStorage}catch(e){}return e}function Dl(e){return"pubkey.broadcastChannel-"+e}function Il(){var e=$l();if(!e)return!1;try{var t="__broadcastchannel_check";e.setItem(t,"works"),e.removeItem(t)}catch(e){return!1}return!0}var jl={create:function(e,t){if(t=El(t),!Il())throw new Error("BroadcastChannel: localstorage cannot be used");var r=gl(),n=new Go(t.localstorage.removeTimeout),i={channelName:e,uuid:r,eMIs:n};return i.listener=function(e,t){var o=Dl(e),s=function(e){var t;e.key===o&&(t=JSON.parse(e.newValue),i.messagesCallback&&t.uuid!==r&&t.token&&!n.has(t.token)&&(t.data.time&&t.data.time<i.messagesCallbackTime||(n.add(t.token),i.messagesCallback(t.data))))};return window.addEventListener("storage",s),s}(e),i},close:function(e){var t;t=e.listener,window.removeEventListener("storage",t)},onMessage:function(e,t,r){e.messagesCallbackTime=r,e.messagesCallback=t},postMessage:function(e,t){return new Promise((function(r){vl().then((function(){var n=Dl(e.channelName),i={token:gl(),time:Date.now(),data:t,uuid:e.uuid},o=JSON.stringify(i);$l().setItem(n,o);var s=document.createEvent("Event");s.initEvent("storage",!0,!0),s.key=n,s.newValue=o,window.dispatchEvent(s),r()}))}))},canBeUsed:Il,type:"localstorage",averageResponseTime:function(){var e=navigator.userAgent.toLowerCase();return e.includes("safari")&&!e.includes("chrome")?240:120},microSeconds:wl},Tl=wl,Al=new Set,Nl={create:function(e){var t={time:Tl(),name:e,messagesCallback:null};return Al.add(t),t},close:function(e){Al.delete(e)},onMessage:function(e,t){e.messagesCallback=t},postMessage:function(e,t){return new Promise((function(r){return setTimeout((function(){Array.from(Al).forEach((function(r){r.name===e.name&&r!==e&&r.messagesCallback&&r.time<t.time&&r.messagesCallback(t)})),r()}),5)}))},canBeUsed:function(){return!0},type:"simulate",averageResponseTime:function(){return 5},microSeconds:Tl},Ml=[_l,Rl,jl],Ll=new Set,Bl=0,Fl=function(e,t){var r,n,i;this.id=Bl++,Ll.add(this),this.name=e,this.options=El(t),this.method=function(e){var t=[].concat(e.methods,Ml).filter(Boolean);if(e.type){if("simulate"===e.type)return Nl;var r=t.find((function(t){return t.type===e.type}));if(r)return r;throw new Error("method-type "+e.type+" not found")}e.webWorkerSupport||(t=t.filter((function(e){return"idb"!==e.type})));var n=t.find((function(e){return e.canBeUsed()}));if(n)return n;throw new Error("No usable method found in "+JSON.stringify(Ml.map((function(e){return e.type}))))}(this.options),this._iL=!1,this._onML=null,this._addEL={message:[],internal:[]},this._uMP=new Set,this._befC=[],this._prepP=null,(i=n=(r=this).method.create(r.name,r.options))&&"function"==typeof i.then?(r._prepP=n,n.then((function(e){r._state=e}))):r._state=n};function ql(e,t,r){var n={time:e.method.microSeconds(),type:t,data:r};return(e._prepP?e._prepP:yl).then((function(){var t=e.method.postMessage(e._state,n);return e._uMP.add(t),t.catch().then((function(){return e._uMP.delete(t)})),t}))}function Ul(e){return e._addEL.message.length>0||e._addEL.internal.length>0}function Kl(e,t,r){e._addEL[t].push(r),function(e){if(!e._iL&&Ul(e)){var t=function(t){e._addEL[t.type].forEach((function(e){t.time>=e.time&&e.fn(t.data)}))},r=e.method.microSeconds();e._prepP?e._prepP.then((function(){e._iL=!0,e.method.onMessage(e._state,t,r)})):(e._iL=!0,e.method.onMessage(e._state,t,r))}}(e)}function Vl(e,t,r){e._addEL[t]=e._addEL[t].filter((function(e){return e!==r})),function(e){if(e._iL&&!Ul(e)){e._iL=!1;var t=e.method.microSeconds();e.method.onMessage(e._state,null,t)}}(e)}Fl._pubkey=!0,Fl.prototype={postMessage:function(e){if(this.closed)throw new Error("BroadcastChannel.postMessage(): Cannot post message after channel has closed "+JSON.stringify(e));return ql(this,"message",e)},postInternal:function(e){return ql(this,"internal",e)},set onmessage(e){var t={time:this.method.microSeconds(),fn:e};Vl(this,"message",this._onML),e&&"function"==typeof e?(this._onML=t,Kl(this,"message",t)):this._onML=null},addEventListener:function(e,t){Kl(this,e,{time:this.method.microSeconds(),fn:t})},removeEventListener:function(e,t){Vl(this,e,this._addEL[e].find((function(e){return e.fn===t})))},close:function(){var e=this;if(!this.closed){Ll.delete(this),this.closed=!0;var t=this._prepP?this._prepP:yl;return this._onML=null,this._addEL.message=[],t.then((function(){return Promise.all(Array.from(e._uMP))})).then((function(){return Promise.all(e._befC.map((function(e){return e()})))})).then((function(){return e.method.close(e._state)}))}},get type(){return this.method.type},get isClosed(){return this.closed}};var Hl=new Map;function zl(e,t,r,n){var i=Hl.get(t);return i||(i={bc:new Fl(["RxDB:",e,r].join("|")),refs:new Set},Hl.set(t,i)),i.refs.add(n),i.bc}function Wl(e,t){var r=Hl.get(e);if(r)return r.refs.delete(t),0===r.refs.size?(Hl.delete(e),r.bc.close()):void 0}function Ql(e,t,r,n){if(t.multiInstance){var i=n||zl(e,t.databaseInstanceToken,r.databaseName,r),o=new ft,s=r=>{r.storageName===e&&r.databaseName===t.databaseName&&r.collectionName===t.collectionName&&r.version===t.schema.version&&o.next(r.eventBulk)};i.addEventListener("message",s);var a=r.changeStream(),c=!1,u=a.subscribe((r=>{c||i.postMessage({storageName:e,databaseName:t.databaseName,collectionName:t.collectionName,version:t.schema.version,eventBulk:r})}));r.changeStream=function(){return o.asObservable().pipe(function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return pl.apply(void 0,ce([],ae(e)))}(a))};var l=r.close.bind(r);r.close=async function(){return c=!0,u.unsubscribe(),i.removeEventListener("message",s),n||await Wl(t.databaseInstanceToken,r),l()};var h=r.remove.bind(r);r.remove=async function(){return c=!0,u.unsubscribe(),i.removeEventListener("message",s),n||await Wl(t.databaseInstanceToken,r),h()}}}var Gl=It(),Jl=function(){function t(e,t,r,n,i,o,s){this.changes$=new ft,this.instanceId=Gl++,this.storage=e,this.databaseName=t,this.collectionName=r,this.schema=n,this.internals=i,this.options=o,this.settings=s,this.primaryPath=G(this.schema.primaryKey)}var r=t.prototype;return r.bulkWrite=async function(t,r){Yl(this),t.forEach((e=>{if(!e.document._rev||e.previous&&!e.previous._rev)throw I("SNH",{args:{row:e}})}));var n,o=await this.internals,s={success:[],error:[]},a=t.map((e=>e.document[this.primaryPath]));if(await o.dexieDb.transaction("rw",o.dexieTable,o.dexieDeletedTable,(async()=>{var c=new Map;(await ul(this.internals,a)).forEach((e=>{var t=e?cl(e):e;return t&&c.set(t[this.primaryPath],t),t})),n=function(t,r,n,o,s,a,c){for(var u,l=!!t.schema.attachments,h=[],d=[],f=[],p={id:i(10),events:[],checkpoint:null,context:s,startTime:It(),endTime:0},m=p.events,y=[],v=[],g=[],b=n.size>0,w=o.length,_=function(){var t,i=o[E],s=i.document,a=i.previous,c=s[r],p=s._deleted,w=a&&a._deleted,_=void 0;if(b&&(_=n.get(c)),_){var S=_._rev;if(!a||a&&S!==a._rev){var C={isError:!0,status:409,documentId:c,writeRow:i,documentInDb:_};return f.push(C),1}var k=l?qt(i):i;l&&(p?a&&Object.keys(a._attachments).forEach((t=>{v.push({documentId:c,attachmentId:t,digest:e(a)._attachments[t].digest})})):(Object.entries(s._attachments).find((([e,r])=>((a?a._attachments[e]:void 0)||r.data||(t={documentId:c,documentInDb:_,isError:!0,status:510,writeRow:i,attachmentId:e}),!0))),t||Object.entries(s._attachments).forEach((([e,t])=>{var r=a?a._attachments[e]:void 0;if(r){var n=k.document._attachments[e].digest;t.data&&r.digest!==n&&g.push({documentId:c,attachmentId:e,attachmentData:t,digest:t.digest})}else y.push({documentId:c,attachmentId:e,attachmentData:t,digest:t.digest})})))),t?f.push(t):(l?d.push(qt(k)):d.push(k),u=k);var x=null,O=null,P=null;if(w&&!p)P="INSERT",x=l?Ut(s):s;else if(!a||w||p){if(!p)throw I("SNH",{args:{writeRow:i}});P="DELETE",x=e(s),O=a}else P="UPDATE",x=l?Ut(s):s,O=a;var R={documentId:c,documentData:x,previousDocumentData:O,operation:P};m.push(R)}else{var $=!!p;if(l&&Object.entries(s._attachments).forEach((([e,r])=>{r.data?y.push({documentId:c,attachmentId:e,attachmentData:r,digest:r.digest}):(t={documentId:c,isError:!0,status:510,writeRow:i,attachmentId:e},f.push(t))})),t||(l?h.push(qt(i)):h.push(i),u=i),!$){var D={documentId:c,operation:"INSERT",documentData:l?Ut(s):s,previousDocumentData:l&&a?Ut(a):a};m.push(D)}}},E=0;E<w;E++)_();return{bulkInsertDocs:h,bulkUpdateDocs:d,newestRow:u,errors:f,eventBulk:p,attachmentsAdd:y,attachmentsRemove:v,attachmentsUpdate:g}}(this,this.primaryPath,c,t,r),s.error=n.errors;var u=[],l=[],h=[],d=[];n.bulkInsertDocs.forEach((e=>{s.success.push(e.document),u.push(e.document)})),n.bulkUpdateDocs.forEach((e=>{var t=e.document[this.primaryPath];if(s.success.push(e.document),e.document._deleted&&e.previous&&!e.previous._deleted)l.push(t),h.push(e.document);else if(e.document._deleted&&e.previous&&e.previous._deleted)h.push(e.document);else{if(e.document._deleted)throw I("SNH",{args:{row:e}});u.push(e.document)}})),await Promise.all([u.length>0?o.dexieTable.bulkPut(u.map((e=>al(e)))):St,l.length>0?o.dexieTable.bulkDelete(l):St,h.length>0?o.dexieDeletedTable.bulkPut(h.map((e=>al(e)))):St,d.length>0?o.dexieDeletedTable.bulkDelete(d):St])})),(n=e(n)).eventBulk.events.length>0){var c=e(n.newestRow).document;n.eventBulk.checkpoint={id:c[this.primaryPath],lwt:c._meta.lwt},n.eventBulk.endTime=It(),this.changes$.next(n.eventBulk)}return s},r.findDocumentsById=async function(e,t){Yl(this);var r=await this.internals,n=[];return await r.dexieDb.transaction("r",r.dexieTable,r.dexieDeletedTable,(async()=>{var i;i=t?await ul(this.internals,e):await r.dexieTable.bulkGet(e),e.forEach(((e,r)=>{var o=i[r];!o||o._deleted&&!t||n.push(cl(o))}))})),n},r.query=function(e){return Yl(this),dl(this,e)},r.count=async function(e){if(e.queryPlan.selectorSatisfiedByIndex){var t=await async function(e,t){var r=await e.internals,n=t.queryPlan,i=n.index,o=hl(n,r.dexieDb._options.IDBKeyRange),s=-1;return await r.dexieDb.transaction("r",r.dexieTable,(async t=>{var r,n,a=t.idbtrans.objectStore(Xu);1===i.length&&i[0]===e.primaryPath?r=a:(n=1===i.length?ol(i[0]):"["+i.map((e=>ol(e))).join("+")+"]",r=a.index(n));var c=r.count(o);s=await new Promise(((e,t)=>{c.onsuccess=function(){e(c.result)},c.onerror=e=>t(e)}))})),s}(this,e);return{count:t,mode:"fast"}}return{count:(await dl(this,e)).documents.length,mode:"slow"}},r.info=async function(){var e=await this.internals,t={totalCount:-1};return await e.dexieDb.transaction("r",e.dexieTable,e.dexieDeletedTable,(async r=>{var[n,i]=await Promise.all([e.dexieTable.count(),e.dexieDeletedTable.count()]);t.totalCount=n+i})),t},r.getChangedDocumentsSince=async function(e,t){Yl(this);var r,n=t?t.lwt:H,i=t?t.id:"",o=await this.internals,[s,a]=await Promise.all([o.dexieTable,o.dexieDeletedTable].map((async t=>{var r=t.where("[_meta.lwt+"+this.primaryPath+"]").above([n,i]).limit(e);return(await r.toArray()).map((e=>cl(e)))}))),c=s.slice(0);E(c,a),r=this.primaryPath,c=c.sort(function(e){return(t,r)=>t._meta.lwt===r._meta.lwt?r[e]<t[e]?1:-1:t._meta.lwt-r._meta.lwt}(r));var u,l=(u=c=c.slice(0,e))[u.length-1];return{documents:c,checkpoint:l?{id:l[this.primaryPath],lwt:l._meta.lwt}:t||{id:"",lwt:0}}},r.changeStream=function(){return Yl(this),this.changes$.asObservable()},r.cleanup=async function(e){Yl(this);var t=await this.internals;return await t.dexieDb.transaction("rw",t.dexieDeletedTable,(async()=>{var r=It()-e,n=(await t.dexieDeletedTable.where("_meta.lwt").below(r).toArray()).map((e=>e[this.primaryPath]));await t.dexieDeletedTable.bulkDelete(n)})),!0},r.getAttachmentData=function(e,t,r){throw Yl(this),new Error("Attachments are not implemented in the dexie RxStorage. Make a pull request.")},r.remove=async function(){Yl(this);var e=await this.internals;return await Promise.all([e.dexieDeletedTable.clear(),e.dexieTable.clear()]),this.close()},r.close=function(){return this.closed||(this.closed=(async()=>{this.changes$.complete(),await async function(e){var t=await e,r=nl.get(e)-1;0===r?(t.dexieDb.close(),nl.delete(e)):nl.set(e,r)}(this.internals)})()),this.closed},r.conflictResultionTasks=function(){return new ft},r.resolveConflictResultionTask=async function(e){},t}();function Yl(e){if(e.closed)throw new Error("RxStorageInstanceDexie is closed "+e.databaseName+"-"+e.collectionName)}var Xl=function(){function e(e){this.name=el,this.statics=tl,this.settings=e}return e.prototype.createStorageInstance=function(e){return function(e){if(e.schema.keyCompression)throw I("UT5",{args:{params:e}});if(Ht(e.schema))throw I("UT6",{args:{params:e}});if(e.schema.attachments&&e.schema.attachments.compression)throw I("UT7",{args:{params:e}})}(e),function(e){if(e.indexes){var t=new Set;e.indexes.forEach((r=>{g(r).forEach((n=>{if(!t.has(n)&&(t.add(n),"boolean"===W(e,n).type))throw I("DXE1",{schema:e,index:r,field:n})}))}))}}(e.schema),async function(e,t,r){var n=function(e,t,r,n){var i=G(n.primaryKey),o="rxdb-dexie-"+e+"--"+n.version+"--"+t,s=Ot(rl,o,(()=>{var e=(async()=>{var e=p(r);e.autoOpen=!1;var t,s,a,c=new Vu(o,e),u={[Xu]:(t=n,s=[],a=G(t.primaryKey),s.push([a]),t.indexes&&t.indexes.forEach((e=>{var t=g(e);s.push(t)})),s.push(["_meta.lwt",a]),(s=s.map((e=>e.map((e=>ol(e)))))).map((e=>1===e.length?e[0]:"["+e.join("+")+"]")).join(", ")),changes:"++sequence, id",[Zu]:i+",_meta.lwt,[_meta.lwt+"+i+"]"};return c.version(1).stores(u),await c.open(),{dexieDb:c,dexieTable:c[Xu],dexieDeletedTable:c[Zu]}})();return rl.set(o,s),nl.set(s,0),e}));return s}(t.databaseName,t.collectionName,r,t.schema),i=new Jl(e,t.databaseName,t.collectionName,t.schema,n,t.options,r);return await Ql(el,t,i),Promise.resolve(i)}(this,e,this.settings)},e}();function Zl(e={}){return new Xl(e)}var eh=Array.isArray,th=Object.getPrototypeOf,rh=Object.prototype,nh=Object.keys;var ih=Array.isArray;function oh(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=rt(e),n=function(e){return te(tt(e))?e.pop():void 0}(e),i=function(e){if(1===e.length){var t=e[0];if(eh(t))return{args:t,keys:null};if((n=t)&&"object"==typeof n&&th(n)===rh){var r=nh(t);return{args:r.map((function(e){return t[e]})),keys:r}}}var n;return{args:e,keys:null}}(e),o=i.args,s=i.keys;if(0===o.length)return at([],r);var a=new qe(function(e,t,r){return void 0===r&&(r=Fe),function(n){sh(t,(function(){for(var i=e.length,o=new Array(i),s=i,a=i,c=function(i){sh(t,(function(){var c=at(e[i],t),u=!1;c.subscribe(je(n,(function(e){o[i]=e,u||(u=!0,a--),a||n.next(r(o.slice()))}),(function(){--s||n.complete()})))}),n)},u=0;u<i;u++)c(u)}),n)}}(o,r,s?function(e){return function(e,t){return e.reduce((function(e,r,n){return e[r]=t[n],e}),{})}(s,e)}:Fe));return n?a.pipe(function(e){return Ae((function(t){return function(e,t){return ih(t)?e.apply(void 0,ce([],ae(t))):e(t)}(e,t)}))}(n)):a}function sh(e,t,r){e?Xe(r,e,t):t()}async function ah(e,t){var r=J(e.input.metaInstance.schema,{isCheckpoint:"1",itemId:t}),n=(await e.input.metaInstance.findDocumentsById([r],!1))[0];return e.lastCheckpointDoc[t]=n,n?n.checkpointData:void 0}async function ch(t,r,n){t.checkpointQueue=t.checkpointQueue.then((async()=>{var i=t.lastCheckpointDoc[r];if(n&&!t.events.canceled.getValue()&&(!i||JSON.stringify(i.checkpointData)!==JSON.stringify(n))){var o={id:"",isCheckpoint:"1",itemId:r,_deleted:!1,_attachments:{},checkpointData:n,_meta:z(),_rev:""};for(o.id=J(t.input.metaInstance.schema,o);!t.events.canceled.getValue();){if(i&&(o.checkpointData=Bt([i.checkpointData,o.checkpointData])),o._meta.lwt=It(),o._rev=At(await t.checkpointKey,i),t.events.canceled.getValue())return;var s=await t.input.metaInstance.bulkWrite([{previous:i,document:o}],"replication-set-checkpoint"),a=s.success[0];if(a)return void(t.lastCheckpointDoc[r]=a);var c=s.error[0];if(409!==c.status)throw c;i=e(c.documentInDb),o._rev=At(await t.checkpointKey,i)}}})),await t.checkpointQueue}function uh(e,t,r,n,i){var o=Object.assign({},n,{_attachments:t&&n._attachments?n._attachments:{},_meta:r?n._meta:{lwt:It()},_rev:r?n._rev:""});return o._rev||(o._rev=At(e,i)),o}function lh(e,t,r){var n=p(e);return t||delete n._attachments,r||(delete n._meta,delete n._rev),n}function hh(e,t){return e.hasAttachments?t.map((e=>{var t=y(e.document);return t.docData=Ut(t.docData),{document:t,previous:e.previous}})):t}function dh(e){for(;;){if(!e.underlyingPersistentStorage)return e;e=e.underlyingPersistentStorage}}function fh(e,t){return e.input.metaInstance.findDocumentsById(t.map((t=>J(e.input.metaInstance.schema,{itemId:t,isCheckpoint:"0"}))),!0).then((e=>{var t={};return Object.values(e).forEach((e=>{t[e.itemId]={docData:e.docData,metaDocument:e}})),t}))}async function ph(e,t,r,n){var i=t[e.primaryPath],o=r?Kt(r):{id:"",isCheckpoint:"0",itemId:i,docData:t,_attachments:{},_deleted:!1,_rev:"",_meta:{lwt:0}};return o.docData=t,o.isResolvedConflict=n,o._meta.lwt=It(),o.id=J(e.input.metaInstance.schema,o),o._rev=At(await e.checkpointKey,r),{previous:r,document:o}}async function mh(t,r,n,i){if(!n._attachments||i&&!i._attachments)throw new Error("_attachments missing");var o=n[t],s=new Set(i&&i._attachments?Object.keys(i._attachments):[]);return await Promise.all(Object.entries(n._attachments).map((async([t,n])=>{if((!s.has(t)||i&&e(i._attachments)[t].digest!==n.digest)&&!n.data){var a=await r.getAttachmentData(o,t,n.digest);n.data=a}}))),n}async function yh(t){t.input.initialCheckpoint&&t.input.initialCheckpoint.upstream&&(await ah(t,"up")||await ch(t,"up",t.input.initialCheckpoint.upstream));var r=t.input.replicationHandler;t.streamQueue.up=t.streamQueue.up.then((()=>u().then((()=>{l()}))));var n=0,i=-1,o=[],s=_t,a={docs:{}},c=t.input.forkInstance.changeStream().subscribe((async e=>{if(e.context!==await t.downstreamBulkWriteFlag)return t.stats.up.forkChangeStreamEmit=t.stats.up.forkChangeStreamEmit+1,o.push({task:e,time:n++}),t.input.waitBeforePersist?t.input.waitBeforePersist().then((()=>l())):l()}));async function u(){if(t.stats.up.upstreamInitialSync=t.stats.up.upstreamInitialSync+1,!t.events.canceled.getValue()){t.checkpointQueue=t.checkpointQueue.then((()=>ah(t,"up")));for(var r=await t.checkpointQueue,o=new Set,s=async function(){i=n++,o.size>3&&await Promise.race(Array.from(o));var s=await t.input.forkInstance.getChangedDocumentsSince(t.input.pushBatchSize,r);if(0===s.documents.length)return 1;r=Bt([r,s.checkpoint]);var a=h(s.documents,e(r));o.add(a),a.catch().then((()=>o.delete(a)))};!t.events.canceled.getValue()&&!await s(););var a=(await Promise.all(o)).find((e=>!!e));a?await u():t.firstSyncDone.up.getValue()||t.events.canceled.getValue()||t.firstSyncDone.up.next(!0)}}function l(){t.events.canceled.getValue()||0===o.length?t.events.active.up.next(!1):(t.stats.up.processTasks=t.stats.up.processTasks+1,t.events.active.up.next(!0),t.streamQueue.up=t.streamQueue.up.then((()=>{for(var r=[],n={};o.length>0;){var s=e(o.shift());s.time<i||(E(r,s.task.events.map((e=>e.documentData))),n=Bt([n,s.task.checkpoint]))}return(0===r.length?_t:h(r,n)).then((()=>{0===o.length?t.events.active.up.next(!1):l()}))})))}function h(n,i){return t.stats.up.persistToMaster=t.stats.up.persistToMaster+1,n.forEach((e=>{var r=e[t.primaryPath];a.docs[r]=e})),a.checkpoint=i,s=s.then((async()=>{if(t.events.canceled.getValue())return!1;var n=a.docs;a.docs={};var i=a.checkpoint,o=Object.keys(n);if(0===o.length)return!1;var s=await fh(t,o),c={},u=[],l={},h={};if(await Promise.all(o.map((async e=>{var r=n[e];h[e]=r;var i=lh(r,t.hasAttachments,!!t.input.keepMeta),o=s[e];o&&o.metaDocument.isResolvedConflict!==r._rev&&(await t.input.conflictHandler({realMasterState:o.docData,newDocumentState:i},"upstream-check-if-equal")).isEqual||o&&o.docData._rev&&jt(r._rev).height===r._meta[t.input.identifier]||(u.push(e),c[e]={assumedMasterState:o?o.docData:void 0,newDocumentState:i},l[e]=await ph(t,i,o?o.metaDocument:void 0))}))),0===u.length)return!1;var d=Object.values(c),f=new Set,m={},v=function(e,t){e=e.slice(0);for(var r=[];e.length;){var n=e.splice(0,t);r.push(n)}return r}(d,t.input.pushBatchSize);await Promise.all(v.map((async e=>{t.hasAttachments&&await Promise.all(e.map((async e=>{e.newDocumentState=await mh(t.primaryPath,t.input.forkInstance,y(e.newDocumentState),e.assumedMasterState)}))),(await r.masterWrite(e)).forEach((e=>{var r=e[t.primaryPath];f.add(r),m[r]=e}))})));var g=[];if(u.forEach((e=>{f.has(e)||(t.events.processed.up.next(c[e]),g.push(l[e]))})),t.events.canceled.getValue())return!1;g.length>0&&await t.input.metaInstance.bulkWrite(hh(t,g),"replication-up-write-meta");var b=!1;if(f.size>0){t.stats.up.persistToMasterHadConflicts=t.stats.up.persistToMasterHadConflicts+1;var w=[],_={};if(await Promise.all(Object.entries(m).map((([r,n])=>{var i=c[r],o={newDocumentState:i.newDocumentState,assumedMasterState:i.assumedMasterState,realMasterState:n};return async function(e,t,r){var n=e.input.conflictHandler,i=await n(t,"replication-resolve-conflict");if(!i.isEqual){var o=Object.assign({},i.documentData,{_meta:p(r._meta),_rev:"",_attachments:p(r._attachments)});return o._meta.lwt=It(),o._rev=At(await e.checkpointKey,r),{resolvedDoc:o,output:i}}}(t,o,h[r]).then((async i=>{if(i){t.events.resolvedConflicts.next({input:o,output:i.output}),w.push({previous:h[r],document:i.resolvedDoc});var a=s[r];_[r]=await ph(t,e(n),a?a.metaDocument:void 0,i.resolvedDoc._rev)}}))}))),w.length>0){b=!0,t.stats.up.persistToMasterConflictWrites=t.stats.up.persistToMasterConflictWrites+1;var E=await t.input.forkInstance.bulkWrite(w,"replication-up-write-conflict"),S=[];E.success.forEach((e=>{var r=e[t.primaryPath];S.push(_[r])})),S.length>0&&await t.input.metaInstance.bulkWrite(hh(t,S),"replication-up-write-conflict-meta")}}return ch(t,"up",i),b})).catch((e=>(t.events.error.next(e),!1)))}Zt(t.events.canceled.pipe(Ne((e=>!!e)))).then((()=>c.unsubscribe()))}function vh(e){return Zt(oh([e.firstSyncDone.down.pipe(Ne((e=>!!e))),e.firstSyncDone.up.pipe(Ne((e=>!!e)))])).then((()=>{}))}function gh(e){return Promise.all([e.streamQueue.up,e.streamQueue.down,e.checkpointQueue])}var bh=r(4155),wh=r(4155),_h="[object process]"===Object.prototype.toString.call(void 0!==wh?wh:0)?function(e){bh.on("exit",(function(){return e()})),bh.on("beforeExit",(function(){return e().then((function(){return bh.exit()}))})),bh.on("SIGINT",(function(){return e().then((function(){return bh.exit()}))})),bh.on("uncaughtException",(function(t){return e().then((function(){console.trace(t),bh.exit(101)}))}))}:function(e){if("function"==typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope){var t=self.close.bind(self);self.close=function(){return e(),t()}}else{if("function"!=typeof window.addEventListener)return;window.addEventListener("beforeunload",(function(){e()}),!0),window.addEventListener("unload",(function(){e()}),!0)}},Eh=new Set,Sh=!1;function Ch(){var e=[];return Eh.forEach((function(t){e.push(t()),Eh.delete(t)})),Promise.all(e)}function kh(e,t){var r={context:"leader",action:t,token:e.token};return e.broadcastChannel.postInternal(r)}function xh(e){e.isLeader=!0,e._hasLeader=!0;var t=function(e){if(Sh||(Sh=!0,_h(Ch)),"function"!=typeof e)throw new Error("Listener is no function");return Eh.add(e),{remove:function(){return Eh.delete(e)},run:function(){return Eh.delete(e),e()}}}((function(){return e.die()}));e._unl.push(t);var r=function(t){"leader"===t.context&&"apply"===t.action&&kh(e,"tell"),"leader"!==t.context||"tell"!==t.action||e._dpLC||(e._dpLC=!0,e._dpL(),kh(e,"tell"))};return e.broadcastChannel.addEventListener("internal",r),e._lstns.push(r),kh(e,"tell")}var Oh=function(e,t){var r=this;this.broadcastChannel=e,e._befC.push((function(){return r.die()})),this._options=t,this.isLeader=!1,this.isDead=!1,this.token=gl(),this._lstns=[],this._unl=[],this._dpL=function(){},this._dpLC=!1,this._wKMC={},this.lN="pubkey-bc||"+e.method.type+"||"+e.name};Oh.prototype={hasLeader:function(){var e=this;return navigator.locks.query().then((function(t){var r=t.held?t.held.filter((function(t){return t.name===e.lN})):[];return!!(r&&r.length>0)}))},awaitLeadership:function(){var e=this;if(!this._wLMP){this._wKMC.c=new AbortController;var t=new Promise((function(t,r){e._wKMC.res=t,e._wKMC.rej=r}));this._wLMP=new Promise((function(r){navigator.locks.request(e.lN,{signal:e._wKMC.c.signal},(function(){return e._wKMC.c=void 0,xh(e),r(),t})).catch((function(){}))}))}return this._wLMP},set onduplicate(e){},die:function(){var e=this;return this._lstns.forEach((function(t){return e.broadcastChannel.removeEventListener("internal",t)})),this._lstns=[],this._unl.forEach((function(e){return e.remove()})),this._unl=[],this.isLeader&&(this.isLeader=!1),this.isDead=!0,this._wKMC.res&&this._wKMC.res(),this._wKMC.c&&this._wKMC.c.abort("LeaderElectionWebLock.die() called"),kh(this,"death")}};var Ph=function(e,t){var r=this;this.broadcastChannel=e,this._options=t,this.isLeader=!1,this._hasLeader=!1,this.isDead=!1,this.token=gl(),this._aplQ=yl,this._aplQC=0,this._unl=[],this._lstns=[],this._dpL=function(){},this._dpLC=!1;var n=function(e){"leader"===e.context&&("death"===e.action&&(r._hasLeader=!1),"tell"===e.action&&(r._hasLeader=!0))};this.broadcastChannel.addEventListener("internal",n),this._lstns.push(n)};Ph.prototype={hasLeader:function(){return Promise.resolve(this._hasLeader)},applyOnce:function(e){var t=this;return this.isLeader?vl(0,!0):this.isDead?vl(0,!1):this._aplQC>1?this._aplQ:(this._aplQC=this._aplQC+1,this._aplQ=this._aplQ.then((function(){return function(){if(t.isLeader)return ml;var r,n=!1,i=new Promise((function(e){r=function(){n=!0,e()}})),o=function(e){"leader"===e.context&&e.token!=t.token&&("apply"===e.action&&e.token>t.token&&r(),"tell"===e.action&&(r(),t._hasLeader=!0))};t.broadcastChannel.addEventListener("internal",o);var s=e?4*t._options.responseTime:t._options.responseTime;return kh(t,"apply").then((function(){return Promise.race([vl(s),i.then((function(){return Promise.reject(new Error)}))])})).then((function(){return kh(t,"apply")})).then((function(){return Promise.race([vl(s),i.then((function(){return Promise.reject(new Error)}))])})).catch((function(){})).then((function(){return t.broadcastChannel.removeEventListener("internal",o),!n&&xh(t).then((function(){return!0}))}))}()})).then((function(){t._aplQC=t._aplQC-1})),this._aplQ.then((function(){return t.isLeader})))},awaitLeadership:function(){return this._aLP||(this._aLP=(e=this).isLeader?yl:new Promise((function(t){var r=!1;function n(){r||(r=!0,e.broadcastChannel.removeEventListener("internal",i),t(!0))}e.applyOnce().then((function(){e.isLeader&&n()})),function t(){return vl(e._options.fallbackInterval).then((function(){if(!e.isDead&&!r)return e.isLeader?void n():e.applyOnce(!0).then((function(){e.isLeader?n():t()}))}))}();var i=function(t){"leader"===t.context&&"death"===t.action&&(e._hasLeader=!1,e.applyOnce().then((function(){e.isLeader&&n()})))};e.broadcastChannel.addEventListener("internal",i),e._lstns.push(i)}))),this._aLP;var e},set onduplicate(e){this._dpL=e},die:function(){var e=this;return this._lstns.forEach((function(t){return e.broadcastChannel.removeEventListener("internal",t)})),this._lstns=[],this._unl.forEach((function(e){return e.remove()})),this._unl=[],this.isLeader&&(this._hasLeader=!1,this.isLeader=!1),this.isDead=!0,kh(this,"death")}};var Rh=new WeakMap,$h=new WeakMap;function Dh(e){return Ot($h,e,(()=>function(e,t){if(e._leaderElector)throw new Error("BroadcastChannel already has a leader-elector");t=function(e,t){return e||(e={}),(e=JSON.parse(JSON.stringify(e))).fallbackInterval||(e.fallbackInterval=3e3),e.responseTime||(e.responseTime=t.method.averageResponseTime(t.options)),e}(t,e);var r="undefined"!=typeof navigator&&void 0!==navigator.locks&&"function"==typeof navigator.locks.request?new Oh(e,t):new Ph(e,t);return e._befC.push((function(){return r.die()})),e._leaderElector=r,r}(e)))}function Ih(){var e=zl(this.storage.name,this.token,this.name,this),t=this.destroy.bind(this);this.destroy=function(){return Wl(this.token,this),t()};var r=Dh(e);return r||(r=Dh(e),Rh.set(this,r)),this.leaderElector=()=>r,r}function jh(){return!this.multiInstance||this.leaderElector().isLeader}function Th(){return this.multiInstance?this.leaderElector().awaitLeadership().then((()=>!0)):wt}var Ah={name:"leader-election",rxdb:!0,prototypes:{RxDatabase:e=>{e.leaderElector=Ih,e.isLeader=jh,e.waitForLeadership=Th}},hooks:{preDestroyRxDatabase:{after:function(e){var t=Rh.get(e);t&&t.die()}}}},Nh=e=>Promise.resolve(e);function Mh(e,t){if("_deleted"===e)return t;var r=!!(t=p(t))._deleted;return t[e]=r,delete t._deleted,t}function Lh(e,t,r){return r.map((r=>{var n=p(r);if("_deleted"!==t){var i=!!n[t];n._deleted=i,delete n[t]}else n._deleted=!!n._deleted;return n[e.schema.primaryPath]=J(e.schema.jsonSchema,n),n}))}function Bh(e,t){if("undefined"==typeof window||"object"!=typeof window||void 0===window.addEventListener||navigator.onLine)return e.promiseWait(t);var r,n=new Promise((e=>{r=()=>{window.removeEventListener("online",r),e()},window.addEventListener("online",r)}));return Promise.race([n,e.promiseWait(t)]).then((()=>{window.removeEventListener("online",r)}))}var Fh=new WeakMap,qh=function(){function t(e,t,r,n,i,o,s,a){this.subs=[],this.subjects={received:new ft,sent:new ft,error:new ft,canceled:new Yt(!1),active:new Yt(!1)},this.received$=this.subjects.received.asObservable(),this.sent$=this.subjects.sent.asObservable(),this.error$=this.subjects.error.asObservable(),this.canceled$=this.subjects.canceled.asObservable(),this.active$=this.subjects.active.asObservable(),this.callOnStart=void 0,this.remoteEvents$=new ft,this.replicationIdentifier=e,this.collection=t,this.deletedField=r,this.pull=n,this.push=i,this.live=o,this.retryTime=s,this.autoStart=a,Ot(Fh,t,(()=>[])).push(this),this.collection.onDestroy.push((()=>this.cancel())),Object.keys(this.subjects).forEach((e=>{Object.defineProperty(this,e+"$",{get:function(){return this.subjects[e].asObservable()}})}));var c=new Promise((e=>{this.callOnStart=e}));this.startPromise=c}var r=t.prototype;return r.start=async function(){if(!this.isStopped()){var t=this.pull&&this.pull.modifier?this.pull.modifier:Nh,r=this.push&&this.push.modifier?this.push.modifier:Nh,n=this.collection.database,i="rx-replication-meta-"+await n.hashFunction([this.collection.name,this.replicationIdentifier].join("-")),o=(a=this.collection.schema.jsonSchema,c=Ht(this.collection.schema.jsonSchema),l=e(W(u=a,G(u.primaryKey)).maxLength),h={title:"RxReplicationProtocolMetaData",primaryKey:{key:"id",fields:["itemId","isCheckpoint"],separator:"|"},type:"object",version:a.version,additionalProperties:!1,properties:{id:{type:"string",minLength:1,maxLength:l+2},isCheckpoint:{type:"string",enum:["0","1"],minLength:1,maxLength:1},itemId:{type:"string",maxLength:l>4?l:4},checkpointData:{type:"object",additionalProperties:!0},docData:{type:"object",properties:a.properties},isResolvedConflict:{type:"string"}},keyCompression:a.keyCompression,required:["id","isCheckpoint","itemId"]},c&&(h.encrypted=["docData"]),Y(h)),[s]=await Promise.all([this.collection.database.storage.createStorageInstance({databaseName:n.name,collectionName:i,databaseInstanceToken:n.token,multiInstance:n.multiInstance,options:{},schema:o,password:n.password,devMode:P.isDevMode()}),So(this.collection,i,o)]);this.metaInstance=s,this.internalReplicationState=function(t){(t=p(t)).forkInstance=dh(t.forkInstance),t.metaInstance=dh(t.metaInstance);var r=async function(e){return"rx_storage_replication_"+await e.hashFunction([e.identifier,e.forkInstance.databaseName,e.forkInstance.collectionName].join("||"))}(t),n={primaryPath:G(t.forkInstance.schema.primaryKey),hasAttachments:!!t.forkInstance.schema.attachments,input:t,checkpointKey:r,downstreamBulkWriteFlag:r.then((e=>"replication-downstream-"+e)),events:{canceled:new Yt(!1),active:{down:new Yt(!0),up:new Yt(!0)},processed:{down:new ft,up:new ft},resolvedConflicts:new ft,error:new ft},stats:{down:{addNewTask:0,downstreamProcessChanges:0,downstreamResyncOnce:0,masterChangeStreamEmit:0,persistFromMaster:0},up:{forkChangeStreamEmit:0,persistToMaster:0,persistToMasterConflictWrites:0,persistToMasterHadConflicts:0,processTasks:0,upstreamInitialSync:0}},firstSyncDone:{down:new Yt(!1),up:new Yt(!1)},streamQueue:{down:St,up:St},checkpointQueue:St,lastCheckpointDoc:{}};return async function(t){t.input.initialCheckpoint&&t.input.initialCheckpoint.downstream&&(await ah(t,"down")||await ch(t,"down",t.input.initialCheckpoint.downstream));var r=await t.input.hashFunction(t.input.identifier),n=t.input.replicationHandler,i=0,o=[];function s(r){t.stats.down.addNewTask=t.stats.down.addNewTask+1;var s={time:i++,task:r};o.push(s),t.streamQueue.down=t.streamQueue.down.then((()=>{for(var r=[];o.length>0;){t.events.active.down.next(!0);var s=e(o.shift());if(!(s.time<c)){if("RESYNC"===s.task){if(0===r.length){r.push(s.task);break}break}r.push(s.task)}}if(0!==r.length)return"RESYNC"===r[0]?async function(){if(t.stats.down.downstreamResyncOnce=t.stats.down.downstreamResyncOnce+1,!t.events.canceled.getValue()){t.checkpointQueue=t.checkpointQueue.then((()=>ah(t,"down")));for(var e=await t.checkpointQueue,r=[];!t.events.canceled.getValue();){c=i++;var o=await n.masterChangesSince(e,t.input.pullBatchSize);if(0===o.documents.length)break;if(e=Bt([e,o.checkpoint]),r.push(h(o.documents,e)),o.documents.length<t.input.pullBatchSize)break}await Promise.all(r)}}():function(r){t.stats.down.downstreamProcessChanges=t.stats.down.downstreamProcessChanges+1;var n=[],i=null;return r.forEach((e=>{if("RESYNC"===e)throw new Error("SNH");E(n,e.documents),i=Bt([i,e.checkpoint])})),h(n,e(i))}(r)})).then((()=>{t.events.active.down.next(!1),t.firstSyncDone.down.getValue()||t.events.canceled.getValue()||t.firstSyncDone.down.next(!0)}))}if(s("RESYNC"),!t.events.canceled.getValue()){var a=n.masterChangeStream$.subscribe((e=>{t.stats.down.masterChangeStreamEmit=t.stats.down.masterChangeStreamEmit+1,s(e)}));Zt(t.events.canceled.pipe(Ne((e=>!!e)))).then((()=>a.unsubscribe()))}var c=-1,u=St,l={docs:{}};function h(e,n){var i=t.primaryPath;return t.stats.down.persistFromMaster=t.stats.down.persistFromMaster+1,e.forEach((e=>{var t=e[i];l.docs[t]=e})),l.checkpoint=n,u=u.then((()=>{var e=l.docs;l.docs={};var n=l.checkpoint,o=Object.keys(e);if(t.events.canceled.getValue()||0===o.length)return St;var s=[],a={},c={},u=[];return Promise.all([t.input.forkInstance.findDocumentsById(o,!0),fh(t,o)]).then((([n,l])=>{var h=new Map;return n.forEach((e=>h.set(e[i],e))),Promise.all(o.map((async n=>{var i=h.get(n),o=i?lh(i,t.hasAttachments,!1):void 0,d=e[n],f=l[n];if(f&&i&&f.metaDocument.isResolvedConflict===i._rev)return St;var m=!(!f||!o)&&await t.input.conflictHandler({realMasterState:f.docData,newDocumentState:o},"downstream-check-if-equal-0").then((e=>e.isEqual));if(!m&&f&&f.docData._rev&&i&&i._meta[t.input.identifier]&&jt(i._rev).height===i._meta[t.input.identifier]&&(m=!0),i&&f&&!1===m||i&&!f)return St;var y=!!o&&await t.input.conflictHandler({realMasterState:d,newDocumentState:o},"downstream-check-if-equal-1").then((e=>e.isEqual));if(o&&y)return f&&!1!==m||u.push(await ph(t,o,f?f.metaDocument:void 0)),St;var v=Object.assign({},d,i?{_meta:p(i._meta),_attachments:t.hasAttachments&&d._attachments?d._attachments:{},_rev:""}:{_meta:{lwt:It()},_rev:"",_attachments:t.hasAttachments&&d._attachments?d._attachments:{}});if(d._rev){var g=i?jt(i._rev).height+1:1;v._meta[t.input.identifier]=g,t.input.keepMeta&&(v._rev=d._rev)}t.input.keepMeta&&d._meta&&(v._meta=d._meta);var b={previous:i,document:v};b.document._rev=b.document._rev?b.document._rev:At(r,b.previous),s.push(b),a[n]=b,c[n]=await ph(t,d,f?f.metaDocument:void 0)})))})).then((async()=>{if(s.length>0)return t.input.forkInstance.bulkWrite(s,await t.downstreamBulkWriteFlag).then((e=>{e.success.forEach((e=>{var r=e[i];t.events.processed.down.next(a[r]),u.push(c[r])})),e.error.forEach((e=>{409!==e.status&&t.events.error.next(I("RC_PULL",{writeError:e}))}))}))})).then((()=>{if(u.length>0)return t.input.metaInstance.bulkWrite(hh(t,u),"replication-down-write-meta").then((e=>{e.error.forEach((e=>{t.events.error.next(I("RC_PULL",{id:e.documentId,writeError:e}))}))}))})).then((()=>{ch(t,"down",n)}))})).catch((e=>t.events.error.next(e))),u}}(n),yh(n),n}({pushBatchSize:this.push&&this.push.batchSize?this.push.batchSize:100,pullBatchSize:this.pull&&this.pull.batchSize?this.pull.batchSize:100,initialCheckpoint:{upstream:this.push?this.push.initialCheckpoint:void 0,downstream:this.pull?this.pull.initialCheckpoint:void 0},forkInstance:this.collection.storageInstance,metaInstance:this.metaInstance,hashFunction:n.hashFunction,identifier:"rxdbreplication"+this.replicationIdentifier,conflictHandler:this.collection.conflictHandler,replicationHandler:{masterChangeStream$:this.remoteEvents$.asObservable().pipe(Ne((e=>!!this.pull)),Ze((async e=>{if("RESYNC"===e)return e;var r=p(e);return r.documents=Lh(this.collection,this.deletedField,r.documents),r.documents=await Promise.all(r.documents.map((e=>t(e)))),r}))),masterChangesSince:async(r,n)=>{if(!this.pull)return{checkpoint:null,documents:[]};for(var i=!1,o={};!i&&!this.isStopped();)try{o=await this.pull.handler(r,n),i=!0}catch(t){var s=I("RC_PULL",{checkpoint:r,errors:g(t).map((e=>Rt(e))),direction:"pull"});this.subjects.error.next(s),await Bh(this.collection,e(this.retryTime))}if(this.isStopped())return{checkpoint:null,documents:[]};var a=p(o);return a.documents=Lh(this.collection,this.deletedField,a.documents),a.documents=await Promise.all(a.documents.map((e=>t(e)))),a},masterWrite:async t=>{if(!this.push)return[];var n=!1;await L("preReplicationMasterWrite",{rows:t,collection:this.collection});var i=(await Promise.all(t.map((async e=>(e.newDocumentState=await r(e.newDocumentState),null===e.newDocumentState?null:(e.assumedMasterState&&(e.assumedMasterState=await r(e.assumedMasterState)),"_deleted"!==this.deletedField&&(e.newDocumentState=Mh(this.deletedField,e.newDocumentState),e.assumedMasterState&&(e.assumedMasterState=Mh(this.deletedField,e.assumedMasterState))),e)))))).filter(w),o=null;for(0===i.length&&(n=!0,o=[]);!n&&!this.isStopped();)try{if(o=await this.push.handler(i),!Array.isArray(o))throw I("RC_PUSH_NO_AR",{pushRows:t,direction:"push",args:{result:o}});n=!0}catch(r){var s=r.rxdb?r:I("RC_PUSH",{pushRows:t,errors:g(r).map((e=>Rt(e))),direction:"push"});this.subjects.error.next(s),await Bh(this.collection,e(this.retryTime))}return this.isStopped()?[]:(await L("preReplicationMasterWriteDocumentsHandle",{result:o,collection:this.collection}),Lh(this.collection,this.deletedField,e(o)))}}}),this.subs.push(this.internalReplicationState.events.error.subscribe((e=>{this.subjects.error.next(e)})),this.internalReplicationState.events.processed.down.subscribe((e=>this.subjects.received.next(e.document))),this.internalReplicationState.events.processed.up.subscribe((e=>{this.subjects.sent.next(e.newDocumentState)})),oh([this.internalReplicationState.events.active.down,this.internalReplicationState.events.active.up]).subscribe((([e,t])=>{var r=e||t;this.subjects.active.next(r)}))),this.pull&&this.pull.stream$&&this.live&&this.subs.push(this.pull.stream$.subscribe({next:e=>{this.remoteEvents$.next(e)},error:e=>{this.subjects.error.next(e)}})),this.live||(await vh(this.internalReplicationState),await gh(this.internalReplicationState),await this.cancel()),this.callOnStart()}var a,c,u,l,h},r.isStopped=function(){return!!this.subjects.canceled.getValue()},r.awaitInitialReplication=async function(){return await this.startPromise,vh(e(this.internalReplicationState))},r.awaitInSync=async function(){return await this.startPromise,await vh(e(this.internalReplicationState)),await this.collection.database.requestIdlePromise(),await gh(e(this.internalReplicationState)),!0},r.reSync=function(){this.remoteEvents$.next("RESYNC")},r.emitEvent=function(e){this.remoteEvents$.next(e)},r.cancel=async function(){if(this.isStopped())return _t;var t=[];return this.internalReplicationState&&await async function(e){e.events.canceled.next(!0),e.events.active.up.complete(),e.events.active.down.complete(),e.events.processed.up.complete(),e.events.processed.down.complete(),e.events.resolvedConflicts.complete(),e.events.canceled.complete(),await e.checkpointQueue}(this.internalReplicationState),this.metaInstance&&t.push(e(this.internalReplicationState).checkpointQueue.then((()=>e(this.metaInstance).close()))),this.subs.forEach((e=>e.unsubscribe())),this.subjects.canceled.next(!0),this.subjects.active.complete(),this.subjects.canceled.complete(),this.subjects.error.complete(),this.subjects.received.complete(),this.subjects.sent.complete(),Promise.all(t)},t}();function Uh(e,t,r){var n=r.id,i=Zt(e.response$.pipe(Ne((e=>e.peer===t)),Ne((e=>e.response.id===n)),Ae((e=>e.response))));return e.send(t,r),i}var Kh=function(){function t(t,r,n){this.peerStates$=new Yt(new Map),this.canceled=!1,this.subs=[],this.error$=new ft,this.collection=t,this.options=r,this.connectionHandler=n,this.collection.onDestroy.push((()=>this.cancel())),this.masterReplicationHandler=function(t,r,n,i=!1){var o=!!(t=dh(t)).schema.attachments,s=G(t.schema.primaryKey);return{masterChangeStream$:t.changeStream().pipe(Ze((async e=>({checkpoint:e.checkpoint,documents:await Promise.all(e.events.map((async e=>{var r=lh(e.documentData,o,i);return o&&(r=await mh(s,t,y(r),void 0)),r})))})))),masterChangesSince:(e,r)=>t.getChangedDocumentsSince(r,e).then((async r=>({checkpoint:r.documents.length>0?r.checkpoint:e,documents:await Promise.all(r.documents.map((async e=>{var r=lh(e,o,i);return o&&(r=await mh(s,t,y(r),void 0)),r})))}))),async masterWrite(a){var c={};a.forEach((e=>{var t=e.newDocumentState[s];c[t]=e}));var u=Object.keys(c),l=await t.findDocumentsById(u,!0),h=new Map;l.forEach((e=>h.set(e[s],e)));var d=[],f=[];return await Promise.all(Object.entries(c).map((async([t,s])=>{var a=h.get(t);a?a&&!s.assumedMasterState?d.push(lh(a,o,i)):!0===(await r({realMasterState:lh(a,o,i),newDocumentState:e(s.assumedMasterState)},"rxStorageInstanceToReplicationHandler-masterWrite")).isEqual?f.push({previous:a,document:uh(n,o,i,s.newDocumentState,a)}):d.push(lh(a,o,i)):f.push({document:uh(n,o,i,s.newDocumentState)})}))),f.length>0&&(await t.bulkWrite(f,"replication-master-write")).error.forEach((t=>{if(409!==t.status)throw new Error("non conflict error");d.push(lh(e(t.documentInDb),o,i))})),d}}}(t.storageInstance,t.conflictHandler,t.database.token)}var r=t.prototype;return r.addPeer=function(e,t){var r={peer:e,replicationState:t,subs:[]};this.peerStates$.next(this.peerStates$.getValue().set(e,r)),t&&r.subs.push(t.error$.subscribe((e=>this.error$.next(e))))},r.removePeer=function(e){var t=xt(this.peerStates$.getValue(),e);this.peerStates$.getValue().delete(e),this.peerStates$.next(this.peerStates$.getValue()),t.subs.forEach((e=>e.unsubscribe())),t.replicationState&&t.replicationState.cancel()},r.awaitFirstPeer=function(){return Zt(this.peerStates$.pipe(Ne((e=>e.size>0))))},r.cancel=async function(){this.canceled||(this.canceled=!0,this.subs.forEach((e=>e.unsubscribe())),Array.from(this.peerStates$.getValue().keys()).forEach((e=>{this.removePeer(e)})),await this.connectionHandler.destroy())},t}(),Vh=r(8853);function Hh(e,t){e.send(JSON.stringify(t))}var zh="signaling.rxdb.info",Wh="wss://"+zh+"/",Qh=!1;function Gh({signalingServerUrl:t,wrtc:r,webSocketConstructor:n}){return t=t||Wh,n=n||WebSocket,t.includes(zh)&&!Qh&&(Qh=!0,console.warn(["RxDB Warning: You are using the RxDB WebRTC replication plugin","but you did not specify your own signaling server url.","By default it will use a signaling server provided by RxDB at "+Wh,"This server is made for demonstration purposes and tryouts. It is not reliable and might be offline at any time.","In production you must always use your own signaling server instead.","Learn how to run your own server at https://rxdb.info/replication-webrtc.html","Also leave a ⭐ at the RxDB github repo 🙏 https://github.com/pubkey/rxdb 🙏"].join(" "))),async i=>{var o,s=new ft,a=new ft,c=new ft,u=new ft,l=new ft,h=new Map,d=!1,f=void 0;return function a(){d||((f=new n(t)).onclose=()=>a(),f.onopen=()=>{e(f).onmessage=t=>{var n=JSON.parse(t.data);switch(n.type){case"init":o=n.yourPeerId,Hh(e(f),{type:"join",room:i.topic});break;case"joined":n.otherPeerIds.forEach((t=>{if(t!==o&&!h.has(t)){var n=new Vh({initiator:t>o,wrtc:r,trickle:!0});h.set(t,n),n.on("signal",(r=>{Hh(e(f),{type:"signal",senderPeerId:o,receiverPeerId:t,room:i.topic,data:r})})),n.on("data",(e=>{(e=JSON.parse(e.toString())).result?u.next({peer:n,response:e}):c.next({peer:n,message:e})})),n.on("error",(e=>{console.log("CLIENT("+o+") peer got error:"),console.dir(e),l.next(I("RC_WEBRTC_PEER",{error:e}))})),n.on("connect",(()=>{s.next(n)}))}}));break;case"signal":xt(h,n.senderPeerId).signal(n.data)}}})}(),(async()=>{for(;await bt(6e4),!d;)f&&Hh(f,{type:"ping"})})(),{error$:l,connect$:s,disconnect$:a,message$:c,response$:u,async send(e,t){await e.send(JSON.stringify(t))},destroy:()=>(d=!0,e(f).close(),l.complete(),s.complete(),a.complete(),c.complete(),u.complete(),St)}}}var Jh,Yh,Xh,Zh=r(1581),ed=new Map,td=new Zh({strict:!1}),rd=function(e,t){var r=Ot(ed,"ajv",(()=>new Map));function n(e){return Ot(r,JSON.stringify(e),(()=>function(e){var t=td.compile(e);return e=>t(e)?[]:t.errors}(e)))}return e=>Object.assign({},e.storage,{async createStorageInstance(t){var r,i,o=await e.storage.createStorageInstance(t),s=G(t.schema.primaryKey);i=()=>r=n(t.schema),"function"==typeof requestIdleCallback&&requestIdleCallback((()=>{i()}));var a=o.bulkWrite.bind(o);return o.bulkWrite=(e,i)=>{r||(r=n(t.schema));var o=[],c=[];return e.forEach((e=>{var t=e.document[s],n=r(e.document);n.length>0?o.push({status:422,isError:!0,documentId:t,writeRow:e,validationErrors:n}):c.push(e)})),(c.length>0?a(c,i):Promise.resolve({error:[],success:[]})).then((e=>(o.forEach((t=>{e.error.push(t)})),e)))},o}})}(),nd={UT1:"given name is no string or empty",UT2:"collection- and database-names must match the regex to be compatible with couchdb databases.\n    See https://neighbourhood.ie/blog/2020/10/13/everything-you-need-to-know-about-couchdb-database-names/\n    info: if your database-name specifies a folder, the name must contain the slash-char '/' or '\\'",UT3:"replication-direction must either be push or pull or both. But not none",UT4:"given leveldown is no valid adapter",UT5:"keyCompression is set to true in the schema but no key-compression handler is used in the storage",UT6:"schema contains encrypted fields but no encryption handler is used in the storage",UT7:"attachments.compression is enabled but no attachment-compression plugin is used",PL1:"Given plugin is not RxDB plugin.",PL3:"A plugin with the same name was already added but it was not the exact same JavaScript object",P2:"bulkWrite() cannot be called with an empty array",QU1:"RxQuery._execOverDatabase(): op not known",QU4:"RxQuery.regex(): You cannot use .regex() on the primary field",QU5:"RxQuery.sort(): does not work because key is not defined in the schema",QU6:"RxQuery.limit(): cannot be called on .findOne()",QU9:"throwIfMissing can only be used in findOne queries",QU10:"result empty and throwIfMissing: true",QU11:"RxQuery: no valid query params given",QU12:"Given index is not in schema",QU13:"A top level field of the query is not included in the schema",QU14:"Running a count() query in slow mode is now allowed. Either run a count() query with a selector that fully matches an index or set allowSlowCount=true when calling the createRxDatabase",QU15:"For count queries it is not allowed to use skip or limit",QU16:"$regex queries must be defined by a string, not an RegExp instance. This is because RegExp objects cannot be JSON stringified and also they are mutable which would be dangerous",MQ1:"path must be a string or object",MQ2:"Invalid argument",MQ3:"Invalid sort() argument. Must be a string, object, or array",MQ4:"Invalid argument. Expected instanceof mquery or plain object",MQ5:"method must be used after where() when called with these arguments",MQ6:"Can't mix sort syntaxes. Use either array or object | .sort([['field', 1], ['test', -1]]) | .sort({ field: 1, test: -1 })",MQ7:"Invalid sort value",MQ8:"Can't mix sort syntaxes. Use either array or object",DB1:"RxDocument.prepare(): another instance on this adapter has a different password",DB2:"RxDatabase.addCollections(): collection-names cannot start with underscore _",DB3:"RxDatabase.addCollections(): collection already exists. use myDatabase.[collectionName] to get it",DB4:"RxDatabase.addCollections(): schema is missing",DB5:"RxDatabase.addCollections(): collection-name not allowed",DB6:"RxDatabase.addCollections(): another instance created this collection with a different schema. Read this https://pubkey.github.io/rxdb/questions-answers.html#cant-change-the-schema",DB8:"RxDatabase.create(): A RxDatabase with the same name and adapter already exists.\nMake sure to use this combination only once or set ignoreDuplicate to true if you do this intentional",DB11:"createRxDatabase(): Invalid db-name, folder-paths must not have an ending slash",DB12:"RxDatabase.addCollections(): could not write to internal store",DB13:"createRxDatabase(): Invalid db-name or collection name, name contains the dollar sign",COL1:"RxDocument.insert() You cannot insert an existing document",COL2:"RxCollection.insert() fieldName ._id can only be used as primaryKey",COL3:"RxCollection.upsert() does not work without primary",COL4:"RxCollection.incrementalUpsert() does not work without primary",COL5:"RxCollection.find() if you want to search by _id, use .findOne(_id)",COL6:"RxCollection.findOne() needs a queryObject or string",COL7:"hook must be a function",COL8:"hooks-when not known",COL9:"RxCollection.addHook() hook-name not known",COL10:"RxCollection .postCreate-hooks cannot be async",COL11:"migrationStrategies must be an object",COL12:"A migrationStrategy is missing or too much",COL13:"migrationStrategy must be a function",COL14:"given static method-name is not a string",COL15:"static method-names cannot start with underscore _",COL16:"given static method is not a function",COL17:"RxCollection.ORM: statics-name not allowed",COL18:"collection-method not allowed because fieldname is in the schema",COL20:"Storage write error",CONFLICT:"Document update conflict. When changing a document you must work on the previous revision",DOC1:"RxDocument.get$ cannot get observable of in-array fields because order cannot be guessed",DOC2:"cannot observe primary path",DOC3:"final fields cannot be observed",DOC4:"RxDocument.get$ cannot observe a non-existed field",DOC5:"RxDocument.populate() cannot populate a non-existed field",DOC6:"RxDocument.populate() cannot populate because path has no ref",DOC7:"RxDocument.populate() ref-collection not in database",DOC8:"RxDocument.set(): primary-key cannot be modified",DOC9:"final fields cannot be modified",DOC10:"RxDocument.set(): cannot set childpath when rootPath not selected",DOC11:"RxDocument.save(): can't save deleted document",DOC13:"RxDocument.remove(): Document is already deleted",DOC14:"RxDocument.destroy() does not exist",DOC15:"query cannot be an array",DOC16:"Since version 8.0.0 RxDocument.set() can only be called on temporary RxDocuments",DOC17:"Since version 8.0.0 RxDocument.save() can only be called on non-temporary documents",DOC18:"Document property for composed primary key is missing",DOC19:"Value of primary key(s) cannot be changed",DOC20:"PrimaryKey missing",DOC21:"PrimaryKey must be equal to PrimaryKey.trim(). It cannot start or end with a whitespace",DOC22:"PrimaryKey must not contain a linebreak",DOC23:'PrimaryKey must not contain a double-quote ["]',DOC24:"Given document data could not be structured cloned. This happens if you pass non-plain-json data into it, like a Date() or a Function. In vue.js this happens if you use ref() on the document data which transforms it into a Proxy object.",DM1:"migrate() Migration has already run",DM2:"migration of document failed final document does not match final schema",DM3:"migration already running",DM4:"Migration errored",DM5:"Cannot open database state with newer RxDB version. You have to migrate your database state first. See see https://rxdb.info/migration-storage.html",AT1:"to use attachments, please define this in your schema",EN1:"password is not valid",EN2:"validatePassword: min-length of password not complied",EN3:"Schema contains encrypted properties but no password is given",EN4:"Password not valid",JD1:"You must create the collections before you can import their data",JD2:"RxCollection.importJSON(): the imported json relies on a different schema",JD3:"RxCollection.importJSON(): json.passwordHash does not match the own",LD1:"RxDocument.allAttachments$ can't use attachments on local documents",LD2:"RxDocument.get(): objPath must be a string",LD3:"RxDocument.get$ cannot get observable of in-array fields because order cannot be guessed",LD4:"cannot observe primary path",LD5:"RxDocument.set() id cannot be modified",LD6:"LocalDocument: Function is not usable on local documents",LD7:"Local document already exists",LD8:"localDocuments not activated. Set localDocuments=true on creation, when you want to store local documents on the RxDatabase or RxCollection.",RC1:"Replication: already added",RC2:"replicateCouchDB() query must be from the same RxCollection",RC4:"RxCouchDBReplicationState.awaitInitialReplication() cannot await initial replication when live: true",RC5:"RxCouchDBReplicationState.awaitInitialReplication() cannot await initial replication if multiInstance because the replication might run on another instance",RC6:"syncFirestore() serverTimestampField MUST NOT be part of the collections schema and MUST NOT be nested.",RC_PULL:"RxReplication pull handler threw an error - see .errors for more details",RC_STREAM:"RxReplication pull stream$ threw an error - see .errors for more details",RC_PUSH:"RxReplication push handler threw an error - see .errors for more details",RC_PUSH_NO_AR:"RxReplication push handler did not return an array with the conflicts",RC_WEBRTC_PEER:"RxReplication WebRTC Peer has error",RC_COUCHDB_1:"replicateCouchDB() url must end with a slash like 'https://example.com/mydatabase/'",RC_COUCHDB_2:"replicateCouchDB() did not get valid result with rows.",SC1:"fieldnames do not match the regex",SC2:"SchemaCheck: name 'item' reserved for array-fields",SC3:"SchemaCheck: fieldname has a ref-array but items-type is not string",SC4:"SchemaCheck: fieldname has a ref but is not type string, [string,null] or array<string>",SC6:"SchemaCheck: primary can only be defined at top-level",SC7:"SchemaCheck: default-values can only be defined at top-level",SC8:"SchemaCheck: first level-fields cannot start with underscore _",SC10:"SchemaCheck: schema defines ._rev, this will be done automatically",SC11:"SchemaCheck: schema needs a number >=0 as version",SC13:"SchemaCheck: primary is always index, do not declare it as index",SC14:"SchemaCheck: primary is always unique, do not declare it as index",SC15:"SchemaCheck: primary cannot be encrypted",SC16:"SchemaCheck: primary must have type: string",SC17:"SchemaCheck: top-level fieldname is not allowed",SC18:"SchemaCheck: indexes must be an array",SC19:"SchemaCheck: indexes must contain strings or arrays of strings",SC20:"SchemaCheck: indexes.array must contain strings",SC21:"SchemaCheck: given index is not defined in schema",SC22:"SchemaCheck: given indexKey is not type:string",SC23:"SchemaCheck: fieldname is not allowed",SC24:"SchemaCheck: required fields must be set via array. See https://spacetelescope.github.io/understanding-json-schema/reference/object.html#required",SC25:"SchemaCheck: compoundIndexes needs to be specified in the indexes field",SC26:"SchemaCheck: indexes needs to be specified at collection schema level",SC27:"SchemaCheck: encrypted fields need to be specified at collection schema level",SC28:"SchemaCheck: encrypted fields is not defined in the schema",SC29:"SchemaCheck: missing object key 'properties'",SC30:"SchemaCheck: primaryKey is required",SC32:"SchemaCheck: primary field must have the type string/number/integer",SC33:"SchemaCheck: used primary key is not a property in the schema",SC34:"Fields of type string that are used in an index, must have set the maxLength attribute in the schema",SC35:"Fields of type number/integer that are used in an index, must have set the multipleOf attribute in the schema",SC36:"A field of this type cannot be used as index",SC37:"Fields of type number that are used in an index, must have set the minimum and maximum attribute in the schema",SC38:"Fields of type boolean that are used in an index, must be required in the schema",SC39:"The primary key must have the maxLength attribute set",SC40:"$ref fields in the schema are not allowed. RxDB cannot resolve related schemas because it would have a negative performance impact.It would have to run http requests on runtime. $ref fields should be resolved during build time.",VD1:"Sub-schema not found, does the schemaPath exists in your schema?",VD2:"object does not match schema",S1:"You cannot create collections after calling RxDatabase.server()",GQL1:"GraphQL replication: cannot find sub schema by key",GQL3:"GraphQL replication: pull returns more documents then batchSize",CRDT1:"CRDT operations cannot be used because the crdt options are not set in the schema.",CRDT2:"RxDocument.incrementalModify() cannot be used when CRDTs are activated.",CRDT3:"To use CRDTs you MUST NOT set a conflictHandler because the default CRDT conflict handler must be used",DXE1:"The dexie.js RxStorage does not support boolean indexes, see https://rxdb.info/rx-storage-dexie.html#boolean-index",SNH:"This should never happen"},id=new(Gt(Qt));function od(){if(!Xh){var e=Object.getOwnPropertyNames(id),t=Object.getOwnPropertyNames(Qt);Xh=[...e,...t,"deleted","synced"]}return Xh}function sd(e){var t=G(e.primaryKey);return function e(r,n){r&&"object"==typeof r&&Object.keys(r).forEach((i=>{var o=r[i];r.properties||!o||"object"!=typeof o||Array.isArray(r)||function(e,r,n){if("string"!=typeof e||"object"!=typeof r||Array.isArray(r)||"patternProperties"===n.split(".").pop()||function(e){if("_deleted"!==e){if(["properties"].includes(e))throw I("SC23",{fieldName:e});var t="^[a-zA-Z](?:[[a-zA-Z0-9_]*]?[a-zA-Z0-9])?$",r=new RegExp(t);if("_id"!==e&&!e.match(r))throw I("SC1",{regex:t,fieldName:e})}}(e),r.hasOwnProperty("item")&&"array"!==r.type)throw I("SC2",{fieldName:e});if(r.hasOwnProperty("required")&&"boolean"==typeof r.required)throw I("SC24",{fieldName:e});if(r.hasOwnProperty("$ref"))throw I("SC40",{fieldName:e});if(r.hasOwnProperty("ref"))if(Array.isArray(r.type)){if(r.type.length>2||!r.type.includes("string")||!r.type.includes("null"))throw I("SC4",{fieldName:e})}else switch(r.type){case"string":break;case"array":if(!r.items||!r.items.type||"string"!==r.items.type)throw I("SC3",{fieldName:e});break;default:throw I("SC4",{fieldName:e})}var i=n.split(".").length>=2;if(i){if(r.primary)throw I("SC6",{path:n,primary:r.primary});if(r.default)throw I("SC7",{path:n})}if(!i){if("_id"===e&&"_id"!==t)throw I("COL2",{fieldName:e});if("_"===e.charAt(0)){if("_id"===e||"_deleted"===e)return;throw I("SC8",{fieldName:e})}}}(i,o,n);var s=n;"properties"!==i&&(s=s+"."+i),e(o,s)}))}(e,""),!0}function ad(e){for(var t=e.split("."),r="",n=0;n<t.length;n+=1)r="[]"!==t[n]?r.concat(".properties.".concat(t[n])):r.concat(".items");return s(r)}function cd(e){e&&Object.entries(e).forEach((([e,t])=>{if("string"!=typeof e)throw j("COL14",{name:e});if(e.startsWith("_"))throw j("COL15",{name:e});if("function"!=typeof t)throw j("COL16",{name:e,type:typeof e});if(function(){if(!Jh){var e=new To,t=Object.getOwnPropertyNames(e),r=Object.getOwnPropertyNames(Object.getPrototypeOf(e));Jh=[...t,...r]}return Jh}().includes(e)||od().includes(e))throw I("COL17",{name:e})}))}var ud="^[a-z][_$a-z0-9\\-]*$",ld=new RegExp(ud);function hd(e){if("string"!=typeof e||0===e.length)throw j("UT1",{name:e});if(a(e))return!0;if(!e.match(ld)&&":memory:"!==e)throw I("UT2",{regex:ud,givenName:e});return!0}function dd(e){"object"==typeof e&&null!==e&&Object.keys(e).forEach((t=>{var r=e[t];if(r instanceof RegExp)throw I("QU16",{field:t,query:e});Array.isArray(r)?r.forEach((e=>dd(e))):dd(r)}))}var fd={name:"dev-mode",rxdb:!0,init:()=>{console.warn(["-------------- RxDB dev-mode warning -------------------------------","you are seeing this because you use the RxDB dev-mode plugin https://rxdb.info/dev-mode.html ","This is great in development mode, because it will run many checks to ensure","that you use RxDB correct. If you see this in production mode,","you did something wrong because the dev-mode plugin will decrease the performance.","","🤗 Hint: To get the most out of RxDB, check out the Premium Plugins","to get access to faster storages and more professional features: https://rxdb.info/premium","---------------------------------------------------------------------"].join("\n"))},overwritable:{isDevMode:()=>!0,deepFreezeWhenDevMode:function(e){return e&&"string"!=typeof e&&"number"!=typeof e?d(e):e},tunnelErrorMessage(e){if(!nd[e])throw console.error("RxDB: Error-Code not known: "+e),new Error("Error-Code "+e+" not known, contact the maintainer");return nd[e]}},hooks:{preCreateRxSchema:{after:function(e){if(!e.primaryKey)throw I("SC30",{schema:e});if(!e.hasOwnProperty("properties"))throw I("SC29",{schema:e});if(e.properties._rev)throw I("SC10",{schema:e});if(!e.hasOwnProperty("version")||"number"!=typeof e.version||e.version<0)throw I("SC11",{version:e.version});if(sd(e),function(e){if(!e.primaryKey)throw I("SC30",{schema:e});function t(t){if(!t)throw I("SC33",{schema:e});var r=t.type;if(!r||!["string","number","integer"].includes(r))throw I("SC32",{schema:e,args:{schemaPart:t}})}if("string"==typeof e.primaryKey){var r=e.primaryKey;t(e.properties[r])}else{var n=e.primaryKey;t(W(e,n.key)),n.fields.forEach((r=>{t(W(e,r))}))}var i=G(e.primaryKey),o=e.properties[i];if(!o.maxLength)throw I("SC39",{schema:e,args:{primaryPathSchemaPart:o}})}(e),Object.keys(e.properties).forEach((t=>{var r=e.properties[t];if(t===e.primaryKey){if(e.indexes&&e.indexes.includes(t))throw I("SC13",{value:r,schema:e});if(r.unique)throw I("SC14",{value:r,schema:e});if(e.encrypted&&e.encrypted.includes(t))throw I("SC15",{value:r,schema:e});if("string"!==r.type)throw I("SC16",{value:r,schema:e})}if(od().includes(t))throw I("SC17",{key:t,schema:e})})),e.indexes){if(!b(e.indexes))throw I("SC18",{indexes:e.indexes,schema:e});e.indexes.forEach((t=>{if("string"!=typeof t&&!Array.isArray(t))throw I("SC19",{index:t,schema:e});if(Array.isArray(t))for(var r=0;r<t.length;r+=1)if("string"!=typeof t[r])throw I("SC20",{index:t,schema:e});(b(t)?t:[t]).forEach((r=>{var n=W(e,r);switch(n.type){case"string":if(!n.maxLength)throw I("SC34",{index:t,field:r,schema:e});break;case"number":case"integer":if(!n.multipleOf)throw I("SC35",{index:t,field:r,schema:e});var i=n.maximum,o=n.minimum;if(void 0===i||void 0===o)throw I("SC37",{index:t,field:r,schema:e});break;case"boolean":var s="",a=r;if(r.includes(".")){var c=r.split(".");a=c.pop(),s=c.join(".")}var u=""===s?e:W(e,s);if(!u.required||!u.required.includes(a))throw I("SC38",{index:t,field:r,schema:e});break;default:throw I("SC36",{fieldName:r,type:n.type,schema:e})}}))}))}Object.keys(f(e)).map((e=>{var t=e.split(".");return t.pop(),t.join(".")})).filter((e=>""!==e)).filter(((e,t,r)=>r.indexOf(e)===t)).filter((t=>{var r=V(e,t);return r&&!!r.index})).forEach((t=>{throw I("SC26",{index:s(t=(t=t.replace("properties.","")).replace(/\.properties\./g,".")),schema:e})})),(e.indexes||[]).reduce(((e,t)=>(b(t)?E(e,t):e.push(t),e)),[]).filter(((e,t,r)=>r.indexOf(e)===t)).map((t=>{var r=ad(t),n=V(e,r);if(!n||"object"!=typeof n)throw I("SC21",{index:t,schema:e});return{indexPath:t,schemaObj:n}})).filter((e=>"string"!==e.schemaObj.type&&"integer"!==e.schemaObj.type&&"number"!==e.schemaObj.type&&"boolean"!==e.schemaObj.type)).forEach((t=>{throw I("SC22",{key:t.indexPath,type:t.schemaObj.type,schema:e})})),Object.keys(f(e)).map((e=>{var t=e.split(".");return t.pop(),t.join(".")})).filter((e=>""!==e&&"attachments"!==e)).filter(((e,t,r)=>r.indexOf(e)===t)).filter((t=>{var r=V(e,t);return r&&!!r.encrypted})).forEach((t=>{throw I("SC27",{index:s(t=(t=t.replace("properties.","")).replace(/\.properties\./g,".")),schema:e})})),e.encrypted&&e.encrypted.forEach((t=>{var r=ad(t),n=V(e,r);if(!n||"object"!=typeof n)throw I("SC28",{field:t,schema:e})}))}},preCreateRxDatabase:{after:function(e){!function(e){if(hd(e.name),e.name.includes("$"))throw I("DB13",{name:e.name});if(a(e.name)&&(e.name.endsWith("/")||e.name.endsWith("\\")))throw I("DB11",{name:e.name})}(e)}},preCreateRxCollection:{after:function(e){var t,r,n;if(function(e){if(function(){if(!Yh){var e=new Xo("pseudoInstance","memory"),t=Object.getOwnPropertyNames(e),r=Object.getOwnPropertyNames(Object.getPrototypeOf(e));Yh=[...t,...r],e.destroy()}return Yh}().includes(e.name))throw I("DB5",{name:e.name});hd(e.name)}(e),t=e.schema,r=e.methods,n=Object.keys(t.properties),r&&Object.keys(r).filter((e=>n.includes(e))).forEach((e=>{throw I("COL18",{funName:e})})),"_"===e.name.charAt(0))throw I("DB2",{name:e.name});if(!e.schema)throw I("DB4",{name:e.name,args:e})}},createRxDocument:{before:function(e){!function(e,t){if(!e)throw I("DOC20",{primaryKey:e,document:t});if(e!==e.trim())throw I("DOC21",{primaryKey:e,document:t});if(e.includes("\r")||e.includes("\n"))throw I("DOC22",{primaryKey:e,document:t});if(e.includes('"'))throw I("DOC23",{primaryKey:e,document:t})}(e.primary,e.toJSON(!0))}},preCreateRxQuery:{after:function(e){!function(e){if("[object Object]"!==Object.prototype.toString.call(e.queryObj))throw j("QU11",{op:e.op,collection:e.collection.name,queryObj:e.queryObj});var t=["selector","limit","skip","sort","index"];if(Object.keys(e.queryObj).forEach((r=>{if(!t.includes(r))throw j("QU11",{op:e.op,collection:e.collection.name,queryObj:e.queryObj,key:r,args:{validKeys:t}})})),"count"===e.op&&(e.queryObj.limit||e.queryObj.skip))throw I("QU15",{collection:e.collection.name,query:e.queryObj});dd(e.queryObj)}(e)}},prePrepareQuery:{after:e=>{!function(e){var t=e.rxQuery.collection.schema.jsonSchema,r=e.mangoQuery.selector,n=Object.keys(t.properties);Object.keys(r).filter((e=>!e.startsWith("$"))).filter((e=>!e.includes("."))).forEach((r=>{if(!n.includes(r))throw I("QU13",{schema:t,field:r,query:e.mangoQuery})}));var i=t.indexes?t.indexes:[],o=e.mangoQuery.index;if(o&&!i.find((e=>h(e,o))))throw I("QU12",{collection:e.rxQuery.collection.name,query:e.mangoQuery,schema:t});if("count"===e.rxQuery.op&&!function(e,t){return tl.prepareQuery(e,t).queryPlan.selectorSatisfiedByIndex}(e.rxQuery.collection.schema.jsonSchema,e.mangoQuery)&&!e.rxQuery.collection.database.allowSlowCount)throw I("QU14",{collection:e.rxQuery.collection,query:e.mangoQuery});e.mangoQuery.sort&&e.mangoQuery.sort.map((e=>Object.keys(e)[0])).filter((e=>!e.includes("."))).forEach((r=>{if(!n.includes(r))throw I("QU13",{schema:t,field:r,query:e.mangoQuery})})),dd(e.mangoQuery)}(e)}},createRxCollection:{after:e=>{cd(e.creator.statics),cd(e.creator.methods),cd(e.creator.attachments),e.creator.schema&&e.creator.migrationStrategies&&function(e,t){if("object"!=typeof t||Array.isArray(t))throw j("COL11",{schema:e});var r=function(e){var t=e.version?e.version:0,r=0;return new Array(t).fill(0).map((()=>r++))}(e);if(r.length!==Object.keys(t).length)throw I("COL12",{have:Object.keys(t),should:r});r.map((e=>({v:e,s:t[e+1]}))).filter((e=>"function"!=typeof e.s)).forEach((t=>{throw j("COL13",{version:t.v,type:typeof t,schema:e})}))}(e.creator.schema,e.creator.migrationStrategies)}}}};is(fd);var pd=function(e,t,r,n){return new(r||(r=Promise))((function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))}(void 0,void 0,void 0,(function(){var t,r,n;return function(e,t){var r,n,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(a){return function(c){return function(a){if(r)throw new TypeError("Generator is already executing.");for(;o&&(o=0,a[0]&&(s=0)),s;)try{if(r=1,n&&(i=2&a[0]?n.return:a[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,a[1])).done)return i;switch(n=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,n=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((i=(i=s.trys).length>0&&i[i.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){s.label=a[1];break}if(6===a[0]&&s.label<i[1]){s.label=i[1],i=a;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(a);break}i[2]&&s.ops.pop(),s.trys.pop();continue}a=t.call(e,s)}catch(e){a=[6,e],n=0}finally{r=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}}(this,(function(o){switch(o.label){case 0:return(!(t=window.location.hash)||t.length<5)&&(window.location.hash="room-"+i(10),window.location.reload()),[4,Qo(t)];case 1:return[4,es({name:"mydb-"+(r=o.sent()).substring(0,10),storage:rd({storage:Zl()})})];case 2:return[4,(n=o.sent()).addCollections({todos:{schema:{version:0,primaryKey:"id",type:"object",properties:{id:{type:"string",maxLength:20},name:{type:"string"},state:{type:"string",enum:["open","done"],maxLength:10},lastChange:{type:"number",minimum:1701307494132,maximum:2701307494132,multipleOf:1}},required:["id","name","state","lastChange"],indexes:["state",["state","lastChange"]]}}})];case 3:return o.sent(),n.todos.preSave((function(e){return e.lastChange=Date.now(),e}),!0),async function(t){var r=t.collection;is(Ah),t.pull&&(t.pull.batchSize||(t.pull.batchSize=20)),t.push&&(t.push.batchSize||(t.push.batchSize=20)),r.database.multiInstance&&await r.database.waitForLeadership();var n=0,o=i(10);function s(){var e=n++;return r.database.token+"|"+o+"|"+e}var a=await r.database.storageToken,c=new Kh(r,t,await t.connectionHandlerCreator(t));c.subs.push(c.connectionHandler.error$.subscribe((e=>c.error$.next(e))),c.connectionHandler.disconnect$.subscribe((e=>c.removePeer(e)))),c.subs.push(c.connectionHandler.message$.pipe(Ne((e=>"token"===e.message.method))).subscribe((e=>{c.connectionHandler.send(e.peer,{id:e.message.id,result:a})})));var u=c.connectionHandler.connect$.pipe(Ne((()=>!c.canceled))).subscribe((async n=>{var i,o;try{i=(await Uh(c.connectionHandler,n,{id:s(),method:"token",params:[]})).result}catch(e){return void c.error$.next(I("RC_WEBRTC_PEER",{error:e}))}if(await async function(e,t,r){return await e([t,r].join("|"))>await e([r,t].join("|"))}(r.database.hashFunction,a,i)){var u=c.masterReplicationHandler,l=u.masterChangeStream$.subscribe((e=>{var t={id:"masterChangeStream$",result:e};c.connectionHandler.send(n,t)}));c.subs.push(l,c.connectionHandler.disconnect$.pipe(Ne((e=>e.id===n.id))).subscribe((()=>l.unsubscribe())));var h=c.connectionHandler.message$.pipe(Ne((e=>e.peer.id===n.id)),Ne((e=>"token"!==e.message.method))).subscribe((async e=>{var{peer:t,message:r}=e,n=u[r.method].bind(u),i=await n(...r.params),o={id:r.id,result:i};c.connectionHandler.send(t,o)}));c.subs.push(h)}else o=function({replicationIdentifier:e,collection:t,deletedField:r="_deleted",pull:n,push:i,live:o=!0,retryTime:s=5e3,waitForLeadership:a=!0,autoStart:c=!0}){if(is(Ah),!n&&!i)throw I("UT3",{collection:t.name,args:{replicationIdentifier:e}});var u=new qh(e,t,r,n,i,o,s,c);return function(e,t){(e&&t.collection.database.multiInstance?t.collection.database.waitForLeadership():wt).then((()=>{t.isStopped()||t.autoStart&&t.start()}))}(a,u),u}({replicationIdentifier:[r.name,t.topic,i].join("||"),collection:r,autoStart:!0,deletedField:"_deleted",live:!0,retryTime:t.retryTime,waitForLeadership:!1,pull:t.pull?Object.assign({},t.pull,{handler:async r=>(await Uh(c.connectionHandler,n,{method:"masterChangesSince",params:[r,e(t.pull).batchSize],id:s()})).result,stream$:c.connectionHandler.response$.pipe(Ne((e=>"masterChangeStream$"===e.response.id)),Ae((e=>e.response.result)))}):void 0,push:t.push?Object.assign({},t.push,{handler:async e=>(await Uh(c.connectionHandler,n,{method:"masterWrite",params:[e],id:s()})).result}):void 0});c.addPeer(n,o)}));return c.subs.push(u),c}({collection:n.todos,connectionHandlerCreator:Gh({}),topic:r.substring(0,10),secret:"lol",pull:{},push:{}}).then((function(e){e.error$.subscribe((function(e){console.log("replication error:"),console.dir(e)})),e.peerStates$.subscribe((function(e){console.log("new peer states:"),console.dir(e)}))})),[2,n]}}))})),md=function(e,t,r,n){return new(r||(r=Promise))((function(i,o){function s(e){try{c(n.next(e))}catch(e){o(e)}}function a(e){try{c(n.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?i(e.value):(t=e.value,t instanceof r?t:new r((function(e){e(t)}))).then(s,a)}c((n=n.apply(e,t||[])).next())}))},yd=function(e,t){var r,n,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(a){return function(c){return function(a){if(r)throw new TypeError("Generator is already executing.");for(;o&&(o=0,a[0]&&(s=0)),s;)try{if(r=1,n&&(i=2&a[0]?n.return:a[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,a[1])).done)return i;switch(n=0,i&&(a=[2&a[0],i.value]),a[0]){case 0:case 1:i=a;break;case 4:return s.label++,{value:a[1],done:!1};case 5:s.label++,n=a[1],a=[0];continue;case 7:a=s.ops.pop(),s.trys.pop();continue;default:if(!((i=(i=s.trys).length>0&&i[i.length-1])||6!==a[0]&&2!==a[0])){s=0;continue}if(3===a[0]&&(!i||a[1]>i[0]&&a[1]<i[3])){s.label=a[1];break}if(6===a[0]&&s.label<i[1]){s.label=i[1],i=a;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(a);break}i[2]&&s.ops.pop(),s.trys.pop();continue}a=t.call(e,s)}catch(e){a=[6,e],n=0}finally{r=i=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,c])}}};md(void 0,void 0,void 0,(function(){var t,r,n;return yd(this,(function(o){switch(o.label){case 0:return[4,pd];case 1:return t=o.sent(),e(document.getElementById("copy-url")).innerHTML=window.location.href,r=e(document.getElementById("todo-list")),t.todos.find({sort:[{state:"desc"},{lastChange:"desc"}]}).$.subscribe((function(e){r.innerHTML="",e.forEach((function(e){return r.append(function(e){var t=this,r=document.createElement("li"),n=document.createElement("div"),i=document.createElement("input"),o=document.createElement("label"),s=document.createElement("button");return r.append(n),n.append(i),n.append(o),n.append(s),i.onclick=function(){return e.incrementalPatch({state:"done"===e.state?"open":"done"})},i.type="checkbox",i.classList.add("toggle"),o.contentEditable="true",o.onkeyup=function(r){return md(t,void 0,void 0,(function(){var t;return yd(this,(function(n){switch(n.label){case 0:return"Enter"!==r.code?[3,2]:(t=o.innerHTML.replace(/<br>/g,"").replace(/\&nbsp;/g," ").trim(),[4,e.incrementalPatch({name:t})]);case 1:n.sent(),n.label=2;case 2:return[2]}}))}))},o.innerHTML=function(e){return e.replace(/[&<]/g,(function(e){return"&"===e?"&amp;":"&lt;"}))}(e.name),s.classList.add("destroy"),s.onclick=function(){return e.remove()},"done"===e.state&&(r.classList.add("completed"),i.checked=!0),r}(e))}))})),(n=e(document.getElementById("insert-todo"))).onkeydown=function(e){return md(void 0,void 0,void 0,(function(){return yd(this,(function(r){switch(r.label){case 0:return"Enter"===e.code&&n.value.length>0?[4,t.todos.insert({id:i(10),name:n.value,state:"open",lastChange:Date.now()})]:[3,2];case 1:r.sent(),n.value="",r.label=2;case 2:return[2]}}))}))},e(document.getElementById("clear-completed")).onclick=function(){return t.todos.find({selector:{state:"done"}}).remove()},[2]}}))}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,